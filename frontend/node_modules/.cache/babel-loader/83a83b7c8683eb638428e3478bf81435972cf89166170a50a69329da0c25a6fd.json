{"ast":null,"code":"// TemperatureUtility.js - Optimizado para compartir estado entre componentes\n\n// Valores iniciales\nlet currentTemperature = 25;\nlet minTemperature = 22;\nlet maxTemperature = 32;\n\n// Lista de suscriptores que serán notificados cuando cambie cualquier valor\nconst subscribers = {\n  temperature: [],\n  minTemp: [],\n  maxTemp: []\n};\n\n// Obtener la temperatura actual\nexport const getTemperature = () => {\n  return currentTemperature;\n};\n\n// Obtener temperatura mínima\nexport const getMinTemperature = () => {\n  return minTemperature;\n};\n\n// Obtener temperatura máxima\nexport const getMaxTemperature = () => {\n  return maxTemperature;\n};\n\n// Establecer una nueva temperatura y notificar a los suscriptores\nexport const setTemperature = newTemperature => {\n  // Convertimos a número para asegurar consistencia\n  const tempValue = parseFloat(newTemperature);\n  if (isNaN(tempValue)) return;\n  currentTemperature = tempValue;\n  // Notificar a todos los suscriptores de temperatura\n  subscribers.temperature.forEach(callback => callback(tempValue));\n  console.log(\"Temperatura actualizada:\", tempValue);\n\n  // Comprobamos si debemos enviar alerta (fuera del rango)\n  return isTempOutOfRange();\n};\n\n// Establecer nueva temperatura mínima\nexport const setMinTemperature = newMin => {\n  const minValue = parseFloat(newMin);\n  if (isNaN(minValue)) return;\n  minTemperature = minValue;\n  subscribers.minTemp.forEach(callback => callback(minValue));\n  console.log(\"Temperatura mínima actualizada:\", minValue);\n};\n\n// Establecer nueva temperatura máxima\nexport const setMaxTemperature = newMax => {\n  const maxValue = parseFloat(newMax);\n  if (isNaN(maxValue)) return;\n  maxTemperature = maxValue;\n  subscribers.maxTemp.forEach(callback => callback(maxValue));\n  console.log(\"Temperatura máxima actualizada:\", maxValue);\n};\n\n// Comprobar si la temperatura está fuera del rango permitido\nexport const isTempOutOfRange = () => {\n  return currentTemperature < minTemperature || currentTemperature > maxTemperature;\n};\n\n// Suscribirse a cambios de temperatura\nexport const subscribeToTemperature = callback => {\n  subscribers.temperature.push(callback);\n\n  // Retornar una función para cancelar la suscripción\n  return () => {\n    const index = subscribers.temperature.indexOf(callback);\n    if (index !== -1) {\n      subscribers.temperature.splice(index, 1);\n    }\n  };\n};\n\n// Suscribirse a cambios en la temperatura mínima\nexport const subscribeToMinTemp = callback => {\n  subscribers.minTemp.push(callback);\n  return () => {\n    const index = subscribers.minTemp.indexOf(callback);\n    if (index !== -1) {\n      subscribers.minTemp.splice(index, 1);\n    }\n  };\n};\n\n// Suscribirse a cambios en la temperatura máxima\nexport const subscribeToMaxTemp = callback => {\n  subscribers.maxTemp.push(callback);\n  return () => {\n    const index = subscribers.maxTemp.indexOf(callback);\n    if (index !== -1) {\n      subscribers.maxTemp.splice(index, 1);\n    }\n  };\n};\n\n// Exportamos todo en un objeto para ser usado sin ESM\nconst TemperatureUtility = {\n  getTemperature,\n  getMinTemperature,\n  getMaxTemperature,\n  setTemperature,\n  setMinTemperature,\n  setMaxTemperature,\n  isTempOutOfRange,\n  subscribeToTemperature,\n  subscribeToMinTemp,\n  subscribeToMaxTemp\n};\nexport default TemperatureUtility;","map":{"version":3,"names":["currentTemperature","minTemperature","maxTemperature","subscribers","temperature","minTemp","maxTemp","getTemperature","getMinTemperature","getMaxTemperature","setTemperature","newTemperature","tempValue","parseFloat","isNaN","forEach","callback","console","log","isTempOutOfRange","setMinTemperature","newMin","minValue","setMaxTemperature","newMax","maxValue","subscribeToTemperature","push","index","indexOf","splice","subscribeToMinTemp","subscribeToMaxTemp","TemperatureUtility"],"sources":["C:/Users/Roger/Documents/TT2_AVANCES/prototipo-gecko/frontend/src/pages/TemperatureUtility.js"],"sourcesContent":["// TemperatureUtility.js - Optimizado para compartir estado entre componentes\r\n\r\n// Valores iniciales\r\nlet currentTemperature = 25;\r\nlet minTemperature = 22;\r\nlet maxTemperature = 32;\r\n\r\n// Lista de suscriptores que serán notificados cuando cambie cualquier valor\r\nconst subscribers = {\r\n  temperature: [],\r\n  minTemp: [],\r\n  maxTemp: []\r\n};\r\n\r\n// Obtener la temperatura actual\r\nexport const getTemperature = () => {\r\n  return currentTemperature;\r\n};\r\n\r\n// Obtener temperatura mínima\r\nexport const getMinTemperature = () => {\r\n  return minTemperature;\r\n};\r\n\r\n// Obtener temperatura máxima\r\nexport const getMaxTemperature = () => {\r\n  return maxTemperature;\r\n};\r\n\r\n// Establecer una nueva temperatura y notificar a los suscriptores\r\nexport const setTemperature = (newTemperature) => {\r\n  // Convertimos a número para asegurar consistencia\r\n  const tempValue = parseFloat(newTemperature);\r\n  if (isNaN(tempValue)) return;\r\n  \r\n  currentTemperature = tempValue;\r\n  // Notificar a todos los suscriptores de temperatura\r\n  subscribers.temperature.forEach(callback => callback(tempValue));\r\n  console.log(\"Temperatura actualizada:\", tempValue);\r\n  \r\n  // Comprobamos si debemos enviar alerta (fuera del rango)\r\n  return isTempOutOfRange();\r\n};\r\n\r\n// Establecer nueva temperatura mínima\r\nexport const setMinTemperature = (newMin) => {\r\n  const minValue = parseFloat(newMin);\r\n  if (isNaN(minValue)) return;\r\n  \r\n  minTemperature = minValue;\r\n  subscribers.minTemp.forEach(callback => callback(minValue));\r\n  console.log(\"Temperatura mínima actualizada:\", minValue);\r\n};\r\n\r\n// Establecer nueva temperatura máxima\r\nexport const setMaxTemperature = (newMax) => {\r\n  const maxValue = parseFloat(newMax);\r\n  if (isNaN(maxValue)) return;\r\n  \r\n  maxTemperature = maxValue;\r\n  subscribers.maxTemp.forEach(callback => callback(maxValue));\r\n  console.log(\"Temperatura máxima actualizada:\", maxValue);\r\n};\r\n\r\n// Comprobar si la temperatura está fuera del rango permitido\r\nexport const isTempOutOfRange = () => {\r\n  return currentTemperature < minTemperature || currentTemperature > maxTemperature;\r\n};\r\n\r\n// Suscribirse a cambios de temperatura\r\nexport const subscribeToTemperature = (callback) => {\r\n  subscribers.temperature.push(callback);\r\n  \r\n  // Retornar una función para cancelar la suscripción\r\n  return () => {\r\n    const index = subscribers.temperature.indexOf(callback);\r\n    if (index !== -1) {\r\n      subscribers.temperature.splice(index, 1);\r\n    }\r\n  };\r\n};\r\n\r\n// Suscribirse a cambios en la temperatura mínima\r\nexport const subscribeToMinTemp = (callback) => {\r\n  subscribers.minTemp.push(callback);\r\n  return () => {\r\n    const index = subscribers.minTemp.indexOf(callback);\r\n    if (index !== -1) {\r\n      subscribers.minTemp.splice(index, 1);\r\n    }\r\n  };\r\n};\r\n\r\n// Suscribirse a cambios en la temperatura máxima\r\nexport const subscribeToMaxTemp = (callback) => {\r\n  subscribers.maxTemp.push(callback);\r\n  return () => {\r\n    const index = subscribers.maxTemp.indexOf(callback);\r\n    if (index !== -1) {\r\n      subscribers.maxTemp.splice(index, 1);\r\n    }\r\n  };\r\n};\r\n\r\n// Exportamos todo en un objeto para ser usado sin ESM\r\nconst TemperatureUtility = {\r\n  getTemperature,\r\n  getMinTemperature,\r\n  getMaxTemperature,\r\n  setTemperature,\r\n  setMinTemperature,\r\n  setMaxTemperature,\r\n  isTempOutOfRange,\r\n  subscribeToTemperature,\r\n  subscribeToMinTemp,\r\n  subscribeToMaxTemp\r\n};\r\n\r\nexport default TemperatureUtility;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}