{"ast":null,"code":"import React, { useState } from \"react\";\nimport styled from \"styled-components\";\nimport { useNavigate } from \"react-router-dom\";\nimport Header from \"../components/Header\";\nimport Footer from \"../components/Footer\";\nimport InputField from \"../components/InputField\";\nimport Button from \"../components/Button\";\nimport gecko from \"../assets/reptil-gecko.png\";\nimport planta from \"../assets/planta.png\";\n\n// 游늷 Contenedor principal m치s delgado\nconst Container = styled.div`\n  padding-top: ${props => props.headerHeight + 40}px;\n  padding-left: 40px;\n  padding-right: 40px;\n  padding-bottom: 75px;\n  background: white;\n  border-radius: 20px;\n  width: 80%;  /* Reducir ancho */\n  max-width: 500px; /* Antes era m치s ancho, ahora m치s compacto */\n  margin: auto;\n  box-shadow: 0px 4px 10px rgba(0, 0, 0, 0.2);\n  position: relative;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n`;\nconst LoginBox = styled.div`\n  background: rgb(239,191,134);\n  background: linear-gradient(90deg, rgba(239,191,134,0.51) 0%, rgba(236,137,19,0.5) 51%, rgba(239,191,134,0.5) 100%);\n  padding: 30px;\n  border-radius: 30px; /* Menos redondeado */\n  box-shadow: 0px 4px 10px rgba(0, 0, 0, 0.2);\n  text-align: center;\n  width: 90%;\n`;\nconst Title = styled.h2`\n  color: black;\n  margin-bottom: 15px;\n`;\nconst Label = styled.label`\n  display: block;\n  margin: 10px 0 5px;\n  font-weight: bold;\n  color: black;\n`;\nconst ForgotPassword = styled.a`\n  display: block;\n  margin-top: 10px;\n  color: blue;\n  text-decoration: none;\n  cursor: pointer;\n\n  &:hover {\n    text-decoration: underline;\n  }\n`;\nconst StyledGecko = styled.img`\n  position: absolute;\n  top: 14%;\n  left: 76%;\n  width: 250px;\n  filter: brightness(50%);\n`;\nconst StyledPlanta = styled.img`\n  position: absolute;\n  bottom: 1%;\n  left: 33%;\n  width: 200px;\n`;\napp.post(\"/login\", async (req, res) => {\n  const {\n    username,\n    email,\n    password\n  } = req.body;\n  if (!username || !email || !password) {\n    return res.status(400).json({\n      error: \"Todos los campos son obligatorios\"\n    });\n  }\n\n  // Buscar si el usuario ya existe en la base de datos\n  db.query(\"SELECT * FROM users WHERE username = ? AND email = ?\", [username, email], async (err, results) => {\n    if (err) return res.status(500).json({\n      error: \"Error en el servidor\"\n    });\n\n    // 游늷 Si el usuario NO EXISTE, se crea autom치ticamente\n    if (results.length === 0) {\n      const salt = await bcrypt.genSalt(10);\n      const hashedPassword = await bcrypt.hash(password, salt);\n      db.query(\"INSERT INTO users (username, email, password) VALUES (?, ?, ?)\", [username, email, hashedPassword], (err, result) => {\n        if (err) {\n          return res.status(500).json({\n            error: \"Error al registrar el usuario\"\n          });\n        }\n\n        // 游늷 Ahora el usuario est치 registrado, generamos su token\n        const token = jwt.sign({\n          id: result.insertId,\n          username\n        }, process.env.SECRET_KEY, {\n          expiresIn: \"1h\"\n        });\n        return res.json({\n          message: \"Usuario registrado e inicio de sesi칩n exitoso\",\n          token\n        });\n      });\n    } else {\n      // 游늷 Si el usuario YA EXISTE, se valida la contrase침a\n      const user = results[0];\n      const isMatch = await bcrypt.compare(password, user.password);\n      if (!isMatch) return res.status(401).json({\n        error: \"Contrase침a incorrecta\"\n      });\n\n      // 游늷 Generar el token para el usuario existente\n      const token = jwt.sign({\n        id: user.id,\n        username\n      }, process.env.SECRET_KEY, {\n        expiresIn: \"1h\"\n      });\n      return res.json({\n        message: \"Inicio de sesi칩n exitoso\",\n        token\n      });\n    }\n  });\n});","map":{"version":3,"names":["React","useState","styled","useNavigate","Header","Footer","InputField","Button","gecko","planta","Container","div","props","headerHeight","LoginBox","Title","h2","Label","label","ForgotPassword","a","StyledGecko","img","StyledPlanta","app","post","req","res","username","email","password","body","status","json","error","db","query","err","results","length","salt","bcrypt","genSalt","hashedPassword","hash","result","token","jwt","sign","id","insertId","process","env","SECRET_KEY","expiresIn","message","user","isMatch","compare"],"sources":["C:/Users/Usuario/Documents/PRUEBA/tt/frontend/src/pages/login.jsx"],"sourcesContent":["import React, { useState } from \"react\";\r\nimport styled from \"styled-components\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport Header from \"../components/Header\";  \r\nimport Footer from \"../components/Footer\";\r\nimport InputField from \"../components/InputField\";\r\nimport Button from \"../components/Button\";\r\nimport gecko from \"../assets/reptil-gecko.png\";\r\nimport planta from \"../assets/planta.png\";\r\n\r\n// 游늷 Contenedor principal m치s delgado\r\nconst Container = styled.div`\r\n  padding-top: ${(props) => props.headerHeight + 40}px;\r\n  padding-left: 40px;\r\n  padding-right: 40px;\r\n  padding-bottom: 75px;\r\n  background: white;\r\n  border-radius: 20px;\r\n  width: 80%;  /* Reducir ancho */\r\n  max-width: 500px; /* Antes era m치s ancho, ahora m치s compacto */\r\n  margin: auto;\r\n  box-shadow: 0px 4px 10px rgba(0, 0, 0, 0.2);\r\n  position: relative;\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n`;\r\n\r\nconst LoginBox = styled.div`\r\n  background: rgb(239,191,134);\r\n  background: linear-gradient(90deg, rgba(239,191,134,0.51) 0%, rgba(236,137,19,0.5) 51%, rgba(239,191,134,0.5) 100%);\r\n  padding: 30px;\r\n  border-radius: 30px; /* Menos redondeado */\r\n  box-shadow: 0px 4px 10px rgba(0, 0, 0, 0.2);\r\n  text-align: center;\r\n  width: 90%;\r\n`;\r\n\r\nconst Title = styled.h2`\r\n  color: black;\r\n  margin-bottom: 15px;\r\n`;\r\n\r\nconst Label = styled.label`\r\n  display: block;\r\n  margin: 10px 0 5px;\r\n  font-weight: bold;\r\n  color: black;\r\n`;\r\n\r\nconst ForgotPassword = styled.a`\r\n  display: block;\r\n  margin-top: 10px;\r\n  color: blue;\r\n  text-decoration: none;\r\n  cursor: pointer;\r\n\r\n  &:hover {\r\n    text-decoration: underline;\r\n  }\r\n`;\r\n\r\nconst StyledGecko = styled.img`\r\n  position: absolute;\r\n  top: 14%;\r\n  left: 76%;\r\n  width: 250px;\r\n  filter: brightness(50%);\r\n`;\r\n\r\nconst StyledPlanta = styled.img`\r\n  position: absolute;\r\n  bottom: 1%;\r\n  left: 33%;\r\n  width: 200px;\r\n`;\r\n\r\napp.post(\"/login\", async (req, res) => {\r\n    const { username, email, password } = req.body;\r\n\r\n    if (!username || !email || !password) {\r\n        return res.status(400).json({ error: \"Todos los campos son obligatorios\" });\r\n    }\r\n\r\n    // Buscar si el usuario ya existe en la base de datos\r\n    db.query(\"SELECT * FROM users WHERE username = ? AND email = ?\", [username, email], async (err, results) => {\r\n        if (err) return res.status(500).json({ error: \"Error en el servidor\" });\r\n\r\n        // 游늷 Si el usuario NO EXISTE, se crea autom치ticamente\r\n        if (results.length === 0) {\r\n            const salt = await bcrypt.genSalt(10);\r\n            const hashedPassword = await bcrypt.hash(password, salt);\r\n\r\n            db.query(\r\n                \"INSERT INTO users (username, email, password) VALUES (?, ?, ?)\",\r\n                [username, email, hashedPassword],\r\n                (err, result) => {\r\n                    if (err) {\r\n                        return res.status(500).json({ error: \"Error al registrar el usuario\" });\r\n                    }\r\n\r\n                    // 游늷 Ahora el usuario est치 registrado, generamos su token\r\n                    const token = jwt.sign({ id: result.insertId, username }, process.env.SECRET_KEY, {\r\n                        expiresIn: \"1h\",\r\n                    });\r\n\r\n                    return res.json({ message: \"Usuario registrado e inicio de sesi칩n exitoso\", token });\r\n                }\r\n            );\r\n        } else {\r\n            // 游늷 Si el usuario YA EXISTE, se valida la contrase침a\r\n            const user = results[0];\r\n            const isMatch = await bcrypt.compare(password, user.password);\r\n\r\n            if (!isMatch) return res.status(401).json({ error: \"Contrase침a incorrecta\" });\r\n\r\n            // 游늷 Generar el token para el usuario existente\r\n            const token = jwt.sign({ id: user.id, username }, process.env.SECRET_KEY, {\r\n                expiresIn: \"1h\",\r\n            });\r\n\r\n            return res.json({ message: \"Inicio de sesi칩n exitoso\", token });\r\n        }\r\n    });\r\n});\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}