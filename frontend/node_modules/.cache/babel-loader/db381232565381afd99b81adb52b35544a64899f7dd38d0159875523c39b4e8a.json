{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Roger\\\\Documents\\\\TT2_AVANCES\\\\prototipo-gecko\\\\frontend\\\\src\\\\pages\\\\pruebasNotificaciones.jsx\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport { jwtDecode } from 'jwt-decode';\n\n// Función para enviar la alerta por correo\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst enviarEmail = async (descripcion, temperatura, setAlertStatus) => {\n  setAlertStatus('Enviando alerta...');\n  try {\n    const response = await fetch('http://localhost:5000/send-email', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        descripcion,\n        temperatura\n      })\n    });\n    const result = await response.json();\n    if (response.ok) {\n      console.log('Alerta enviada con éxito:', result.message);\n      setAlertStatus('Alerta enviada con éxito');\n    } else {\n      console.error('Error en la respuesta del servidor:', result.message);\n      setAlertStatus(`Error: ${result.message}`);\n    }\n  } catch (error) {\n    console.error('Error al enviar la alerta:', error);\n    setAlertStatus(`Error de conexión: ${error.message}`);\n  }\n};\n\n// Función para insertar la temperatura en la base de datos SIEMPRE\nconst enviarTemperatura = async (ID_usuario, temperatura, Zona, Marca_tiempo) => {\n  try {\n    if (!ID_usuario || !temperatura || !Zona || !Marca_tiempo) {\n      console.error('Datos incompletos:', {\n        ID_usuario,\n        temperatura,\n        Zona,\n        Marca_tiempo\n      });\n      throw new Error('Todos los campos son obligatorios');\n    }\n    console.log('Registrando temperatura en la base de datos:', {\n      ID_usuario,\n      Medicion: temperatura,\n      Zona,\n      Marca_tiempo\n    });\n    await axios.post('http://localhost:5000/api/addtemperatura', {\n      ID_usuario,\n      Medicion: temperatura,\n      Zona,\n      Marca_tiempo\n    }, {\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      timeout: 10000\n    });\n    console.log('Temperatura guardada correctamente.');\n  } catch (error) {\n    console.error('Error al guardar la temperatura:', error);\n  }\n};\n\n// Función para gestionar alertas\nconst gestionarNotificacion = async (temperatura, ID_usuario, setAlertStatus, setLastAlertValue, setCooldown, lastAlertValue) => {\n  const Marca_tiempo = new Date().toISOString().slice(0, 19).replace('T', ' ');\n\n  // Insertar SIEMPRE la temperatura en la base de datos\n  await enviarTemperatura(ID_usuario, temperatura, 'Zona 1', Marca_tiempo);\n  const temperaturaFormateada = temperatura.toFixed(2);\n  console.log('Temperatura formateada:', temperaturaFormateada);\n  if (lastAlertValue !== null && Math.abs(temperatura - lastAlertValue) < 1) {\n    console.log('Temperatura similar a la anterior, no se enviará alerta.');\n    return;\n  }\n  if (temperatura < 22 || temperatura > 32) {\n    try {\n      await enviarEmail('Temperatura fuera de rango', temperatura, setAlertStatus);\n      const notificacionResponse = await axios.post('http://localhost:5000/api/addNotification', {\n        tipo: 'temperatura',\n        descripcion: `Temperatura fuera de rango: ${temperaturaFormateada}°C`,\n        time_alert: Marca_tiempo\n      }, {\n        headers: {\n          'Content-Type': 'application/json'\n        }\n      });\n      const idNotificacion = notificacionResponse.data.id_notificacion;\n      if (idNotificacion) {\n        await axios.post('http://localhost:5000/api/addNotificationUser', {\n          id_notificacion: idNotificacion,\n          id_user: ID_usuario\n        }, {\n          headers: {\n            'Content-Type': 'application/json'\n          }\n        });\n        console.log('Relación notificación-usuario guardada con éxito');\n      }\n      setLastAlertValue(temperatura);\n      setCooldown(true);\n      setTimeout(() => setCooldown(false), 10000);\n    } catch (error) {\n      console.error('Error al gestionar la notificación:', error);\n      setAlertStatus(`Error de conexión: ${error.message}`);\n    }\n  }\n};\nconst TemperaturaAlert = ({\n  temperatura,\n  setTemperatura\n}) => {\n  _s();\n  const [inputValue, setInputValue] = useState(temperatura.toString());\n  const [lastAlertValue, setLastAlertValue] = useState(null);\n  const [alertStatus, setAlertStatus] = useState('');\n  const [cooldown, setCooldown] = useState(false);\n  const token = localStorage.getItem('token');\n  const ID_usuario = token ? jwtDecode(token).id : '';\n  const handleInputChange = e => setInputValue(e.target.value);\n  const handleUpdateTemperature = () => {\n    const newTemperatura = parseFloat(inputValue);\n    if (!isNaN(newTemperatura)) {\n      setTemperatura(newTemperatura);\n      gestionarNotificacion(newTemperatura, ID_usuario, setAlertStatus, setLastAlertValue, setCooldown, lastAlertValue);\n    } else {\n      setAlertStatus('Por favor ingrese un número válido');\n      setTimeout(() => setAlertStatus(''), 3000);\n    }\n  };\n  useEffect(() => {\n    if (isNaN(temperatura)) return;\n    gestionarNotificacion(temperatura, ID_usuario, setAlertStatus, setLastAlertValue, setCooldown, lastAlertValue);\n  }, [temperatura]);\n  useEffect(() => setInputValue(temperatura.toString()), [temperatura]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"PruebasNotificaciones\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Monitoreo De Temperatura\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 141,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"temperatura\",\n        children: \"Temperatura (\\xB0C): \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 143,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        id: \"temperatura\",\n        type: \"number\",\n        value: inputValue,\n        onChange: handleInputChange,\n        step: \"0.1\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 144,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleUpdateTemperature,\n        children: \"Actualizar\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 145,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 142,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Temperatura actual: \", /*#__PURE__*/_jsxDEV(\"span\", {\n        children: [temperatura.toFixed(2), \"\\xB0C\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 147,\n        columnNumber: 30\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 147,\n      columnNumber: 7\n    }, this), alertStatus && /*#__PURE__*/_jsxDEV(\"p\", {\n      children: alertStatus\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 148,\n      columnNumber: 23\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 140,\n    columnNumber: 5\n  }, this);\n};\n_s(TemperaturaAlert, \"I/uslIiysgS1kJ7pMV9ImoXmBao=\");\n_c = TemperaturaAlert;\nconst PruebasNotificaciones = () => {\n  _s2();\n  const [temperatura, setTemperatura] = useState(25);\n  return /*#__PURE__*/_jsxDEV(TemperaturaAlert, {\n    temperatura: temperatura,\n    setTemperatura: setTemperatura\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 155,\n    columnNumber: 10\n  }, this);\n};\n_s2(PruebasNotificaciones, \"BSLE6W81eo5m/C7rYFlDzZ5wRTU=\");\n_c2 = PruebasNotificaciones;\nexport default PruebasNotificaciones;\nvar _c, _c2;\n$RefreshReg$(_c, \"TemperaturaAlert\");\n$RefreshReg$(_c2, \"PruebasNotificaciones\");","map":{"version":3,"names":["useState","useEffect","axios","jwtDecode","jsxDEV","_jsxDEV","enviarEmail","descripcion","temperatura","setAlertStatus","response","fetch","method","headers","body","JSON","stringify","result","json","ok","console","log","message","error","enviarTemperatura","ID_usuario","Zona","Marca_tiempo","Error","Medicion","post","timeout","gestionarNotificacion","setLastAlertValue","setCooldown","lastAlertValue","Date","toISOString","slice","replace","temperaturaFormateada","toFixed","Math","abs","notificacionResponse","tipo","time_alert","idNotificacion","data","id_notificacion","id_user","setTimeout","TemperaturaAlert","setTemperatura","_s","inputValue","setInputValue","toString","alertStatus","cooldown","token","localStorage","getItem","id","handleInputChange","e","target","value","handleUpdateTemperature","newTemperatura","parseFloat","isNaN","className","children","fileName","_jsxFileName","lineNumber","columnNumber","htmlFor","type","onChange","step","onClick","_c","PruebasNotificaciones","_s2","_c2","$RefreshReg$"],"sources":["C:/Users/Roger/Documents/TT2_AVANCES/prototipo-gecko/frontend/src/pages/pruebasNotificaciones.jsx"],"sourcesContent":["import { useState, useEffect } from 'react';\r\nimport axios from 'axios';\r\nimport { jwtDecode } from 'jwt-decode';\r\n\r\n// Función para enviar la alerta por correo\r\nconst enviarEmail = async (descripcion, temperatura, setAlertStatus) => {\r\n  setAlertStatus('Enviando alerta...');\r\n  try {\r\n    const response = await fetch('http://localhost:5000/send-email', {\r\n      method: 'POST',\r\n      headers: { 'Content-Type': 'application/json' },\r\n      body: JSON.stringify({ descripcion, temperatura }),\r\n    });\r\n\r\n    const result = await response.json();\r\n    if (response.ok) {\r\n      console.log('Alerta enviada con éxito:', result.message);\r\n      setAlertStatus('Alerta enviada con éxito');\r\n    } else {\r\n      console.error('Error en la respuesta del servidor:', result.message);\r\n      setAlertStatus(`Error: ${result.message}`);\r\n    }\r\n  } catch (error) {\r\n    console.error('Error al enviar la alerta:', error);\r\n    setAlertStatus(`Error de conexión: ${error.message}`);\r\n  }\r\n};\r\n\r\n// Función para insertar la temperatura en la base de datos SIEMPRE\r\nconst enviarTemperatura = async (ID_usuario, temperatura, Zona, Marca_tiempo) => {\r\n  try {\r\n    if (!ID_usuario || !temperatura || !Zona || !Marca_tiempo) {\r\n      console.error('Datos incompletos:', { ID_usuario, temperatura, Zona, Marca_tiempo });\r\n      throw new Error('Todos los campos son obligatorios');\r\n    }\r\n\r\n    console.log('Registrando temperatura en la base de datos:', {\r\n      ID_usuario,\r\n      Medicion: temperatura,\r\n      Zona,\r\n      Marca_tiempo\r\n    });\r\n\r\n    await axios.post(\r\n      'http://localhost:5000/api/addtemperatura',\r\n      {\r\n        ID_usuario,\r\n        Medicion: temperatura,\r\n        Zona,\r\n        Marca_tiempo\r\n      },\r\n      { headers: { \"Content-Type\": \"application/json\" }, timeout: 10000 }\r\n    );\r\n\r\n    console.log('Temperatura guardada correctamente.');\r\n  } catch (error) {\r\n    console.error('Error al guardar la temperatura:', error);\r\n  }\r\n};\r\n\r\n// Función para gestionar alertas\r\nconst gestionarNotificacion = async (temperatura, ID_usuario, setAlertStatus, setLastAlertValue, setCooldown, lastAlertValue) => {\r\n  const Marca_tiempo = new Date().toISOString().slice(0, 19).replace('T', ' ');\r\n\r\n  // Insertar SIEMPRE la temperatura en la base de datos\r\n  await enviarTemperatura(ID_usuario, temperatura, 'Zona 1', Marca_tiempo);\r\n\r\n  const temperaturaFormateada = temperatura.toFixed(2);\r\n  console.log('Temperatura formateada:', temperaturaFormateada);\r\n\r\n  if (lastAlertValue !== null && Math.abs(temperatura - lastAlertValue) < 1) {\r\n    console.log('Temperatura similar a la anterior, no se enviará alerta.');\r\n    return;\r\n  }\r\n\r\n  if (temperatura < 22 || temperatura > 32) {\r\n    try {\r\n      await enviarEmail('Temperatura fuera de rango', temperatura, setAlertStatus);\r\n\r\n      const notificacionResponse = await axios.post(\r\n        'http://localhost:5000/api/addNotification',\r\n        {\r\n          tipo: 'temperatura',\r\n          descripcion: `Temperatura fuera de rango: ${temperaturaFormateada}°C`,\r\n          time_alert: Marca_tiempo,\r\n        },\r\n        { headers: { 'Content-Type': 'application/json' } }\r\n      );\r\n\r\n      const idNotificacion = notificacionResponse.data.id_notificacion;\r\n      if (idNotificacion) {\r\n        await axios.post(\r\n          'http://localhost:5000/api/addNotificationUser',\r\n          { id_notificacion: idNotificacion, id_user: ID_usuario },\r\n          { headers: { 'Content-Type': 'application/json' } }\r\n        );\r\n        console.log('Relación notificación-usuario guardada con éxito');\r\n      }\r\n\r\n      setLastAlertValue(temperatura);\r\n      setCooldown(true);\r\n      setTimeout(() => setCooldown(false), 10000);\r\n    } catch (error) {\r\n      console.error('Error al gestionar la notificación:', error);\r\n      setAlertStatus(`Error de conexión: ${error.message}`);\r\n    }\r\n  }\r\n};\r\n\r\nconst TemperaturaAlert = ({ temperatura, setTemperatura }) => {\r\n  const [inputValue, setInputValue] = useState(temperatura.toString());\r\n  const [lastAlertValue, setLastAlertValue] = useState(null);\r\n  const [alertStatus, setAlertStatus] = useState('');\r\n  const [cooldown, setCooldown] = useState(false);\r\n\r\n  const token = localStorage.getItem('token');\r\n  const ID_usuario = token ? jwtDecode(token).id : '';\r\n\r\n  const handleInputChange = (e) => setInputValue(e.target.value);\r\n\r\n  const handleUpdateTemperature = () => {\r\n    const newTemperatura = parseFloat(inputValue);\r\n    if (!isNaN(newTemperatura)) {\r\n      setTemperatura(newTemperatura);\r\n      gestionarNotificacion(newTemperatura, ID_usuario, setAlertStatus, setLastAlertValue, setCooldown, lastAlertValue);\r\n    } else {\r\n      setAlertStatus('Por favor ingrese un número válido');\r\n      setTimeout(() => setAlertStatus(''), 3000);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (isNaN(temperatura)) return;\r\n    gestionarNotificacion(temperatura, ID_usuario, setAlertStatus, setLastAlertValue, setCooldown, lastAlertValue);\r\n  }, [temperatura]);\r\n\r\n  useEffect(() => setInputValue(temperatura.toString()), [temperatura]);\r\n\r\n  return (\r\n    <div className=\"PruebasNotificaciones\">\r\n      <h2>Monitoreo De Temperatura</h2>\r\n      <div>\r\n        <label htmlFor=\"temperatura\">Temperatura (°C): </label>\r\n        <input id=\"temperatura\" type=\"number\" value={inputValue} onChange={handleInputChange} step=\"0.1\" />\r\n        <button onClick={handleUpdateTemperature}>Actualizar</button>\r\n      </div>\r\n      <p>Temperatura actual: <span>{temperatura.toFixed(2)}°C</span></p>\r\n      {alertStatus && <p>{alertStatus}</p>}\r\n    </div>\r\n  );\r\n};\r\n\r\nconst PruebasNotificaciones = () => {\r\n  const [temperatura, setTemperatura] = useState(25);\r\n  return <TemperaturaAlert temperatura={temperatura} setTemperatura={setTemperatura} />;\r\n};\r\n\r\nexport default PruebasNotificaciones;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}