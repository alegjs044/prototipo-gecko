{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Roger\\\\Documents\\\\TT2_AVANCES\\\\prototipo-gecko\\\\frontend\\\\src\\\\pages\\\\pruebasNotificaciones.jsx\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport { jwtDecode } from 'jwt-decode';\n\n// Función para enviar el email con la alerta\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst enviarEmail = async (descripcion, temperatura, setAlertStatus) => {\n  setAlertStatus('Enviando alerta...');\n  try {\n    const response = await fetch('http://localhost:5000/send-email', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        descripcion,\n        temperatura: temperatura\n      }) // Se pasa correctamente la temperatura\n    });\n    const result = await response.json();\n    if (response.ok) {\n      console.log('Alerta enviada con éxito:', result.message);\n      setAlertStatus('Alerta enviada con éxito');\n    } else {\n      console.error('Error en la respuesta del servidor:', result.message);\n      setAlertStatus(`Error: ${result.message}`);\n    }\n  } catch (error) {\n    console.error('Error al enviar la alerta:', error);\n    setAlertStatus(`Error de conexión: ${error.message}`);\n  }\n};\n\n// Función para gestionar las alertas\nconst gestionarNotificacion = async (temperatura, ID_usuario, setAlertStatus, setLastAlertValue, setCooldown) => {\n  const temperaturaFormateada = temperatura.toFixed(2);\n  console.log('Temperatura formateada:', temperaturaFormateada);\n\n  // Enviar alerta por email\n  await enviarEmail('Temperatura fuera de rango', temperatura, setAlertStatus);\n  try {\n    // Insertar notificación en la base de datos\n    const notificacionResponse = await axios.post('http://localhost:5000/api/addNotification', {\n      tipo: 'temperatura',\n      descripcion: `Temperatura fuera de rango: ${temperaturaFormateada}°C`,\n      time_alert: new Date().toISOString().slice(0, 19).replace('T', ' ')\n    }, {\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    });\n    const idNotificacion = notificacionResponse.data.id_notificacion;\n    if (idNotificacion) {\n      // Insertar la relación usuario-notificación\n      await axios.post('http://localhost:5000/api/addNotificationUser', {\n        id_notificacion: idNotificacion,\n        id_user: ID_usuario\n      }, {\n        headers: {\n          'Content-Type': 'application/json'\n        }\n      });\n      console.log('Relación notificación-usuario guardada con éxito');\n    }\n\n    // Controlar el cooldown de las alertas\n    setLastAlertValue(temperatura);\n    setCooldown(true);\n    setTimeout(() => setCooldown(false), 10000); // Cooldown de 10 segundos\n  } catch (error) {\n    console.error('Error al gestionar la notificación:', error);\n    setAlertStatus(`Error de conexión: ${error.message}`);\n  }\n};\nconst TemperaturaAlert = ({\n  temperatura,\n  setTemperatura\n}) => {\n  _s();\n  const [inputValue, setInputValue] = useState(temperatura.toString());\n  const [lastAlertValue, setLastAlertValue] = useState(null);\n  const [alertStatus, setAlertStatus] = useState('');\n  const [cooldown, setCooldown] = useState(false);\n  const token = localStorage.getItem('token');\n  const ID_usuario = token ? jwtDecode(token).id : '';\n  const handleInputChange = e => setInputValue(e.target.value);\n  const handleUpdateTemperature = () => {\n    const newTemperatura = parseFloat(inputValue);\n    if (!isNaN(newTemperatura)) {\n      setTemperatura(newTemperatura);\n      gestionarNotificacion(newTemperatura, ID_usuario, setAlertStatus, setLastAlertValue, setCooldown);\n    } else {\n      setAlertStatus('Por favor ingrese un número válido');\n      setTimeout(() => setAlertStatus(''), 3000);\n    }\n  };\n  useEffect(() => {\n    if (isNaN(temperatura)) return;\n\n    // Verificar si la temperatura está fuera del rango\n    const fueraDeRango = temperatura < 22 || temperatura > 32;\n    if (fueraDeRango) {\n      // Verificamos si debemos enviar una nueva alerta\n      const debeEnviarAlerta =\n      // No hay una alerta previa\n      lastAlertValue === null ||\n      // La temperatura ha cambiado significativamente (más de 1 grado)\n      Math.abs(temperatura - lastAlertValue) >= 1 ||\n      // La temperatura cruzó el umbral (de caliente a frío o viceversa)\n      lastAlertValue > 32 && temperatura < 22 || lastAlertValue < 22 && temperatura > 32;\n\n      // Solo enviamos si debemos y no estamos en cooldown\n      if (debeEnviarAlerta && !cooldown) {\n        console.log('Enviando alerta por temperatura:', temperatura);\n        gestionarNotificacion(temperatura, ID_usuario, setAlertStatus, setLastAlertValue, setCooldown);\n      }\n    } else {\n      // Si volvió al rango normal, reiniciamos para que la próxima vez envíe alerta\n      if (lastAlertValue !== null) {\n        setLastAlertValue(null);\n        setAlertStatus('Temperatura normalizada');\n        setTimeout(() => setAlertStatus(''), 3000); // Limpiar el estado de alerta después de 3 segundos\n      }\n    }\n  }, [temperatura, lastAlertValue, cooldown, ID_usuario]);\n  useEffect(() => setInputValue(temperatura.toString()), [temperatura]);\n  const getTemperatureStyle = () => {\n    if (temperatura > 32) return {\n      color: 'red',\n      fontWeight: 'bold'\n    };\n    if (temperatura < 22) return {\n      color: 'blue',\n      fontWeight: 'bold'\n    };\n    return {\n      color: 'green'\n    };\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"PruebasNotificaciones\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Monitoreo De Temperatura\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 135,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        display: 'flex',\n        alignItems: 'center',\n        gap: '10px',\n        marginBottom: '15px'\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"temperatura\",\n        children: \"Temperatura (\\xB0C): \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 137,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        id: \"temperatura\",\n        type: \"number\",\n        value: inputValue,\n        onChange: handleInputChange,\n        step: \"0.1\",\n        style: {\n          width: '80px'\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 138,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleUpdateTemperature,\n        style: {\n          padding: '5px 15px',\n          backgroundColor: '#4CAF50',\n          color: 'white',\n          border: 'none',\n          borderRadius: '4px',\n          cursor: 'pointer'\n        },\n        children: \"Actualizar\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 146,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 136,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Temperatura actual: \", /*#__PURE__*/_jsxDEV(\"span\", {\n        style: getTemperatureStyle(),\n        children: [temperatura.toFixed(2), \"\\xB0C\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 150,\n        columnNumber: 30\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 150,\n      columnNumber: 7\n    }, this), temperatura < 22 && /*#__PURE__*/_jsxDEV(\"p\", {\n      style: {\n        color: 'blue'\n      },\n      children: \"\\u26A0\\uFE0F Temperatura por debajo del rango normal (22\\xB0C - 32\\xB0C)\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 151,\n      columnNumber: 28\n    }, this), temperatura > 32 && /*#__PURE__*/_jsxDEV(\"p\", {\n      style: {\n        color: 'red'\n      },\n      children: \"\\u26A0\\uFE0F Temperatura por encima del rango normal (22\\xB0C - 32\\xB0C)\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 152,\n      columnNumber: 28\n    }, this), cooldown && /*#__PURE__*/_jsxDEV(\"p\", {\n      style: {\n        color: 'gray'\n      },\n      children: \"\\u23F1\\uFE0F Esperando para enviar la siguiente alerta...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 153,\n      columnNumber: 20\n    }, this), alertStatus && /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"alert-status\",\n      children: alertStatus\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 154,\n      columnNumber: 23\n    }, this), lastAlertValue !== null && /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        marginTop: '10px',\n        fontSize: '0.9em',\n        color: '#555'\n      },\n      children: [\"\\xDAltima alerta enviada: \", lastAlertValue.toFixed(2), \"\\xB0C\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 156,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 134,\n    columnNumber: 5\n  }, this);\n};\n_s(TemperaturaAlert, \"I/uslIiysgS1kJ7pMV9ImoXmBao=\");\n_c = TemperaturaAlert;\nconst PruebasNotificaciones = () => {\n  _s2();\n  const [temperatura, setTemperatura] = useState(25); // Valor inicial dentro del rango normal\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(TemperaturaAlert, {\n      temperatura: temperatura,\n      setTemperatura: setTemperatura\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 168,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 167,\n    columnNumber: 5\n  }, this);\n};\n_s2(PruebasNotificaciones, \"BSLE6W81eo5m/C7rYFlDzZ5wRTU=\");\n_c2 = PruebasNotificaciones;\nexport default PruebasNotificaciones;\nvar _c, _c2;\n$RefreshReg$(_c, \"TemperaturaAlert\");\n$RefreshReg$(_c2, \"PruebasNotificaciones\");","map":{"version":3,"names":["useState","useEffect","axios","jwtDecode","jsxDEV","_jsxDEV","enviarEmail","descripcion","temperatura","setAlertStatus","response","fetch","method","headers","body","JSON","stringify","result","json","ok","console","log","message","error","gestionarNotificacion","ID_usuario","setLastAlertValue","setCooldown","temperaturaFormateada","toFixed","notificacionResponse","post","tipo","time_alert","Date","toISOString","slice","replace","idNotificacion","data","id_notificacion","id_user","setTimeout","TemperaturaAlert","setTemperatura","_s","inputValue","setInputValue","toString","lastAlertValue","alertStatus","cooldown","token","localStorage","getItem","id","handleInputChange","e","target","value","handleUpdateTemperature","newTemperatura","parseFloat","isNaN","fueraDeRango","debeEnviarAlerta","Math","abs","getTemperatureStyle","color","fontWeight","className","children","fileName","_jsxFileName","lineNumber","columnNumber","style","display","alignItems","gap","marginBottom","htmlFor","type","onChange","step","width","onClick","padding","backgroundColor","border","borderRadius","cursor","marginTop","fontSize","_c","PruebasNotificaciones","_s2","_c2","$RefreshReg$"],"sources":["C:/Users/Roger/Documents/TT2_AVANCES/prototipo-gecko/frontend/src/pages/pruebasNotificaciones.jsx"],"sourcesContent":["import { useState, useEffect } from 'react';\r\nimport axios from 'axios';\r\nimport { jwtDecode } from 'jwt-decode';\r\n\r\n// Función para enviar el email con la alerta\r\nconst enviarEmail = async (descripcion, temperatura, setAlertStatus) => {\r\n  setAlertStatus('Enviando alerta...');\r\n  try {\r\n    const response = await fetch('http://localhost:5000/send-email', {\r\n      method: 'POST',\r\n      headers: { 'Content-Type': 'application/json' },\r\n      body: JSON.stringify({ descripcion, temperatura: temperatura }), // Se pasa correctamente la temperatura\r\n    });\r\n\r\n    const result = await response.json();\r\n    if (response.ok) {\r\n      console.log('Alerta enviada con éxito:', result.message);\r\n      setAlertStatus('Alerta enviada con éxito');\r\n    } else {\r\n      console.error('Error en la respuesta del servidor:', result.message);\r\n      setAlertStatus(`Error: ${result.message}`);\r\n    }\r\n  } catch (error) {\r\n    console.error('Error al enviar la alerta:', error);\r\n    setAlertStatus(`Error de conexión: ${error.message}`);\r\n  }\r\n};\r\n\r\n// Función para gestionar las alertas\r\nconst gestionarNotificacion = async (temperatura, ID_usuario, setAlertStatus, setLastAlertValue, setCooldown) => {\r\n  const temperaturaFormateada = temperatura.toFixed(2);\r\n  console.log('Temperatura formateada:', temperaturaFormateada);\r\n\r\n  // Enviar alerta por email\r\n  await enviarEmail('Temperatura fuera de rango', temperatura, setAlertStatus);\r\n\r\n  try {\r\n    // Insertar notificación en la base de datos\r\n    const notificacionResponse = await axios.post(\r\n      'http://localhost:5000/api/addNotification',\r\n      {\r\n        tipo: 'temperatura',\r\n        descripcion: `Temperatura fuera de rango: ${temperaturaFormateada}°C`,\r\n        time_alert: new Date().toISOString().slice(0, 19).replace('T', ' '),\r\n      },\r\n      { headers: { 'Content-Type': 'application/json' } }\r\n    );\r\n\r\n    const idNotificacion = notificacionResponse.data.id_notificacion;\r\n    if (idNotificacion) {\r\n      // Insertar la relación usuario-notificación\r\n      await axios.post(\r\n        'http://localhost:5000/api/addNotificationUser',\r\n        { id_notificacion: idNotificacion, id_user: ID_usuario },\r\n        { headers: { 'Content-Type': 'application/json' } }\r\n      );\r\n\r\n      console.log('Relación notificación-usuario guardada con éxito');\r\n    }\r\n\r\n    // Controlar el cooldown de las alertas\r\n    setLastAlertValue(temperatura);\r\n    setCooldown(true);\r\n    setTimeout(() => setCooldown(false), 10000); // Cooldown de 10 segundos\r\n  } catch (error) {\r\n    console.error('Error al gestionar la notificación:', error);\r\n    setAlertStatus(`Error de conexión: ${error.message}`);\r\n  }\r\n};\r\n\r\nconst TemperaturaAlert = ({ temperatura, setTemperatura }) => {\r\n  const [inputValue, setInputValue] = useState(temperatura.toString());\r\n  const [lastAlertValue, setLastAlertValue] = useState(null);\r\n  const [alertStatus, setAlertStatus] = useState('');\r\n  const [cooldown, setCooldown] = useState(false);\r\n  \r\n  const token = localStorage.getItem('token');\r\n  const ID_usuario = token ? jwtDecode(token).id : '';\r\n\r\n  const handleInputChange = (e) => setInputValue(e.target.value);\r\n\r\n  const handleUpdateTemperature = () => {\r\n    const newTemperatura = parseFloat(inputValue);\r\n    if (!isNaN(newTemperatura)) {\r\n      setTemperatura(newTemperatura);\r\n      gestionarNotificacion(newTemperatura, ID_usuario, setAlertStatus, setLastAlertValue, setCooldown);\r\n    } else {\r\n      setAlertStatus('Por favor ingrese un número válido');\r\n      setTimeout(() => setAlertStatus(''), 3000);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (isNaN(temperatura)) return;\r\n\r\n    // Verificar si la temperatura está fuera del rango\r\n    const fueraDeRango = temperatura < 22 || temperatura > 32;\r\n\r\n    if (fueraDeRango) {\r\n      // Verificamos si debemos enviar una nueva alerta\r\n      const debeEnviarAlerta =\r\n        // No hay una alerta previa\r\n        lastAlertValue === null || \r\n        // La temperatura ha cambiado significativamente (más de 1 grado)\r\n        Math.abs(temperatura - lastAlertValue) >= 1 || \r\n        // La temperatura cruzó el umbral (de caliente a frío o viceversa)\r\n        (lastAlertValue > 32 && temperatura < 22) || \r\n        (lastAlertValue < 22 && temperatura > 32);\r\n\r\n      // Solo enviamos si debemos y no estamos en cooldown\r\n      if (debeEnviarAlerta && !cooldown) {\r\n        console.log('Enviando alerta por temperatura:', temperatura);\r\n        gestionarNotificacion(temperatura, ID_usuario, setAlertStatus, setLastAlertValue, setCooldown);\r\n      }\r\n    } else {\r\n      // Si volvió al rango normal, reiniciamos para que la próxima vez envíe alerta\r\n      if (lastAlertValue !== null) {\r\n        setLastAlertValue(null);\r\n        setAlertStatus('Temperatura normalizada');\r\n        setTimeout(() => setAlertStatus(''), 3000); // Limpiar el estado de alerta después de 3 segundos\r\n      }\r\n    }\r\n  }, [temperatura, lastAlertValue, cooldown, ID_usuario]);\r\n\r\n  useEffect(() => setInputValue(temperatura.toString()), [temperatura]);\r\n\r\n  const getTemperatureStyle = () => {\r\n    if (temperatura > 32) return { color: 'red', fontWeight: 'bold' };\r\n    if (temperatura < 22) return { color: 'blue', fontWeight: 'bold' };\r\n    return { color: 'green' };\r\n  };\r\n\r\n  return (\r\n    <div className=\"PruebasNotificaciones\">\r\n      <h2>Monitoreo De Temperatura</h2>\r\n      <div style={{ display: 'flex', alignItems: 'center', gap: '10px', marginBottom: '15px' }}>\r\n        <label htmlFor=\"temperatura\">Temperatura (°C): </label>\r\n        <input\r\n          id=\"temperatura\"\r\n          type=\"number\"\r\n          value={inputValue}\r\n          onChange={handleInputChange}\r\n          step=\"0.1\"\r\n          style={{ width: '80px' }}\r\n        />\r\n        <button onClick={handleUpdateTemperature} style={{ padding: '5px 15px', backgroundColor: '#4CAF50', color: 'white', border: 'none', borderRadius: '4px', cursor: 'pointer' }}>\r\n          Actualizar\r\n        </button>\r\n      </div>\r\n      <p>Temperatura actual: <span style={getTemperatureStyle()}>{temperatura.toFixed(2)}°C</span></p>\r\n      {temperatura < 22 && <p style={{ color: 'blue' }}>⚠️ Temperatura por debajo del rango normal (22°C - 32°C)</p>}\r\n      {temperatura > 32 && <p style={{ color: 'red' }}>⚠️ Temperatura por encima del rango normal (22°C - 32°C)</p>}\r\n      {cooldown && <p style={{ color: 'gray' }}>⏱️ Esperando para enviar la siguiente alerta...</p>}\r\n      {alertStatus && <p className=\"alert-status\">{alertStatus}</p>}\r\n      {lastAlertValue !== null && (\r\n        <div style={{ marginTop: '10px', fontSize: '0.9em', color: '#555' }}>\r\n          Última alerta enviada: {lastAlertValue.toFixed(2)}°C\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nconst PruebasNotificaciones = () => {\r\n  const [temperatura, setTemperatura] = useState(25); // Valor inicial dentro del rango normal\r\n  return (\r\n    <div>\r\n      <TemperaturaAlert temperatura={temperatura} setTemperatura={setTemperatura} />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default PruebasNotificaciones;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}