{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Roger\\\\Documents\\\\TT2_AVANCES\\\\prototipo-gecko\\\\frontend\\\\src\\\\pages\\\\pruebasNotificaciones.jsx\",\n  _s2 = $RefreshSig$(),\n  _s3 = $RefreshSig$();\nimport { useState, useEffect } from 'react';\n// Importamos axios para hacer peticiones HTTP a nuestra API\nimport axios from \"axios\";\nimport { jwtDecode } from \"jwt-decode\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst TemperaturaAlert = ({\n  temperatura,\n  setTemperatura\n}) => {\n  _s2();\n  var _s = $RefreshSig$();\n  // Estado para el valor del input separado del valor actual de temperatura\n  const [inputValue, setInputValue] = useState(temperatura.toString());\n  const [lastAlertValue, setLastAlertValue] = useState(null);\n  const [alertStatus, setAlertStatus] = useState('');\n  const [cooldown, setCooldown] = useState(false);\n  const token = localStorage.getItem(\"token\");\n  let ID_usuario = '';\n  if (token) {\n    const decoded = jwtDecode(token); // Necesitas la librería jwt-decode\n    ID_usuario = decoded.id;\n  }\n  const enviar_temperatura_alert = async (temp, ID_usuario) => {\n    setAlertStatus('Enviando alerta...');\n    try {\n      const temperaturaFormateada = temp.toFixed(2);\n      console.log(\"Enviando temperatura formateada:\", temperaturaFormateada);\n\n      // Enviar correo electrónico\n      const response = await fetch(\"http://localhost:5000/send-email\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n          temperatura: parseFloat(temperaturaFormateada)\n        })\n      });\n      const data = await response.json();\n      if (response.ok) {\n        console.log(\"Alerta enviada con éxito:\", data.message);\n        setAlertStatus('Alerta enviada con éxito');\n\n        // Insertar notificación en la base de datos\n        const notificacionResponse = await axios.post(\"http://localhost:5000/api/addNotification\", {\n          tipo: 'temperatura',\n          descripcion: `Temperatura fuera de rango: ${temperaturaFormateada}°C`,\n          time_alert: new Date().toISOString().slice(0, 19).replace('T', ' ')\n        }, {\n          headers: {\n            \"Content-Type\": \"application/json\"\n          }\n        });\n        const idNotificacion = notificacionResponse.data.id_notificacion;\n        if (idNotificacion) {\n          // Insertar la relación usuario-notificación\n          await axios.post(\"http://localhost:5000/api/addNotificationUser\", {\n            id_notificacion: idNotificacion,\n            id_user: ID_usuario\n          }, {\n            headers: {\n              \"Content-Type\": \"application/json\"\n            }\n          });\n          console.log(\"Relación notificación-usuario guardada con éxito\");\n        }\n\n        // Evita spam de alertas\n        setLastAlertValue(temp);\n        setCooldown(true);\n        setTimeout(() => {\n          setCooldown(false);\n        }, 10000);\n      } else {\n        console.error(\"Error en la respuesta del servidor:\", data.message);\n        setAlertStatus(`Error: ${data.message}`);\n      }\n    } catch (error) {\n      console.error(\"Error al enviar la alerta:\", error);\n      setAlertStatus(`Error de conexión: ${error.message}`);\n    }\n  };\n\n  // Este manejador solo actualiza el input, no el valor de temperatura real\n  const handleInputChange = e => {\n    setInputValue(e.target.value);\n  };\n\n  // Función para actualizar la temperatura cuando se presiona el botón\n  const handleUpdateTemperature = () => {\n    const newTemperatura = parseFloat(inputValue);\n\n    // Verificar que es un número válido\n    if (!isNaN(newTemperatura)) {\n      setTemperatura(newTemperatura);\n      enviarTemperatura(ID_usuario, newTemperatura, 'FRIA', new Date().toISOString().slice(0, 19).replace('T', ' '));\n    } else {\n      setAlertStatus('Por favor ingrese un número válido');\n      setTimeout(() => setAlertStatus(''), 3000);\n    }\n  };\n  const HumedadAlert = ({\n    humedad,\n    setHumedad\n  }) => {\n    _s();\n    // Estado para el valor del input separado del valor actual de humedad\n    const [inputValue, setInputValue] = useState(humedad.toString());\n    const [lastAlertValue, setLastAlertValue] = useState(null);\n    const [alertStatus, setAlertStatus] = useState('');\n    const [cooldown, setCooldown] = useState(false);\n    const token = localStorage.getItem(\"token\");\n    let ID_usuario = '';\n    if (token) {\n      const decoded = jwtDecode(token);\n      ID_usuario = decoded.id;\n    }\n    const enviar_humedad_alert = async (hum, ID_usuario) => {\n      setAlertStatus('Enviando alerta...');\n      try {\n        const humedadFormateada = hum.toFixed(2);\n        console.log(\"Enviando humedad formateada:\", humedadFormateada);\n\n        // Enviar correo electrónico\n        const response = await fetch(\"http://localhost:5000/send-email\", {\n          method: \"POST\",\n          headers: {\n            \"Content-Type\": \"application/json\"\n          },\n          body: JSON.stringify({\n            humedad: parseFloat(humedadFormateada)\n          })\n        });\n        const data = await response.json();\n        if (response.ok) {\n          console.log(\"Alerta enviada con éxito:\", data.message);\n          setAlertStatus('Alerta enviada con éxito');\n\n          // Insertar notificación en la base de datos\n          const notificacionResponse = await axios.post(\"http://localhost:5000/api/addNotification\", {\n            tipo: 'humedad',\n            descripcion: `Humedad fuera de rango: ${humedadFormateada}%`,\n            time_alert: new Date().toISOString().slice(0, 19).replace('T', ' ')\n          }, {\n            headers: {\n              \"Content-Type\": \"application/json\"\n            }\n          });\n          const idNotificacion = notificacionResponse.data.id_notificacion;\n          if (idNotificacion) {\n            // Insertar la relación usuario-notificación\n            await axios.post(\"http://localhost:5000/api/addNotificationUser\", {\n              id_notificacion: idNotificacion,\n              id_user: ID_usuario\n            }, {\n              headers: {\n                \"Content-Type\": \"application/json\"\n              }\n            });\n            console.log(\"Relación notificación-usuario guardada con éxito\");\n          }\n\n          // Evita spam de alertas\n          setLastAlertValue(hum);\n          setCooldown(true);\n          setTimeout(() => {\n            setCooldown(false);\n          }, 10000);\n        } else {\n          console.error(\"Error en la respuesta del servidor:\", data.message);\n          setAlertStatus(`Error: ${data.message}`);\n        }\n      } catch (error) {\n        console.error(\"Error al enviar la alerta:\", error);\n        setAlertStatus(`Error de conexión: ${error.message}`);\n      }\n    };\n\n    // Este manejador solo actualiza el input, no el valor de humedad real\n    const handleInputChange = e => {\n      setInputValue(e.target.value);\n    };\n\n    // Función para actualizar la humedad cuando se presiona el botón\n    const handleUpdateHumedad = () => {\n      const newHumedad = parseFloat(inputValue);\n\n      // Verificar que es un número válido\n      if (!isNaN(newHumedad)) {\n        setHumedad(newHumedad);\n        enviarHumedad(ID_usuario, newHumedad, 'AMBIENTE', new Date().toISOString().slice(0, 19).replace('T', ' '));\n      } else {\n        setAlertStatus('Por favor ingrese un número válido');\n        setTimeout(() => setAlertStatus(''), 3000);\n      }\n    };\n    const enviarHumedad = async (ID_usuario, humedad, Zona, Marca_tiempo) => {\n      try {\n        // Verificar que todos los datos requeridos estén presentes\n        if (!ID_usuario || !humedad || !Zona || !Marca_tiempo) {\n          console.error('Datos incompletos:', {\n            ID_usuario,\n            humedad,\n            Zona,\n            Marca_tiempo\n          });\n          throw new Error('Todos los campos son obligatorios');\n        }\n        console.log('Intentando enviar datos al servidor:', {\n          ID_usuario,\n          Medicion: humedad,\n          Zona,\n          Marca_tiempo\n        });\n\n        // Establecer un timeout para la solicitud\n        const response = await axios.post('http://localhost:5000/api/addhumedad', {\n          ID_usuario: ID_usuario,\n          Medicion: humedad,\n          Zona: Zona,\n          Marca_tiempo: Marca_tiempo\n        }, {\n          headers: {\n            \"Content-Type\": \"application/json\"\n          },\n          timeout: 10000 // 10 segundos de timeout\n        });\n        console.log('Respuesta exitosa del servidor:', response.data);\n        return response.data;\n      } catch (error) {\n        // Manejo detallado de errores\n        if (error.response) {\n          // El servidor respondió con un error\n          console.error(`Error del servidor (${error.response.status}):`, error.response.data);\n          alert(`Error del servidor: ${error.response.status} - ${error.response.data.error || 'Error desconocido'}`);\n        } else if (error.request) {\n          // No se recibió respuesta\n          console.error('No se recibió respuesta del servidor. Verifique que el servidor esté en ejecución.');\n          alert('No fue posible conectar con el servidor. Verifique su conexión e intente nuevamente.');\n        } else {\n          // Error en la configuración de la solicitud\n          console.error('Error al configurar la solicitud:', error.message);\n          alert(`Error: ${error.message}`);\n        }\n\n        // Intento de reconexión automática (opcional)\n        return false; // Indica que hubo un error\n      }\n    };\n    useEffect(() => {\n      // Solo enviar alerta si la humedad es válida (no NaN)\n      if (isNaN(humedad)) return;\n\n      // Verificamos si está fuera del rango permitido\n      const fueraDeRango = humedad < 30 || humedad > 50;\n      if (fueraDeRango) {\n        // Verificamos si debemos enviar una nueva alerta\n        const debeEnviarAlerta =\n        // No hay una alerta previa\n        lastAlertValue === null ||\n        // La humedad ha cambiado significativamente (más de 5%)\n        Math.abs(humedad - lastAlertValue) >= 5 ||\n        // La humedad cruzó el umbral (de alta a baja o viceversa)\n        lastAlertValue > 50 && humedad < 30 || lastAlertValue < 30 && humedad > 50;\n\n        // Solo enviamos si debemos y no estamos en cooldown\n        if (debeEnviarAlerta && !cooldown) {\n          console.log(\"Enviando alerta por humedad:\", humedad);\n          enviar_humedad_alert(humedad, ID_usuario);\n        }\n      } else {\n        // Si volvió al rango normal, reiniciamos para que la próxima vez envíe alerta\n        if (lastAlertValue !== null) {\n          setLastAlertValue(null);\n          setAlertStatus('Humedad normalizada');\n\n          // Después de 3 segundos, limpiamos el mensaje\n          setTimeout(() => {\n            if (humedad >= 30 && humedad <= 50) {\n              setAlertStatus('');\n            }\n          }, 3000);\n        }\n      }\n    }, [humedad, lastAlertValue, cooldown, ID_usuario]);\n\n    // Actualizar el input cuando cambia la humedad externa\n    useEffect(() => {\n      setInputValue(humedad.toString());\n    }, [humedad]);\n\n    // Determinar el estilo basado en el rango de humedad\n    const getHumedadStyle = () => {\n      if (humedad > 50) return {\n        color: '#8B008B',\n        fontWeight: 'bold'\n      }; // Púrpura para humedad alta\n      if (humedad < 30) return {\n        color: '#FF8C00',\n        fontWeight: 'bold'\n      }; // Naranja para humedad baja\n      return {\n        color: 'green'\n      };\n    };\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"PruebasNotificaciones\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Monitoreo De Humedad\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 292,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          display: 'flex',\n          alignItems: 'center',\n          gap: '10px',\n          marginBottom: '15px'\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"humedad\",\n          children: \"Humedad (%): \"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 295,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          id: \"humedad\",\n          type: \"number\",\n          value: inputValue,\n          onChange: handleInputChange,\n          step: \"0.1\",\n          style: {\n            width: '80px'\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 296,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: handleUpdateHumedad,\n          style: {\n            padding: '5px 15px',\n            backgroundColor: '#4682B4',\n            // Azul acero para distinguirlo del botón de temperatura\n            color: 'white',\n            border: 'none',\n            borderRadius: '4px',\n            cursor: 'pointer'\n          },\n          children: \"Actualizar\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 304,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 294,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Humedad actual: \", /*#__PURE__*/_jsxDEV(\"span\", {\n          style: getHumedadStyle(),\n          children: [humedad.toFixed(2), \"%\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 319,\n          columnNumber: 28\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 319,\n        columnNumber: 9\n      }, this), humedad < 30 && /*#__PURE__*/_jsxDEV(\"p\", {\n        style: {\n          color: '#FF8C00'\n        },\n        children: \"\\u26A0\\uFE0F Humedad por debajo del rango normal (30% - 50%)\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 322,\n        columnNumber: 11\n      }, this), humedad > 50 && /*#__PURE__*/_jsxDEV(\"p\", {\n        style: {\n          color: '#8B008B'\n        },\n        children: \"\\u26A0\\uFE0F Humedad por encima del rango normal (30% - 50%)\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 327,\n        columnNumber: 11\n      }, this), cooldown && /*#__PURE__*/_jsxDEV(\"p\", {\n        style: {\n          color: 'gray'\n        },\n        children: \"\\u23F1\\uFE0F Esperando para enviar la siguiente alerta...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 333,\n        columnNumber: 11\n      }, this), alertStatus && /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"alert-status\",\n        children: alertStatus\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 338,\n        columnNumber: 25\n      }, this), lastAlertValue !== null && /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          marginTop: '10px',\n          fontSize: '0.9em',\n          color: '#555'\n        },\n        children: [\"\\xDAltima alerta enviada: \", lastAlertValue.toFixed(2), \"%\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 341,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 291,\n      columnNumber: 7\n    }, this);\n  };\n  _s(HumedadAlert, \"wDQ5CEd9/U5+Wfn3LR2TQyFeS7k=\");\n  const enviarTemperatura = async (ID_usuario, temperatura, Zona, Marca_tiempo) => {\n    try {\n      // Verificar que todos los datos requeridos estén presentes\n      if (!ID_usuario || !temperatura || !Zona || !Marca_tiempo) {\n        console.error('Datos incompletos:', {\n          ID_usuario,\n          temperatura,\n          Zona,\n          Marca_tiempo\n        });\n        throw new Error('Todos los campos son obligatorios');\n      }\n      console.log('Intentando enviar datos al servidor:', {\n        ID_usuario,\n        Medicion: temperatura,\n        Zona,\n        Marca_tiempo\n      });\n\n      // Establecer un timeout para la solicitud\n      const response = await axios.post('http://localhost:5000/api/addtemperatura', {\n        ID_usuario: ID_usuario,\n        Medicion: temperatura,\n        Zona: Zona,\n        Marca_tiempo: Marca_tiempo\n      }, {\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        timeout: 10000 // 10 segundos de timeout\n      });\n      console.log('Respuesta exitosa del servidor:', response.data);\n      return response.data;\n    } catch (error) {\n      // Manejo detallado de errores\n      if (error.response) {\n        // El servidor respondió con un error\n        console.error(`Error del servidor (${error.response.status}):`, error.response.data);\n        alert(`Error del servidor: ${error.response.status} - ${error.response.data.error || 'Error desconocido'}`);\n      } else if (error.request) {\n        // No se recibió respuesta\n        console.error('No se recibió respuesta del servidor. Verifique que el servidor esté en ejecución.');\n        alert('No fue posible conectar con el servidor. Verifique su conexión e intente nuevamente.');\n      } else {\n        // Error en la configuración de la solicitud\n        console.error('Error al configurar la solicitud:', error.message);\n        alert(`Error: ${error.message}`);\n      }\n\n      // Intento de reconexión automática (opcional)\n      return false; // Indica que hubo un error\n    }\n  };\n  useEffect(() => {\n    // Solo enviar alerta si la temperatura es válida (no NaN)\n    if (isNaN(temperatura)) return;\n\n    // Verificamos si está fuera del rango permitido\n    const fueraDeRango = temperatura < 22 || temperatura > 32;\n    if (fueraDeRango) {\n      // Verificamos si debemos enviar una nueva alerta\n      const debeEnviarAlerta =\n      // No hay una alerta previa\n      lastAlertValue === null ||\n      // La temperatura ha cambiado significativamente (más de 1 grado)\n      Math.abs(temperatura - lastAlertValue) >= 1 ||\n      // La temperatura cruzó el umbral (de caliente a frío o viceversa)\n      lastAlertValue > 32 && temperatura < 22 || lastAlertValue < 22 && temperatura > 32;\n\n      // Solo enviamos si debemos y no estamos en cooldown\n      if (debeEnviarAlerta && !cooldown) {\n        console.log(\"Enviando alerta por temperatura:\", temperatura);\n        enviar_temperatura_alert(temperatura, ID_usuario);\n      }\n    } else {\n      // Si volvió al rango normal, reiniciamos para que la próxima vez envíe alerta\n      if (lastAlertValue !== null) {\n        setLastAlertValue(null);\n        setAlertStatus('Temperatura normalizada');\n\n        // Después de 3 segundos, limpiamos el mensaje\n        setTimeout(() => {\n          if (temperatura >= 22 && temperatura <= 32) {\n            setAlertStatus('');\n          }\n        }, 3000);\n      }\n    }\n  }, [temperatura, lastAlertValue, cooldown, ID_usuario]);\n\n  // Actualizar el input cuando cambia la temperatura externa\n  useEffect(() => {\n    setInputValue(temperatura.toString());\n  }, [temperatura]);\n\n  // Determinar el estilo basado en el rango de temperatura\n  const getTemperatureStyle = () => {\n    if (temperatura > 32) return {\n      color: 'red',\n      fontWeight: 'bold'\n    };\n    if (temperatura < 22) return {\n      color: 'blue',\n      fontWeight: 'bold'\n    };\n    return {\n      color: 'green'\n    };\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"PruebasNotificaciones\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Monitoreo De Temperatura\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 455,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        display: 'flex',\n        alignItems: 'center',\n        gap: '10px',\n        marginBottom: '15px'\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"temperatura\",\n        children: \"Temperatura (\\xB0C): \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 458,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        id: \"temperatura\",\n        type: \"number\",\n        value: inputValue,\n        onChange: handleInputChange,\n        step: \"0.1\",\n        style: {\n          width: '80px'\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 459,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleUpdateTemperature,\n        style: {\n          padding: '5px 15px',\n          backgroundColor: '#4CAF50',\n          color: 'white',\n          border: 'none',\n          borderRadius: '4px',\n          cursor: 'pointer'\n        },\n        children: \"Actualizar\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 467,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 457,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Temperatura actual: \", /*#__PURE__*/_jsxDEV(\"span\", {\n        style: getTemperatureStyle(),\n        children: [temperatura.toFixed(2), \"\\xB0C\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 482,\n        columnNumber: 30\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 482,\n      columnNumber: 7\n    }, this), temperatura < 22 && /*#__PURE__*/_jsxDEV(\"p\", {\n      style: {\n        color: 'blue'\n      },\n      children: \"\\u26A0\\uFE0F Temperatura por debajo del rango normal (22\\xB0C - 32\\xB0C)\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 485,\n      columnNumber: 9\n    }, this), temperatura > 32 && /*#__PURE__*/_jsxDEV(\"p\", {\n      style: {\n        color: 'red'\n      },\n      children: \"\\u26A0\\uFE0F Temperatura por encima del rango normal (22\\xB0C - 32\\xB0C)\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 490,\n      columnNumber: 9\n    }, this), cooldown && /*#__PURE__*/_jsxDEV(\"p\", {\n      style: {\n        color: 'gray'\n      },\n      children: \"\\u23F1\\uFE0F Esperando para enviar la siguiente alerta...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 496,\n      columnNumber: 9\n    }, this), alertStatus && /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"alert-status\",\n      children: alertStatus\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 501,\n      columnNumber: 23\n    }, this), lastAlertValue !== null && /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        marginTop: '10px',\n        fontSize: '0.9em',\n        color: '#555'\n      },\n      children: [\"\\xDAltima alerta enviada: \", lastAlertValue.toFixed(2), \"\\xB0C\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 504,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 454,\n    columnNumber: 5\n  }, this);\n};\n_s2(TemperaturaAlert, \"I/uslIiysgS1kJ7pMV9ImoXmBao=\");\n_c = TemperaturaAlert;\nfunction PruebasNotificaciones() {\n  _s3();\n  const [temperatura, setTemperatura] = useState(25); // Valor inicial dentro del rango normal\n  const [humedad, setHumedad] = useState(40); // Valor inicial dentro del rango normal de humedad\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(TemperaturaAlert, {\n      temperatura: temperatura,\n      setTemperatura: setTemperatura\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 518,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(HumedadAlert, {\n      humedad: humedad,\n      setHumedad: setHumedad\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 519,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 517,\n    columnNumber: 5\n  }, this);\n}\n_s3(PruebasNotificaciones, \"nFfk9TMAPB0lUdEctBHXkq2LoW0=\");\n_c2 = PruebasNotificaciones;\nexport default PruebasNotificaciones;\nvar _c, _c2;\n$RefreshReg$(_c, \"TemperaturaAlert\");\n$RefreshReg$(_c2, \"PruebasNotificaciones\");","map":{"version":3,"names":["useState","useEffect","axios","jwtDecode","jsxDEV","_jsxDEV","TemperaturaAlert","temperatura","setTemperatura","_s2","_s","$RefreshSig$","inputValue","setInputValue","toString","lastAlertValue","setLastAlertValue","alertStatus","setAlertStatus","cooldown","setCooldown","token","localStorage","getItem","ID_usuario","decoded","id","enviar_temperatura_alert","temp","temperaturaFormateada","toFixed","console","log","response","fetch","method","headers","body","JSON","stringify","parseFloat","data","json","ok","message","notificacionResponse","post","tipo","descripcion","time_alert","Date","toISOString","slice","replace","idNotificacion","id_notificacion","id_user","setTimeout","error","handleInputChange","e","target","value","handleUpdateTemperature","newTemperatura","isNaN","enviarTemperatura","HumedadAlert","humedad","setHumedad","enviar_humedad_alert","hum","humedadFormateada","handleUpdateHumedad","newHumedad","enviarHumedad","Zona","Marca_tiempo","Error","Medicion","timeout","status","alert","request","fueraDeRango","debeEnviarAlerta","Math","abs","getHumedadStyle","color","fontWeight","className","children","fileName","_jsxFileName","lineNumber","columnNumber","style","display","alignItems","gap","marginBottom","htmlFor","type","onChange","step","width","onClick","padding","backgroundColor","border","borderRadius","cursor","marginTop","fontSize","getTemperatureStyle","_c","PruebasNotificaciones","_s3","_c2","$RefreshReg$"],"sources":["C:/Users/Roger/Documents/TT2_AVANCES/prototipo-gecko/frontend/src/pages/pruebasNotificaciones.jsx"],"sourcesContent":["import { useState, useEffect } from 'react';\r\n// Importamos axios para hacer peticiones HTTP a nuestra API\r\nimport axios from \"axios\";\r\nimport {jwtDecode} from \"jwt-decode\";\r\n\r\nconst TemperaturaAlert = ({ temperatura, setTemperatura }) => {\r\n  // Estado para el valor del input separado del valor actual de temperatura\r\n  const [inputValue, setInputValue] = useState(temperatura.toString());\r\n  const [lastAlertValue, setLastAlertValue] = useState(null);\r\n  const [alertStatus, setAlertStatus] = useState('');\r\n  const [cooldown, setCooldown] = useState(false);\r\n  \r\n  const token = localStorage.getItem(\"token\");\r\n\r\n  let ID_usuario = '';\r\n   \r\n  if (token) {\r\n    const decoded = jwtDecode(token); // Necesitas la librería jwt-decode\r\n    ID_usuario = decoded.id;\r\n  }\r\n  \r\n  const enviar_temperatura_alert = async (temp, ID_usuario) => {\r\n    setAlertStatus('Enviando alerta...');\r\n    try {\r\n        const temperaturaFormateada = temp.toFixed(2);\r\n        console.log(\"Enviando temperatura formateada:\", temperaturaFormateada);\r\n\r\n        // Enviar correo electrónico\r\n        const response = await fetch(\"http://localhost:5000/send-email\", {\r\n            method: \"POST\",\r\n            headers: { \"Content-Type\": \"application/json\" },\r\n            body: JSON.stringify({ temperatura: parseFloat(temperaturaFormateada) })\r\n        });\r\n        const data = await response.json();\r\n\r\n        if (response.ok) {\r\n            console.log(\"Alerta enviada con éxito:\", data.message);\r\n            setAlertStatus('Alerta enviada con éxito');\r\n\r\n            // Insertar notificación en la base de datos\r\n            const notificacionResponse = await axios.post(\"http://localhost:5000/api/addNotification\", {\r\n                tipo: 'temperatura',\r\n                descripcion: `Temperatura fuera de rango: ${temperaturaFormateada}°C`,\r\n                time_alert: new Date().toISOString().slice(0, 19).replace('T', ' ')\r\n            }, {\r\n                headers: { \"Content-Type\": \"application/json\" }\r\n            });\r\n\r\n            const idNotificacion = notificacionResponse.data.id_notificacion;\r\n\r\n            if (idNotificacion) {\r\n                // Insertar la relación usuario-notificación\r\n                await axios.post(\"http://localhost:5000/api/addNotificationUser\", {\r\n                    id_notificacion: idNotificacion,\r\n                    id_user: ID_usuario\r\n                }, {\r\n                    headers: { \"Content-Type\": \"application/json\" }\r\n                });\r\n\r\n                console.log(\"Relación notificación-usuario guardada con éxito\");\r\n            }\r\n\r\n            // Evita spam de alertas\r\n            setLastAlertValue(temp);\r\n            setCooldown(true);\r\n            setTimeout(() => { setCooldown(false); }, 10000);\r\n        } else {\r\n            console.error(\"Error en la respuesta del servidor:\", data.message);\r\n            setAlertStatus(`Error: ${data.message}`);\r\n        }\r\n    } catch (error) {\r\n        console.error(\"Error al enviar la alerta:\", error);\r\n        setAlertStatus(`Error de conexión: ${error.message}`);\r\n    }\r\n  };\r\n  \r\n  // Este manejador solo actualiza el input, no el valor de temperatura real\r\n  const handleInputChange = (e) => {\r\n    setInputValue(e.target.value);\r\n  };\r\n  \r\n  // Función para actualizar la temperatura cuando se presiona el botón\r\n  const handleUpdateTemperature = () => {\r\n    const newTemperatura = parseFloat(inputValue);\r\n    \r\n    // Verificar que es un número válido\r\n    if (!isNaN(newTemperatura)) {\r\n      setTemperatura(newTemperatura);\r\n      enviarTemperatura(ID_usuario, newTemperatura, 'FRIA', new Date().toISOString().slice(0, 19).replace('T', ' '));\r\n    } else {\r\n      setAlertStatus('Por favor ingrese un número válido');\r\n      setTimeout(() => setAlertStatus(''), 3000);\r\n    }\r\n  };\r\n\r\n  const HumedadAlert = ({ humedad, setHumedad }) => {\r\n    // Estado para el valor del input separado del valor actual de humedad\r\n    const [inputValue, setInputValue] = useState(humedad.toString());\r\n    const [lastAlertValue, setLastAlertValue] = useState(null);\r\n    const [alertStatus, setAlertStatus] = useState('');\r\n    const [cooldown, setCooldown] = useState(false);\r\n    \r\n    const token = localStorage.getItem(\"token\");\r\n  \r\n    let ID_usuario = '';\r\n     \r\n    if (token) {\r\n      const decoded = jwtDecode(token);\r\n      ID_usuario = decoded.id;\r\n    }\r\n    \r\n    const enviar_humedad_alert = async (hum, ID_usuario) => {\r\n      setAlertStatus('Enviando alerta...');\r\n      try {\r\n          const humedadFormateada = hum.toFixed(2);\r\n          console.log(\"Enviando humedad formateada:\", humedadFormateada);\r\n  \r\n          // Enviar correo electrónico\r\n          const response = await fetch(\"http://localhost:5000/send-email\", {\r\n              method: \"POST\",\r\n              headers: { \"Content-Type\": \"application/json\" },\r\n              body: JSON.stringify({ humedad: parseFloat(humedadFormateada) })\r\n          });\r\n          const data = await response.json();\r\n  \r\n          if (response.ok) {\r\n              console.log(\"Alerta enviada con éxito:\", data.message);\r\n              setAlertStatus('Alerta enviada con éxito');\r\n  \r\n              // Insertar notificación en la base de datos\r\n              const notificacionResponse = await axios.post(\"http://localhost:5000/api/addNotification\", {\r\n                  tipo: 'humedad',\r\n                  descripcion: `Humedad fuera de rango: ${humedadFormateada}%`,\r\n                  time_alert: new Date().toISOString().slice(0, 19).replace('T', ' ')\r\n              }, {\r\n                  headers: { \"Content-Type\": \"application/json\" }\r\n              });\r\n  \r\n              const idNotificacion = notificacionResponse.data.id_notificacion;\r\n  \r\n              if (idNotificacion) {\r\n                  // Insertar la relación usuario-notificación\r\n                  await axios.post(\"http://localhost:5000/api/addNotificationUser\", {\r\n                      id_notificacion: idNotificacion,\r\n                      id_user: ID_usuario\r\n                  }, {\r\n                      headers: { \"Content-Type\": \"application/json\" }\r\n                  });\r\n  \r\n                  console.log(\"Relación notificación-usuario guardada con éxito\");\r\n              }\r\n  \r\n              // Evita spam de alertas\r\n              setLastAlertValue(hum);\r\n              setCooldown(true);\r\n              setTimeout(() => { setCooldown(false); }, 10000);\r\n          } else {\r\n              console.error(\"Error en la respuesta del servidor:\", data.message);\r\n              setAlertStatus(`Error: ${data.message}`);\r\n          }\r\n      } catch (error) {\r\n          console.error(\"Error al enviar la alerta:\", error);\r\n          setAlertStatus(`Error de conexión: ${error.message}`);\r\n      }\r\n    };\r\n    \r\n    // Este manejador solo actualiza el input, no el valor de humedad real\r\n    const handleInputChange = (e) => {\r\n      setInputValue(e.target.value);\r\n    };\r\n    \r\n    // Función para actualizar la humedad cuando se presiona el botón\r\n    const handleUpdateHumedad = () => {\r\n      const newHumedad = parseFloat(inputValue);\r\n      \r\n      // Verificar que es un número válido\r\n      if (!isNaN(newHumedad)) {\r\n        setHumedad(newHumedad);\r\n        enviarHumedad(ID_usuario, newHumedad, 'AMBIENTE', new Date().toISOString().slice(0, 19).replace('T', ' '));\r\n      } else {\r\n        setAlertStatus('Por favor ingrese un número válido');\r\n        setTimeout(() => setAlertStatus(''), 3000);\r\n      }\r\n    };\r\n    \r\n    const enviarHumedad = async (ID_usuario, humedad, Zona, Marca_tiempo) => {\r\n      try {\r\n        // Verificar que todos los datos requeridos estén presentes\r\n        if (!ID_usuario || !humedad || !Zona || !Marca_tiempo) {\r\n          console.error('Datos incompletos:', { ID_usuario, humedad, Zona, Marca_tiempo });\r\n          throw new Error('Todos los campos son obligatorios');\r\n        }\r\n        \r\n        console.log('Intentando enviar datos al servidor:', {\r\n          ID_usuario,\r\n          Medicion: humedad,\r\n          Zona,\r\n          Marca_tiempo\r\n        });\r\n        \r\n        // Establecer un timeout para la solicitud\r\n        const response = await axios.post(\r\n          'http://localhost:5000/api/addhumedad',\r\n          {\r\n            ID_usuario: ID_usuario,\r\n            Medicion: humedad,\r\n            Zona: Zona,\r\n            Marca_tiempo: Marca_tiempo\r\n          },\r\n          {\r\n            headers: { \"Content-Type\": \"application/json\" },\r\n            timeout: 10000 // 10 segundos de timeout\r\n          }\r\n        );\r\n    \r\n        console.log('Respuesta exitosa del servidor:', response.data);\r\n        return response.data;\r\n      } catch (error) {\r\n        // Manejo detallado de errores\r\n        if (error.response) {\r\n          // El servidor respondió con un error\r\n          console.error(`Error del servidor (${error.response.status}):`, error.response.data);\r\n          alert(`Error del servidor: ${error.response.status} - ${error.response.data.error || 'Error desconocido'}`);\r\n        } else if (error.request) {\r\n          // No se recibió respuesta\r\n          console.error('No se recibió respuesta del servidor. Verifique que el servidor esté en ejecución.');\r\n          alert('No fue posible conectar con el servidor. Verifique su conexión e intente nuevamente.');\r\n        } else {\r\n          // Error en la configuración de la solicitud\r\n          console.error('Error al configurar la solicitud:', error.message);\r\n          alert(`Error: ${error.message}`);\r\n        }\r\n        \r\n        // Intento de reconexión automática (opcional)\r\n        return false; // Indica que hubo un error\r\n      }\r\n    };\r\n    \r\n    useEffect(() => {\r\n      // Solo enviar alerta si la humedad es válida (no NaN)\r\n      if (isNaN(humedad)) return;\r\n      \r\n      // Verificamos si está fuera del rango permitido\r\n      const fueraDeRango = humedad < 30 || humedad > 50;\r\n      \r\n      if (fueraDeRango) {\r\n        // Verificamos si debemos enviar una nueva alerta\r\n        const debeEnviarAlerta = \r\n          // No hay una alerta previa\r\n          lastAlertValue === null || \r\n          // La humedad ha cambiado significativamente (más de 5%)\r\n          Math.abs(humedad - lastAlertValue) >= 5 || \r\n          // La humedad cruzó el umbral (de alta a baja o viceversa)\r\n          (lastAlertValue > 50 && humedad < 30) || \r\n          (lastAlertValue < 30 && humedad > 50);\r\n        \r\n        // Solo enviamos si debemos y no estamos en cooldown\r\n        if (debeEnviarAlerta && !cooldown) {\r\n          console.log(\"Enviando alerta por humedad:\", humedad);\r\n          enviar_humedad_alert(humedad, ID_usuario);\r\n        }\r\n      } else {\r\n        // Si volvió al rango normal, reiniciamos para que la próxima vez envíe alerta\r\n        if (lastAlertValue !== null) {\r\n          setLastAlertValue(null);\r\n          setAlertStatus('Humedad normalizada');\r\n          \r\n          // Después de 3 segundos, limpiamos el mensaje\r\n          setTimeout(() => {\r\n            if (humedad >= 30 && humedad <= 50) {\r\n              setAlertStatus('');\r\n            }\r\n          }, 3000);\r\n        }\r\n      }\r\n    }, [humedad, lastAlertValue, cooldown, ID_usuario]);\r\n    \r\n    // Actualizar el input cuando cambia la humedad externa\r\n    useEffect(() => {\r\n      setInputValue(humedad.toString());\r\n    }, [humedad]);\r\n    \r\n    // Determinar el estilo basado en el rango de humedad\r\n    const getHumedadStyle = () => {\r\n      if (humedad > 50) return { color: '#8B008B', fontWeight: 'bold' }; // Púrpura para humedad alta\r\n      if (humedad < 30) return { color: '#FF8C00', fontWeight: 'bold' }; // Naranja para humedad baja\r\n      return { color: 'green' };\r\n    };\r\n    \r\n    return (\r\n      <div className=\"PruebasNotificaciones\">\r\n        <h2>Monitoreo De Humedad</h2>\r\n        \r\n        <div style={{ display: 'flex', alignItems: 'center', gap: '10px', marginBottom: '15px' }}>\r\n          <label htmlFor=\"humedad\">Humedad (%): </label>\r\n          <input \r\n            id=\"humedad\"\r\n            type=\"number\" \r\n            value={inputValue} \r\n            onChange={handleInputChange} \r\n            step=\"0.1\"\r\n            style={{ width: '80px' }}\r\n          />\r\n          <button \r\n            onClick={handleUpdateHumedad}\r\n            style={{\r\n              padding: '5px 15px',\r\n              backgroundColor: '#4682B4', // Azul acero para distinguirlo del botón de temperatura\r\n              color: 'white',\r\n              border: 'none',\r\n              borderRadius: '4px',\r\n              cursor: 'pointer'\r\n            }}\r\n          >\r\n            Actualizar\r\n          </button>\r\n        </div>\r\n        \r\n        <p>Humedad actual: <span style={getHumedadStyle()}>{humedad.toFixed(2)}%</span></p>\r\n        \r\n        {humedad < 30 && \r\n          <p style={{color: '#FF8C00'}}>\r\n            ⚠️ Humedad por debajo del rango normal (30% - 50%)\r\n          </p>\r\n        }\r\n        {humedad > 50 && \r\n          <p style={{color: '#8B008B'}}>\r\n            ⚠️ Humedad por encima del rango normal (30% - 50%)\r\n          </p>\r\n        }\r\n        \r\n        {cooldown && \r\n          <p style={{color: 'gray'}}>\r\n            ⏱️ Esperando para enviar la siguiente alerta...\r\n          </p>\r\n        }\r\n        \r\n        {alertStatus && <p className=\"alert-status\">{alertStatus}</p>}\r\n        \r\n        {lastAlertValue !== null && (\r\n          <div style={{marginTop: '10px', fontSize: '0.9em', color: '#555'}}>\r\n            Última alerta enviada: {lastAlertValue.toFixed(2)}%\r\n          </div>\r\n        )}\r\n      </div>\r\n    );\r\n  };\r\n  \r\n  const enviarTemperatura = async (ID_usuario, temperatura, Zona, Marca_tiempo) => {\r\n    try {\r\n      // Verificar que todos los datos requeridos estén presentes\r\n      if (!ID_usuario || !temperatura || !Zona || !Marca_tiempo) {\r\n        console.error('Datos incompletos:', { ID_usuario, temperatura, Zona, Marca_tiempo });\r\n        throw new Error('Todos los campos son obligatorios');\r\n      }\r\n      \r\n      console.log('Intentando enviar datos al servidor:', {\r\n        ID_usuario,\r\n        Medicion: temperatura,\r\n        Zona,\r\n        Marca_tiempo\r\n      });\r\n      \r\n      // Establecer un timeout para la solicitud\r\n      const response = await axios.post(\r\n        'http://localhost:5000/api/addtemperatura',\r\n        {\r\n          ID_usuario: ID_usuario,\r\n          Medicion: temperatura,\r\n          Zona: Zona,\r\n          Marca_tiempo: Marca_tiempo\r\n        },\r\n        {\r\n          headers: { \"Content-Type\": \"application/json\" },\r\n          timeout: 10000 // 10 segundos de timeout\r\n        }\r\n      );\r\n  \r\n      console.log('Respuesta exitosa del servidor:', response.data);\r\n      return response.data;\r\n    } catch (error) {\r\n      // Manejo detallado de errores\r\n      if (error.response) {\r\n        // El servidor respondió con un error\r\n        console.error(`Error del servidor (${error.response.status}):`, error.response.data);\r\n        alert(`Error del servidor: ${error.response.status} - ${error.response.data.error || 'Error desconocido'}`);\r\n      } else if (error.request) {\r\n        // No se recibió respuesta\r\n        console.error('No se recibió respuesta del servidor. Verifique que el servidor esté en ejecución.');\r\n        alert('No fue posible conectar con el servidor. Verifique su conexión e intente nuevamente.');\r\n      } else {\r\n        // Error en la configuración de la solicitud\r\n        console.error('Error al configurar la solicitud:', error.message);\r\n        alert(`Error: ${error.message}`);\r\n      }\r\n      \r\n      // Intento de reconexión automática (opcional)\r\n      return false; // Indica que hubo un error\r\n    }\r\n  };\r\n  \r\n  useEffect(() => {\r\n    // Solo enviar alerta si la temperatura es válida (no NaN)\r\n    if (isNaN(temperatura)) return;\r\n    \r\n    // Verificamos si está fuera del rango permitido\r\n    const fueraDeRango = temperatura < 22 || temperatura > 32;\r\n    \r\n    if (fueraDeRango) {\r\n      // Verificamos si debemos enviar una nueva alerta\r\n      const debeEnviarAlerta = \r\n        // No hay una alerta previa\r\n        lastAlertValue === null || \r\n        // La temperatura ha cambiado significativamente (más de 1 grado)\r\n        Math.abs(temperatura - lastAlertValue) >= 1 || \r\n        // La temperatura cruzó el umbral (de caliente a frío o viceversa)\r\n        (lastAlertValue > 32 && temperatura < 22) || \r\n        (lastAlertValue < 22 && temperatura > 32);\r\n      \r\n      // Solo enviamos si debemos y no estamos en cooldown\r\n      if (debeEnviarAlerta && !cooldown) {\r\n        console.log(\"Enviando alerta por temperatura:\", temperatura);\r\n        enviar_temperatura_alert(temperatura, ID_usuario);\r\n      }\r\n    } else {\r\n      // Si volvió al rango normal, reiniciamos para que la próxima vez envíe alerta\r\n      if (lastAlertValue !== null) {\r\n        setLastAlertValue(null);\r\n        setAlertStatus('Temperatura normalizada');\r\n        \r\n        // Después de 3 segundos, limpiamos el mensaje\r\n        setTimeout(() => {\r\n          if (temperatura >= 22 && temperatura <= 32) {\r\n            setAlertStatus('');\r\n          }\r\n        }, 3000);\r\n      }\r\n    }\r\n  }, [temperatura, lastAlertValue, cooldown, ID_usuario]);\r\n  \r\n  // Actualizar el input cuando cambia la temperatura externa\r\n  useEffect(() => {\r\n    setInputValue(temperatura.toString());\r\n  }, [temperatura]);\r\n  \r\n  // Determinar el estilo basado en el rango de temperatura\r\n  const getTemperatureStyle = () => {\r\n    if (temperatura > 32) return { color: 'red', fontWeight: 'bold' };\r\n    if (temperatura < 22) return { color: 'blue', fontWeight: 'bold' };\r\n    return { color: 'green' };\r\n  };\r\n  \r\n  return (\r\n    <div className=\"PruebasNotificaciones\">\r\n      <h2>Monitoreo De Temperatura</h2>\r\n      \r\n      <div style={{ display: 'flex', alignItems: 'center', gap: '10px', marginBottom: '15px' }}>\r\n        <label htmlFor=\"temperatura\">Temperatura (°C): </label>\r\n        <input \r\n          id=\"temperatura\"\r\n          type=\"number\" \r\n          value={inputValue} \r\n          onChange={handleInputChange} \r\n          step=\"0.1\"\r\n          style={{ width: '80px' }}\r\n        />\r\n        <button \r\n          onClick={handleUpdateTemperature}\r\n          style={{\r\n            padding: '5px 15px',\r\n            backgroundColor: '#4CAF50',\r\n            color: 'white',\r\n            border: 'none',\r\n            borderRadius: '4px',\r\n            cursor: 'pointer'\r\n          }}\r\n        >\r\n          Actualizar\r\n        </button>\r\n      </div>\r\n      \r\n      <p>Temperatura actual: <span style={getTemperatureStyle()}>{temperatura.toFixed(2)}°C</span></p>\r\n      \r\n      {temperatura < 22 && \r\n        <p style={{color: 'blue'}}>\r\n          ⚠️ Temperatura por debajo del rango normal (22°C - 32°C)\r\n        </p>\r\n      }\r\n      {temperatura > 32 && \r\n        <p style={{color: 'red'}}>\r\n          ⚠️ Temperatura por encima del rango normal (22°C - 32°C)\r\n        </p>\r\n      }\r\n      \r\n      {cooldown && \r\n        <p style={{color: 'gray'}}>\r\n          ⏱️ Esperando para enviar la siguiente alerta...\r\n        </p>\r\n      }\r\n      \r\n      {alertStatus && <p className=\"alert-status\">{alertStatus}</p>}\r\n      \r\n      {lastAlertValue !== null && (\r\n        <div style={{marginTop: '10px', fontSize: '0.9em', color: '#555'}}>\r\n          Última alerta enviada: {lastAlertValue.toFixed(2)}°C\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nfunction PruebasNotificaciones() {\r\n  const [temperatura, setTemperatura] = useState(25); // Valor inicial dentro del rango normal\r\n  const [humedad, setHumedad] = useState(40); // Valor inicial dentro del rango normal de humedad\r\n  \r\n  return (\r\n    <div>\r\n      <TemperaturaAlert temperatura={temperatura} setTemperatura={setTemperatura} />\r\n      <HumedadAlert humedad={humedad} setHumedad={setHumedad} />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default PruebasNotificaciones;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}