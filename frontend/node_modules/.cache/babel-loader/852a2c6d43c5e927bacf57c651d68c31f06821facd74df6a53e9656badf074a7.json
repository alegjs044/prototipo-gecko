{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Roger\\\\Documents\\\\TT2_AVANCES\\\\prototipo-gecko\\\\frontend\\\\src\\\\pages\\\\pruebasNotificaciones.jsx\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport { useState } from 'react';\nimport axios from 'axios';\nimport { jwtDecode } from 'jwt-decode';\n\n/**\r\n * Componente principal de monitoreo de temperatura\r\n * Gestiona la temperatura actual y renderiza el panel de control\r\n */\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst PruebasNotificaciones = () => {\n  _s();\n  const [temperatura, setTemperatura] = useState(25);\n  return /*#__PURE__*/_jsxDEV(TemperaturaAlert, {\n    temperatura: temperatura,\n    setTemperatura: setTemperatura\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 11,\n    columnNumber: 10\n  }, this);\n};\n\n/**\r\n * Componente de interfaz para monitorear y actualizar la temperatura\r\n * Permite al usuario ingresar valores y muestra alertas cuando están fuera de rango\r\n */\n_s(PruebasNotificaciones, \"BSLE6W81eo5m/C7rYFlDzZ5wRTU=\");\n_c = PruebasNotificaciones;\nconst TemperaturaAlert = ({\n  temperatura,\n  setTemperatura\n}) => {\n  _s2();\n  const [inputValue, setInputValue] = useState(temperatura.toString());\n  const [lastAlertValue, setLastAlertValue] = useState(null); // Almacena la última temperatura que generó una alerta\n  const [alertStatus, setAlertStatus] = useState(''); // Estado del mensaje de alerta\n\n  // Obtener ID del usuario desde el token JWT almacenado\n  const token = localStorage.getItem('token');\n  const ID_usuario = token ? jwtDecode(token).id : '';\n  const handleInputChange = e => setInputValue(e.target.value);\n\n  // Maneja la actualización de temperatura y dispara las notificaciones si es necesario\n  const handleUpdateTemperature = () => {\n    const newTemperatura = parseFloat(inputValue);\n    if (!isNaN(newTemperatura)) {\n      setTemperatura(newTemperatura);\n      gestionarNotificacion(newTemperatura, ID_usuario, setAlertStatus, setLastAlertValue, lastAlertValue);\n    } else {\n      setAlertStatus('Por favor ingrese un número válido');\n      setTimeout(() => setAlertStatus(''), 3000);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"PruebasNotificaciones\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Monitoreo De Temperatura\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"temperatura\",\n        children: \"Temperatura (\\xB0C): \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        id: \"temperatura\",\n        type: \"number\",\n        value: inputValue,\n        onChange: handleInputChange,\n        step: \"0.1\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleUpdateTemperature,\n        children: \"Actualizar\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Temperatura actual: \", /*#__PURE__*/_jsxDEV(\"span\", {\n        children: [temperatura.toFixed(2), \"\\xB0C\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 30\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 7\n    }, this), alertStatus && /*#__PURE__*/_jsxDEV(\"p\", {\n      children: alertStatus\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 23\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 42,\n    columnNumber: 5\n  }, this);\n};\n\n/**\r\n * Gestiona la notificación de temperatura\r\n * 1. Registra la temperatura en la base de datos\r\n * 2. Evalúa si se requiere enviar una alerta (si está fuera del rango 22-32°C)\r\n * 3. Evita duplicar alertas similares (diferencia < 1°C)\r\n */\n_s2(TemperaturaAlert, \"SXHQEkyvBDclk8/MhxKtAoAiqdQ=\");\n_c2 = TemperaturaAlert;\nconst gestionarNotificacion = async (temperatura, ID_usuario, setAlertStatus, setLastAlertValue, lastAlertValue) => {\n  const Marca_tiempo = new Date().toISOString().slice(0, 19).replace('T', ' ');\n\n  // Insertar siempre la temperatura en la base de datos\n  await enviarTemperatura(ID_usuario, temperatura, 'Zona 1', Marca_tiempo);\n  const temperaturaFormateada = temperatura.toFixed(2);\n  console.log('Temperatura formateada:', temperaturaFormateada);\n\n  // Evitar notificaciones repetidas para valores similares\n  if (lastAlertValue !== null && Math.abs(temperatura - lastAlertValue) < 1) {\n    console.log('Temperatura similar a la anterior, no se enviará alerta.');\n    return;\n  }\n\n  // Verifica si la temperatura está fuera del rango aceptable (22-32°C)\n  if (temperatura < 22 || temperatura > 32) {\n    try {\n      // Envía alerta por correo electrónico\n      await enviarEmail('Temperatura fuera de rango', temperatura, setAlertStatus);\n\n      // Registra la notificación en la base de datos\n      const notificacionResponse = await axios.post('http://localhost:5000/api/addNotification', {\n        tipo: 'temperatura',\n        descripcion: `Temperatura fuera de rango: ${temperaturaFormateada}°C`,\n        time_alert: Marca_tiempo\n      }, {\n        headers: {\n          'Content-Type': 'application/json'\n        }\n      });\n\n      // Vincula la notificación con el usuario\n      const idNotificacion = notificacionResponse.data.id_notificacion;\n      if (idNotificacion) {\n        await axios.post('http://localhost:5000/api/addNotificationUser', {\n          id_notificacion: idNotificacion,\n          id_user: ID_usuario\n        }, {\n          headers: {\n            'Content-Type': 'application/json'\n          }\n        });\n        console.log('Relación notificación-usuario guardada con éxito');\n      }\n      setLastAlertValue(temperatura);\n    } catch (error) {\n      console.error('Error al gestionar la notificación:', error);\n      setAlertStatus(`Error de conexión: ${error.message}`);\n    }\n  }\n};\n\n/**\r\n * Registra la temperatura en la base de datos\r\n * Realiza validación de datos antes de enviar\r\n */\nconst enviarTemperatura = async (ID_usuario, temperatura, Zona, Marca_tiempo) => {\n  try {\n    // Validación de datos completos\n    if (!ID_usuario || !temperatura || !Zona || !Marca_tiempo) {\n      console.error('Datos incompletos:', {\n        ID_usuario,\n        temperatura,\n        Zona,\n        Marca_tiempo\n      });\n      throw new Error('Todos los campos son obligatorios');\n    }\n    console.log('Registrando temperatura en la base de datos:', {\n      ID_usuario,\n      Medicion: temperatura,\n      Zona,\n      Marca_tiempo\n    });\n\n    // Envío de datos al servidor\n    await axios.post('http://localhost:5000/api/addtemperatura', {\n      ID_usuario,\n      Medicion: temperatura,\n      Zona,\n      Marca_tiempo\n    }, {\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      timeout: 10000\n    });\n    console.log('Temperatura guardada correctamente.');\n  } catch (error) {\n    console.error('Error al guardar la temperatura:', error);\n  }\n};\n\n/**\r\n * Envía una alerta por correo electrónico\r\n * Actualiza el estado de la alerta para informar al usuario\r\n */\nconst enviarEmail = async (descripcion, temperatura, setAlertStatus) => {\n  setAlertStatus('Enviando alerta...');\n  try {\n    const response = await fetch('http://localhost:5000/send-email', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        descripcion,\n        temperatura\n      })\n    });\n    const result = await response.json();\n    if (response.ok) {\n      console.log('Alerta enviada con éxito:', result.message);\n      setAlertStatus('Alerta enviada con éxito');\n    } else {\n      console.error('Error en la respuesta del servidor:', result.message);\n      setAlertStatus(`Error: ${result.message}`);\n    }\n  } catch (error) {\n    console.error('Error al enviar la alerta:', error);\n    setAlertStatus(`Error de conexión: ${error.message}`);\n  }\n};\nexport default PruebasNotificaciones;\nvar _c, _c2;\n$RefreshReg$(_c, \"PruebasNotificaciones\");\n$RefreshReg$(_c2, \"TemperaturaAlert\");","map":{"version":3,"names":["useState","axios","jwtDecode","jsxDEV","_jsxDEV","PruebasNotificaciones","_s","temperatura","setTemperatura","TemperaturaAlert","fileName","_jsxFileName","lineNumber","columnNumber","_c","_s2","inputValue","setInputValue","toString","lastAlertValue","setLastAlertValue","alertStatus","setAlertStatus","token","localStorage","getItem","ID_usuario","id","handleInputChange","e","target","value","handleUpdateTemperature","newTemperatura","parseFloat","isNaN","gestionarNotificacion","setTimeout","className","children","htmlFor","type","onChange","step","onClick","toFixed","_c2","Marca_tiempo","Date","toISOString","slice","replace","enviarTemperatura","temperaturaFormateada","console","log","Math","abs","enviarEmail","notificacionResponse","post","tipo","descripcion","time_alert","headers","idNotificacion","data","id_notificacion","id_user","error","message","Zona","Error","Medicion","timeout","response","fetch","method","body","JSON","stringify","result","json","ok","$RefreshReg$"],"sources":["C:/Users/Roger/Documents/TT2_AVANCES/prototipo-gecko/frontend/src/pages/pruebasNotificaciones.jsx"],"sourcesContent":["import { useState } from 'react';\r\nimport axios from 'axios';\r\nimport { jwtDecode } from 'jwt-decode';\r\n\r\n/**\r\n * Componente principal de monitoreo de temperatura\r\n * Gestiona la temperatura actual y renderiza el panel de control\r\n */\r\nconst PruebasNotificaciones = () => {\r\n  const [temperatura, setTemperatura] = useState(25);\r\n  return <TemperaturaAlert temperatura={temperatura} setTemperatura={setTemperatura} />;\r\n};\r\n\r\n/**\r\n * Componente de interfaz para monitorear y actualizar la temperatura\r\n * Permite al usuario ingresar valores y muestra alertas cuando están fuera de rango\r\n */\r\nconst TemperaturaAlert = ({ temperatura, setTemperatura }) => {\r\n  const [inputValue, setInputValue] = useState(temperatura.toString());\r\n  const [lastAlertValue, setLastAlertValue] = useState(null);  // Almacena la última temperatura que generó una alerta\r\n  const [alertStatus, setAlertStatus] = useState('');          // Estado del mensaje de alerta\r\n\r\n  // Obtener ID del usuario desde el token JWT almacenado\r\n  const token = localStorage.getItem('token');\r\n  const ID_usuario = token ? jwtDecode(token).id : '';\r\n\r\n  const handleInputChange = (e) => setInputValue(e.target.value);\r\n\r\n  // Maneja la actualización de temperatura y dispara las notificaciones si es necesario\r\n  const handleUpdateTemperature = () => {\r\n    const newTemperatura = parseFloat(inputValue);\r\n    if (!isNaN(newTemperatura)) {\r\n      setTemperatura(newTemperatura);\r\n      gestionarNotificacion(newTemperatura, ID_usuario, setAlertStatus, setLastAlertValue, lastAlertValue);\r\n    } else {\r\n      setAlertStatus('Por favor ingrese un número válido');\r\n      setTimeout(() => setAlertStatus(''), 3000);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"PruebasNotificaciones\">\r\n      <h2>Monitoreo De Temperatura</h2>\r\n      <div>\r\n        <label htmlFor=\"temperatura\">Temperatura (°C): </label>\r\n        <input id=\"temperatura\" type=\"number\" value={inputValue} onChange={handleInputChange} step=\"0.1\" />\r\n        <button onClick={handleUpdateTemperature}>Actualizar</button>\r\n      </div>\r\n      <p>Temperatura actual: <span>{temperatura.toFixed(2)}°C</span></p>\r\n      {alertStatus && <p>{alertStatus}</p>}\r\n    </div>\r\n  );\r\n};\r\n\r\n/**\r\n * Gestiona la notificación de temperatura\r\n * 1. Registra la temperatura en la base de datos\r\n * 2. Evalúa si se requiere enviar una alerta (si está fuera del rango 22-32°C)\r\n * 3. Evita duplicar alertas similares (diferencia < 1°C)\r\n */\r\nconst gestionarNotificacion = async (temperatura, ID_usuario, setAlertStatus, setLastAlertValue, lastAlertValue) => {\r\n  const Marca_tiempo = new Date().toISOString().slice(0, 19).replace('T', ' ');\r\n\r\n  // Insertar siempre la temperatura en la base de datos\r\n  await enviarTemperatura(ID_usuario, temperatura, 'Zona 1', Marca_tiempo);\r\n\r\n  const temperaturaFormateada = temperatura.toFixed(2);\r\n  console.log('Temperatura formateada:', temperaturaFormateada);\r\n\r\n  // Evitar notificaciones repetidas para valores similares\r\n  if (lastAlertValue !== null && Math.abs(temperatura - lastAlertValue) < 1) {\r\n    console.log('Temperatura similar a la anterior, no se enviará alerta.');\r\n    return;\r\n  }\r\n\r\n  // Verifica si la temperatura está fuera del rango aceptable (22-32°C)\r\n  if (temperatura < 22 || temperatura > 32) {\r\n    try {\r\n      // Envía alerta por correo electrónico\r\n      await enviarEmail('Temperatura fuera de rango', temperatura, setAlertStatus);\r\n\r\n      // Registra la notificación en la base de datos\r\n      const notificacionResponse = await axios.post(\r\n        'http://localhost:5000/api/addNotification',\r\n        {\r\n          tipo: 'temperatura',\r\n          descripcion: `Temperatura fuera de rango: ${temperaturaFormateada}°C`,\r\n          time_alert: Marca_tiempo,\r\n        },\r\n        { headers: { 'Content-Type': 'application/json' } }\r\n      );\r\n\r\n      // Vincula la notificación con el usuario\r\n      const idNotificacion = notificacionResponse.data.id_notificacion;\r\n      if (idNotificacion) {\r\n        await axios.post(\r\n          'http://localhost:5000/api/addNotificationUser',\r\n          { id_notificacion: idNotificacion, id_user: ID_usuario },\r\n          { headers: { 'Content-Type': 'application/json' } }\r\n        );\r\n        console.log('Relación notificación-usuario guardada con éxito');\r\n      }\r\n\r\n      setLastAlertValue(temperatura);\r\n    } catch (error) {\r\n      console.error('Error al gestionar la notificación:', error);\r\n      setAlertStatus(`Error de conexión: ${error.message}`);\r\n    }\r\n  }\r\n};\r\n\r\n/**\r\n * Registra la temperatura en la base de datos\r\n * Realiza validación de datos antes de enviar\r\n */\r\nconst enviarTemperatura = async (ID_usuario, temperatura, Zona, Marca_tiempo) => {\r\n  try {\r\n    // Validación de datos completos\r\n    if (!ID_usuario || !temperatura || !Zona || !Marca_tiempo) {\r\n      console.error('Datos incompletos:', { ID_usuario, temperatura, Zona, Marca_tiempo });\r\n      throw new Error('Todos los campos son obligatorios');\r\n    }\r\n\r\n    console.log('Registrando temperatura en la base de datos:', {\r\n      ID_usuario,\r\n      Medicion: temperatura,\r\n      Zona,\r\n      Marca_tiempo\r\n    });\r\n\r\n    // Envío de datos al servidor\r\n    await axios.post(\r\n      'http://localhost:5000/api/addtemperatura',\r\n      {\r\n        ID_usuario,\r\n        Medicion: temperatura,\r\n        Zona,\r\n        Marca_tiempo\r\n      },\r\n      { headers: { \"Content-Type\": \"application/json\" }, timeout: 10000 }\r\n    );\r\n\r\n    console.log('Temperatura guardada correctamente.');\r\n  } catch (error) {\r\n    console.error('Error al guardar la temperatura:', error);\r\n  }\r\n};\r\n\r\n/**\r\n * Envía una alerta por correo electrónico\r\n * Actualiza el estado de la alerta para informar al usuario\r\n */\r\nconst enviarEmail = async (descripcion, temperatura, setAlertStatus) => {\r\n  setAlertStatus('Enviando alerta...');\r\n  try {\r\n    const response = await fetch('http://localhost:5000/send-email', {\r\n      method: 'POST',\r\n      headers: { 'Content-Type': 'application/json' },\r\n      body: JSON.stringify({ descripcion, temperatura }),\r\n    });\r\n\r\n    const result = await response.json();\r\n    if (response.ok) {\r\n      console.log('Alerta enviada con éxito:', result.message);\r\n      setAlertStatus('Alerta enviada con éxito');\r\n    } else {\r\n      console.error('Error en la respuesta del servidor:', result.message);\r\n      setAlertStatus(`Error: ${result.message}`);\r\n    }\r\n  } catch (error) {\r\n    console.error('Error al enviar la alerta:', error);\r\n    setAlertStatus(`Error de conexión: ${error.message}`);\r\n  }\r\n};\r\n\r\nexport default PruebasNotificaciones;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}