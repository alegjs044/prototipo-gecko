{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Roger\\\\Documents\\\\TT2_AVANCES\\\\prototipo-gecko\\\\frontend\\\\src\\\\pages\\\\pruebasNotificaciones.jsx\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport { useState, useEffect, useRef } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst TemperaturaAlert = ({\n  temperatura,\n  setTemperatura\n}) => {\n  _s();\n  // En lugar de un solo estado de alerta, rastreamos el último valor que causó una alerta\n  const [lastAlertValue, setLastAlertValue] = useState(null);\n  const [alertStatus, setAlertStatus] = useState('');\n  // Usamos un temporizador para evitar enviar alertas demasiado seguidas\n  const [cooldown, setCooldown] = useState(false);\n  const enviar_temperatura_alert = async temp => {\n    setAlertStatus('Enviando alerta...');\n    try {\n      // Asegurar que la temperatura se envía como string con 2 decimales\n      const temperaturaFormateada = temp.toFixed(2);\n      console.log(\"Enviando temperatura formateada:\", temperaturaFormateada);\n      const response = await fetch(\"http://localhost:5000/send-email\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n          temperatura: parseFloat(temperaturaFormateada) // Convertir a número de nuevo\n        })\n      });\n      const data = await response.json();\n      if (response.ok) {\n        console.log(\"Alerta enviada con éxito:\", data.message);\n        setAlertStatus('Alerta enviada con éxito');\n\n        // Guardamos el valor actual como el último valor de alerta\n        setLastAlertValue(temp);\n\n        // Establecemos un tiempo de espera para evitar el spam de alertas\n        setCooldown(true);\n        setTimeout(() => {\n          setCooldown(false);\n        }, 10000); // 10 segundos de cooldown\n      } else {\n        console.error(\"Error en la respuesta del servidor:\", data.message);\n        setAlertStatus(`Error: ${data.message}`);\n      }\n    } catch (error) {\n      console.error(\"Error al enviar la alerta:\", error);\n      setAlertStatus(`Error de conexión: ${error.message}`);\n    }\n  };\n  const handleChange = e => {\n    const newTemperatura = parseFloat(e.target.value);\n    setTemperatura(newTemperatura);\n  };\n  useEffect(() => {\n    // Solo enviar alerta si la temperatura es válida (no NaN)\n    if (isNaN(temperatura)) return;\n\n    // Verificamos si está fuera del rango permitido\n    const fueraDeRango = temperatura < 22 || temperatura > 32;\n    if (fueraDeRango) {\n      // Verificamos si debemos enviar una nueva alerta\n      const debeEnviarAlerta =\n      // No hay una alerta previa\n      lastAlertValue === null ||\n      // La temperatura ha cambiado significativamente (más de 1 grado)\n      Math.abs(temperatura - lastAlertValue) >= 1 ||\n      // La temperatura cruzó el umbral (de caliente a frío o viceversa)\n      lastAlertValue > 32 && temperatura < 22 || lastAlertValue < 22 && temperatura > 32;\n\n      // Solo enviamos si debemos y no estamos en cooldown\n      if (debeEnviarAlerta && !cooldown) {\n        console.log(\"Enviando alerta por temperatura:\", temperatura);\n        enviar_temperatura_alert(temperatura);\n      }\n    } else {\n      // Si volvió al rango normal, reiniciamos para que la próxima vez envíe alerta\n      if (lastAlertValue !== null) {\n        setLastAlertValue(null);\n        setAlertStatus('Temperatura normalizada');\n\n        // Después de 3 segundos, limpiamos el mensaje\n        setTimeout(() => {\n          if (temperatura >= 22 && temperatura <= 32) {\n            setAlertStatus('');\n          }\n        }, 3000);\n      }\n    }\n  }, [temperatura, lastAlertValue, cooldown]);\n\n  // Determinar el estilo basado en el rango de temperatura\n  const getTemperatureStyle = () => {\n    if (temperatura > 32) return {\n      color: 'red',\n      fontWeight: 'bold'\n    };\n    if (temperatura < 22) return {\n      color: 'blue',\n      fontWeight: 'bold'\n    };\n    return {\n      color: 'green'\n    };\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"PruebasNotificaciones\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Monitoreo De Temperatura\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"temperatura\",\n        children: \"Temperatura (\\xB0C): \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        id: \"temperatura\",\n        type: \"number\",\n        value: temperatura,\n        onChange: handleChange,\n        step: \"0.1\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Temperatura actual: \", /*#__PURE__*/_jsxDEV(\"span\", {\n        style: getTemperatureStyle(),\n        children: [temperatura.toFixed(2), \"\\xB0C\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 116,\n        columnNumber: 30\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 7\n    }, this), temperatura < 22 && /*#__PURE__*/_jsxDEV(\"p\", {\n      style: {\n        color: 'blue'\n      },\n      children: \"\\u26A0\\uFE0F Temperatura por debajo del rango normal (22\\xB0C - 32\\xB0C)\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 9\n    }, this), temperatura > 32 && /*#__PURE__*/_jsxDEV(\"p\", {\n      style: {\n        color: 'red'\n      },\n      children: \"\\u26A0\\uFE0F Temperatura por encima del rango normal (22\\xB0C - 32\\xB0C)\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 124,\n      columnNumber: 9\n    }, this), cooldown && /*#__PURE__*/_jsxDEV(\"p\", {\n      style: {\n        color: 'gray'\n      },\n      children: \"\\u23F1\\uFE0F Esperando para enviar la siguiente alerta...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 130,\n      columnNumber: 9\n    }, this), alertStatus && /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"alert-status\",\n      children: alertStatus\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 135,\n      columnNumber: 23\n    }, this), lastAlertValue !== null && /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        marginTop: '10px',\n        fontSize: '0.9em',\n        color: '#555'\n      },\n      children: [\"\\xDAltima alerta enviada: \", lastAlertValue.toFixed(2), \"\\xB0C\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 138,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 103,\n    columnNumber: 5\n  }, this);\n};\n_s(TemperaturaAlert, \"oupOFOwy54PP6TOStzMf/PPE5gY=\");\n_c = TemperaturaAlert;\nfunction PruebasNotificaciones() {\n  _s2();\n  const [temperatura, setTemperatura] = useState(25); // Valor inicial dentro del rango normal\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(TemperaturaAlert, {\n      temperatura: temperatura,\n      setTemperatura: setTemperatura\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 151,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 150,\n    columnNumber: 5\n  }, this);\n}\n_s2(PruebasNotificaciones, \"BSLE6W81eo5m/C7rYFlDzZ5wRTU=\");\n_c2 = PruebasNotificaciones;\nexport default PruebasNotificaciones;\nvar _c, _c2;\n$RefreshReg$(_c, \"TemperaturaAlert\");\n$RefreshReg$(_c2, \"PruebasNotificaciones\");","map":{"version":3,"names":["useState","useEffect","useRef","jsxDEV","_jsxDEV","TemperaturaAlert","temperatura","setTemperatura","_s","lastAlertValue","setLastAlertValue","alertStatus","setAlertStatus","cooldown","setCooldown","enviar_temperatura_alert","temp","temperaturaFormateada","toFixed","console","log","response","fetch","method","headers","body","JSON","stringify","parseFloat","data","json","ok","message","setTimeout","error","handleChange","e","newTemperatura","target","value","isNaN","fueraDeRango","debeEnviarAlerta","Math","abs","getTemperatureStyle","color","fontWeight","className","children","fileName","_jsxFileName","lineNumber","columnNumber","htmlFor","id","type","onChange","step","style","marginTop","fontSize","_c","PruebasNotificaciones","_s2","_c2","$RefreshReg$"],"sources":["C:/Users/Roger/Documents/TT2_AVANCES/prototipo-gecko/frontend/src/pages/pruebasNotificaciones.jsx"],"sourcesContent":["import { useState, useEffect, useRef } from 'react';\r\n\r\nconst TemperaturaAlert = ({ temperatura, setTemperatura }) => {\r\n  // En lugar de un solo estado de alerta, rastreamos el último valor que causó una alerta\r\n  const [lastAlertValue, setLastAlertValue] = useState(null);\r\n  const [alertStatus, setAlertStatus] = useState('');\r\n  // Usamos un temporizador para evitar enviar alertas demasiado seguidas\r\n  const [cooldown, setCooldown] = useState(false);\r\n  \r\n  const enviar_temperatura_alert = async (temp) => {\r\n    setAlertStatus('Enviando alerta...');\r\n    try {\r\n      // Asegurar que la temperatura se envía como string con 2 decimales\r\n      const temperaturaFormateada = temp.toFixed(2);\r\n      \r\n      console.log(\"Enviando temperatura formateada:\", temperaturaFormateada);\r\n      \r\n      const response = await fetch(\"http://localhost:5000/send-email\", {\r\n        method: \"POST\",\r\n        headers: { \"Content-Type\": \"application/json\" },\r\n        body: JSON.stringify({ \r\n          temperatura: parseFloat(temperaturaFormateada) // Convertir a número de nuevo\r\n        }),\r\n      });\r\n      \r\n      const data = await response.json();\r\n      \r\n      if (response.ok) {\r\n        console.log(\"Alerta enviada con éxito:\", data.message);\r\n        setAlertStatus('Alerta enviada con éxito');\r\n        \r\n        // Guardamos el valor actual como el último valor de alerta\r\n        setLastAlertValue(temp);\r\n        \r\n        // Establecemos un tiempo de espera para evitar el spam de alertas\r\n        setCooldown(true);\r\n        setTimeout(() => {\r\n          setCooldown(false);\r\n        }, 10000); // 10 segundos de cooldown\r\n        \r\n      } else {\r\n        console.error(\"Error en la respuesta del servidor:\", data.message);\r\n        setAlertStatus(`Error: ${data.message}`);\r\n      }\r\n    } catch (error) {\r\n      console.error(\"Error al enviar la alerta:\", error);\r\n      setAlertStatus(`Error de conexión: ${error.message}`);\r\n    }\r\n  };\r\n  \r\n  const handleChange = (e) => {\r\n    const newTemperatura = parseFloat(e.target.value);\r\n    setTemperatura(newTemperatura);\r\n  };\r\n  \r\n  useEffect(() => {\r\n    // Solo enviar alerta si la temperatura es válida (no NaN)\r\n    if (isNaN(temperatura)) return;\r\n    \r\n    // Verificamos si está fuera del rango permitido\r\n    const fueraDeRango = temperatura < 22 || temperatura > 32;\r\n    \r\n    if (fueraDeRango) {\r\n      // Verificamos si debemos enviar una nueva alerta\r\n      const debeEnviarAlerta = \r\n        // No hay una alerta previa\r\n        lastAlertValue === null || \r\n        // La temperatura ha cambiado significativamente (más de 1 grado)\r\n        Math.abs(temperatura - lastAlertValue) >= 1 || \r\n        // La temperatura cruzó el umbral (de caliente a frío o viceversa)\r\n        (lastAlertValue > 32 && temperatura < 22) || \r\n        (lastAlertValue < 22 && temperatura > 32);\r\n      \r\n      // Solo enviamos si debemos y no estamos en cooldown\r\n      if (debeEnviarAlerta && !cooldown) {\r\n        console.log(\"Enviando alerta por temperatura:\", temperatura);\r\n        enviar_temperatura_alert(temperatura);\r\n      }\r\n    } else {\r\n      // Si volvió al rango normal, reiniciamos para que la próxima vez envíe alerta\r\n      if (lastAlertValue !== null) {\r\n        setLastAlertValue(null);\r\n        setAlertStatus('Temperatura normalizada');\r\n        \r\n        // Después de 3 segundos, limpiamos el mensaje\r\n        setTimeout(() => {\r\n          if (temperatura >= 22 && temperatura <= 32) {\r\n            setAlertStatus('');\r\n          }\r\n        }, 3000);\r\n      }\r\n    }\r\n  }, [temperatura, lastAlertValue, cooldown]);\r\n  \r\n  // Determinar el estilo basado en el rango de temperatura\r\n  const getTemperatureStyle = () => {\r\n    if (temperatura > 32) return { color: 'red', fontWeight: 'bold' };\r\n    if (temperatura < 22) return { color: 'blue', fontWeight: 'bold' };\r\n    return { color: 'green' };\r\n  };\r\n  \r\n  return (\r\n    <div className=\"PruebasNotificaciones\">\r\n      <h2>Monitoreo De Temperatura</h2>\r\n      <div>\r\n        <label htmlFor=\"temperatura\">Temperatura (°C): </label>\r\n        <input \r\n          id=\"temperatura\"\r\n          type=\"number\" \r\n          value={temperatura} \r\n          onChange={handleChange} \r\n          step=\"0.1\"\r\n        />\r\n      </div>\r\n      \r\n      <p>Temperatura actual: <span style={getTemperatureStyle()}>{temperatura.toFixed(2)}°C</span></p>\r\n      \r\n      {temperatura < 22 && \r\n        <p style={{color: 'blue'}}>\r\n          ⚠️ Temperatura por debajo del rango normal (22°C - 32°C)\r\n        </p>\r\n      }\r\n      {temperatura > 32 && \r\n        <p style={{color: 'red'}}>\r\n          ⚠️ Temperatura por encima del rango normal (22°C - 32°C)\r\n        </p>\r\n      }\r\n      \r\n      {cooldown && \r\n        <p style={{color: 'gray'}}>\r\n          ⏱️ Esperando para enviar la siguiente alerta...\r\n        </p>\r\n      }\r\n      \r\n      {alertStatus && <p className=\"alert-status\">{alertStatus}</p>}\r\n      \r\n      {lastAlertValue !== null && (\r\n        <div style={{marginTop: '10px', fontSize: '0.9em', color: '#555'}}>\r\n          Última alerta enviada: {lastAlertValue.toFixed(2)}°C\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nfunction PruebasNotificaciones() {\r\n  const [temperatura, setTemperatura] = useState(25); // Valor inicial dentro del rango normal\r\n  \r\n  return (\r\n    <div>\r\n      <TemperaturaAlert temperatura={temperatura} setTemperatura={setTemperatura} />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default PruebasNotificaciones;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}