{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Roger\\\\Documents\\\\TT2_AVANCES\\\\prototipo-gecko\\\\frontend\\\\src\\\\pages\\\\pruebasNotificaciones.jsx\",\n  _s = $RefreshSig$();\nimport React, { Component } from 'react';\nimport { useTemperature } from './TemperatureContext'; // Importamos el contexto\n\n// Componente funcional que actúa como adaptador entre el contexto y el componente de clase\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction TemperaturaAlertAdapter(props) {\n  _s();\n  const {\n    temperatura,\n    setTemperatura\n  } = useTemperature();\n  return /*#__PURE__*/_jsxDEV(TemperaturaAlert, {\n    temperatura: temperatura,\n    setTemperatura: setTemperatura,\n    ...props\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 7,\n    columnNumber: 10\n  }, this);\n}\n_s(TemperaturaAlertAdapter, \"keMtaPmbdeQ6AU5ixvCwrYaY3m4=\", false, function () {\n  return [useTemperature];\n});\n_c = TemperaturaAlertAdapter;\nclass TemperaturaAlert extends Component {\n  constructor(props) {\n    super(props);\n    // Método para obtener la temperatura actual\n    this.getTemperature = () => {\n      return this.props.temperatura;\n    };\n    this.enviar_temperatura_alert = async temp => {\n      this.setState({\n        alertStatus: 'Enviando alerta...'\n      });\n      try {\n        // Asegurar que la temperatura se envía como string con 2 decimales\n        const temperaturaFormateada = temp.toFixed(2);\n        console.log(\"Enviando temperatura formateada:\", temperaturaFormateada);\n        const response = await fetch(\"http://localhost:5000/send-email\", {\n          method: \"POST\",\n          headers: {\n            \"Content-Type\": \"application/json\"\n          },\n          body: JSON.stringify({\n            temperatura: parseFloat(temperaturaFormateada) // Convertir a número de nuevo\n          })\n        });\n        const data = await response.json();\n        if (response.ok) {\n          console.log(\"Alerta enviada con éxito:\", data.message);\n          this.setState({\n            alertStatus: 'Alerta enviada con éxito',\n            lastAlertValue: temp,\n            cooldown: true\n          });\n\n          // Establecemos un tiempo de espera para evitar el spam de alertas\n          setTimeout(() => {\n            this.setState({\n              cooldown: false\n            });\n          }, 10000); // 10 segundos de cooldown\n        } else {\n          console.error(\"Error en la respuesta del servidor:\", data.message);\n          this.setState({\n            alertStatus: `Error: ${data.message}`\n          });\n        }\n      } catch (error) {\n        console.error(\"Error al enviar la alerta:\", error);\n        this.setState({\n          alertStatus: `Error de conexión: ${error.message}`\n        });\n      }\n    };\n    // Este manejador solo actualiza el input, no el valor de temperatura real\n    this.handleInputChange = e => {\n      this.setState({\n        inputValue: e.target.value\n      });\n    };\n    // Función para actualizar la temperatura cuando se presiona el botón\n    this.handleUpdateTemperature = () => {\n      const newTemperatura = parseFloat(this.state.inputValue);\n\n      // Verificar que es un número válido\n      if (!isNaN(newTemperatura)) {\n        this.props.setTemperatura(newTemperatura);\n      } else {\n        this.setState({\n          alertStatus: 'Por favor ingrese un número válido'\n        });\n        setTimeout(() => this.setState({\n          alertStatus: ''\n        }), 3000);\n      }\n    };\n    // Determinar el estilo basado en el rango de temperatura\n    this.getTemperatureStyle = () => {\n      const temperatura = this.getTemperature();\n      if (temperatura > 32) return {\n        color: 'red',\n        fontWeight: 'bold'\n      };\n      if (temperatura < 22) return {\n        color: 'blue',\n        fontWeight: 'bold'\n      };\n      return {\n        color: 'green'\n      };\n    };\n    this.state = {\n      inputValue: props.temperatura.toString(),\n      lastAlertValue: null,\n      alertStatus: '',\n      cooldown: false\n    };\n  }\n  // React lifecycle methods\n  componentDidUpdate(prevProps) {\n    const temperatura = this.getTemperature();\n    const {\n      lastAlertValue,\n      cooldown\n    } = this.state;\n\n    // Si cambió la temperatura, actualizar el input\n    if (prevProps.temperatura !== temperatura) {\n      this.setState({\n        inputValue: temperatura.toString()\n      });\n\n      // Lógica para verificar y enviar alertas\n      // Solo enviar alerta si la temperatura es válida (no NaN)\n      if (isNaN(temperatura)) return;\n\n      // Verificamos si está fuera del rango permitido\n      const fueraDeRango = temperatura < 22 || temperatura > 32;\n      if (fueraDeRango) {\n        // Verificamos si debemos enviar una nueva alerta\n        const debeEnviarAlerta =\n        // No hay una alerta previa\n        lastAlertValue === null ||\n        // La temperatura ha cambiado significativamente (más de 1 grado)\n        Math.abs(temperatura - lastAlertValue) >= 1 ||\n        // La temperatura cruzó el umbral (de caliente a frío o viceversa)\n        lastAlertValue > 32 && temperatura < 22 || lastAlertValue < 22 && temperatura > 32;\n\n        // Solo enviamos si debemos y no estamos en cooldown\n        if (debeEnviarAlerta && !cooldown) {\n          console.log(\"Enviando alerta por temperatura:\", temperatura);\n          this.enviar_temperatura_alert(temperatura);\n        }\n      } else {\n        // Si volvió al rango normal, reiniciamos para que la próxima vez envíe alerta\n        if (lastAlertValue !== null) {\n          this.setState({\n            lastAlertValue: null,\n            alertStatus: 'Temperatura normalizada'\n          });\n\n          // Después de 3 segundos, limpiamos el mensaje\n          setTimeout(() => {\n            if (this.getTemperature() >= 22 && this.getTemperature() <= 32) {\n              this.setState({\n                alertStatus: ''\n              });\n            }\n          }, 3000);\n        }\n      }\n    }\n  }\n  render() {\n    const {\n      inputValue,\n      alertStatus,\n      cooldown,\n      lastAlertValue\n    } = this.state;\n    const temperatura = this.getTemperature();\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"PruebasNotificaciones\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Monitoreo De Temperatura\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 150,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          display: 'flex',\n          alignItems: 'center',\n          gap: '10px',\n          marginBottom: '15px'\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"temperatura\",\n          children: \"Temperatura (\\xB0C): \"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 152,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          id: \"temperatura\",\n          type: \"number\",\n          value: inputValue,\n          onChange: this.handleInputChange,\n          step: \"0.1\",\n          style: {\n            width: '80px'\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 153,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: this.handleUpdateTemperature,\n          style: {\n            padding: '5px 15px',\n            backgroundColor: '#4CAF50',\n            color: 'white',\n            border: 'none',\n            borderRadius: '4px',\n            cursor: 'pointer'\n          },\n          children: \"Actualizar\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 161,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 151,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Temperatura actual: \", /*#__PURE__*/_jsxDEV(\"span\", {\n          style: this.getTemperatureStyle(),\n          children: [temperatura.toFixed(2), \"\\xB0C\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 176,\n          columnNumber: 32\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 176,\n        columnNumber: 9\n      }, this), temperatura < 22 && /*#__PURE__*/_jsxDEV(\"p\", {\n        style: {\n          color: 'blue'\n        },\n        children: \"\\u26A0\\uFE0F Temperatura por debajo del rango normal (22\\xB0C - 32\\xB0C)\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 179,\n        columnNumber: 11\n      }, this), temperatura > 32 && /*#__PURE__*/_jsxDEV(\"p\", {\n        style: {\n          color: 'red'\n        },\n        children: \"\\u26A0\\uFE0F Temperatura por encima del rango normal (22\\xB0C - 32\\xB0C)\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 184,\n        columnNumber: 11\n      }, this), cooldown && /*#__PURE__*/_jsxDEV(\"p\", {\n        style: {\n          color: 'gray'\n        },\n        children: \"\\u23F1\\uFE0F Esperando para enviar la siguiente alerta...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 190,\n        columnNumber: 11\n      }, this), alertStatus && /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"alert-status\",\n        children: alertStatus\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 195,\n        columnNumber: 25\n      }, this), lastAlertValue !== null && /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          marginTop: '10px',\n          fontSize: '0.9em',\n          color: '#555'\n        },\n        children: [\"\\xDAltima alerta enviada: \", lastAlertValue.toFixed(2), \"\\xB0C\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 198,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 149,\n      columnNumber: 7\n    }, this);\n  }\n}\n\n// Componente principal que ahora solo muestra el adaptador\nfunction PruebasNotificaciones() {\n  return /*#__PURE__*/_jsxDEV(TemperaturaAlertAdapter, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 209,\n    columnNumber: 10\n  }, this);\n}\n_c2 = PruebasNotificaciones;\nexport default PruebasNotificaciones;\nvar _c, _c2;\n$RefreshReg$(_c, \"TemperaturaAlertAdapter\");\n$RefreshReg$(_c2, \"PruebasNotificaciones\");","map":{"version":3,"names":["React","Component","useTemperature","jsxDEV","_jsxDEV","TemperaturaAlertAdapter","props","_s","temperatura","setTemperatura","TemperaturaAlert","fileName","_jsxFileName","lineNumber","columnNumber","_c","constructor","getTemperature","enviar_temperatura_alert","temp","setState","alertStatus","temperaturaFormateada","toFixed","console","log","response","fetch","method","headers","body","JSON","stringify","parseFloat","data","json","ok","message","lastAlertValue","cooldown","setTimeout","error","handleInputChange","e","inputValue","target","value","handleUpdateTemperature","newTemperatura","state","isNaN","getTemperatureStyle","color","fontWeight","toString","componentDidUpdate","prevProps","fueraDeRango","debeEnviarAlerta","Math","abs","render","className","children","style","display","alignItems","gap","marginBottom","htmlFor","id","type","onChange","step","width","onClick","padding","backgroundColor","border","borderRadius","cursor","marginTop","fontSize","PruebasNotificaciones","_c2","$RefreshReg$"],"sources":["C:/Users/Roger/Documents/TT2_AVANCES/prototipo-gecko/frontend/src/pages/pruebasNotificaciones.jsx"],"sourcesContent":["import React, { Component } from 'react';\r\nimport { useTemperature } from './TemperatureContext'; // Importamos el contexto\r\n\r\n// Componente funcional que actúa como adaptador entre el contexto y el componente de clase\r\nfunction TemperaturaAlertAdapter(props) {\r\n  const { temperatura, setTemperatura } = useTemperature();\r\n  return <TemperaturaAlert temperatura={temperatura} setTemperatura={setTemperatura} {...props} />;\r\n}\r\n\r\nclass TemperaturaAlert extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      inputValue: props.temperatura.toString(),\r\n      lastAlertValue: null,\r\n      alertStatus: '',\r\n      cooldown: false\r\n    };\r\n  }\r\n\r\n  // Método para obtener la temperatura actual\r\n  getTemperature = () => {\r\n    return this.props.temperatura;\r\n  }\r\n  \r\n  enviar_temperatura_alert = async (temp) => {\r\n    this.setState({ alertStatus: 'Enviando alerta...' });\r\n    try {\r\n      // Asegurar que la temperatura se envía como string con 2 decimales\r\n      const temperaturaFormateada = temp.toFixed(2);\r\n      \r\n      console.log(\"Enviando temperatura formateada:\", temperaturaFormateada);\r\n      \r\n      const response = await fetch(\"http://localhost:5000/send-email\", {\r\n        method: \"POST\",\r\n        headers: { \"Content-Type\": \"application/json\" },\r\n        body: JSON.stringify({ \r\n          temperatura: parseFloat(temperaturaFormateada) // Convertir a número de nuevo\r\n        }),\r\n      });\r\n      \r\n      const data = await response.json();\r\n      \r\n      if (response.ok) {\r\n        console.log(\"Alerta enviada con éxito:\", data.message);\r\n        this.setState({ \r\n          alertStatus: 'Alerta enviada con éxito',\r\n          lastAlertValue: temp,\r\n          cooldown: true\r\n        });\r\n        \r\n        // Establecemos un tiempo de espera para evitar el spam de alertas\r\n        setTimeout(() => {\r\n          this.setState({ cooldown: false });\r\n        }, 10000); // 10 segundos de cooldown\r\n        \r\n      } else {\r\n        console.error(\"Error en la respuesta del servidor:\", data.message);\r\n        this.setState({ alertStatus: `Error: ${data.message}` });\r\n      }\r\n    } catch (error) {\r\n      console.error(\"Error al enviar la alerta:\", error);\r\n      this.setState({ alertStatus: `Error de conexión: ${error.message}` });\r\n    }\r\n  };\r\n  \r\n  // Este manejador solo actualiza el input, no el valor de temperatura real\r\n  handleInputChange = (e) => {\r\n    this.setState({ inputValue: e.target.value });\r\n  };\r\n  \r\n  // Función para actualizar la temperatura cuando se presiona el botón\r\n  handleUpdateTemperature = () => {\r\n    const newTemperatura = parseFloat(this.state.inputValue);\r\n    \r\n    // Verificar que es un número válido\r\n    if (!isNaN(newTemperatura)) {\r\n      this.props.setTemperatura(newTemperatura);\r\n    } else {\r\n      this.setState({ alertStatus: 'Por favor ingrese un número válido' });\r\n      setTimeout(() => this.setState({ alertStatus: '' }), 3000);\r\n    }\r\n  };\r\n  \r\n  // Determinar el estilo basado en el rango de temperatura\r\n  getTemperatureStyle = () => {\r\n    const temperatura = this.getTemperature();\r\n    if (temperatura > 32) return { color: 'red', fontWeight: 'bold' };\r\n    if (temperatura < 22) return { color: 'blue', fontWeight: 'bold' };\r\n    return { color: 'green' };\r\n  };\r\n\r\n  // React lifecycle methods\r\n  componentDidUpdate(prevProps) {\r\n    const temperatura = this.getTemperature();\r\n    const { lastAlertValue, cooldown } = this.state;\r\n\r\n    // Si cambió la temperatura, actualizar el input\r\n    if (prevProps.temperatura !== temperatura) {\r\n      this.setState({ inputValue: temperatura.toString() });\r\n      \r\n      // Lógica para verificar y enviar alertas\r\n      // Solo enviar alerta si la temperatura es válida (no NaN)\r\n      if (isNaN(temperatura)) return;\r\n      \r\n      // Verificamos si está fuera del rango permitido\r\n      const fueraDeRango = temperatura < 22 || temperatura > 32;\r\n      \r\n      if (fueraDeRango) {\r\n        // Verificamos si debemos enviar una nueva alerta\r\n        const debeEnviarAlerta = \r\n          // No hay una alerta previa\r\n          lastAlertValue === null || \r\n          // La temperatura ha cambiado significativamente (más de 1 grado)\r\n          Math.abs(temperatura - lastAlertValue) >= 1 || \r\n          // La temperatura cruzó el umbral (de caliente a frío o viceversa)\r\n          (lastAlertValue > 32 && temperatura < 22) || \r\n          (lastAlertValue < 22 && temperatura > 32);\r\n        \r\n        // Solo enviamos si debemos y no estamos en cooldown\r\n        if (debeEnviarAlerta && !cooldown) {\r\n          console.log(\"Enviando alerta por temperatura:\", temperatura);\r\n          this.enviar_temperatura_alert(temperatura);\r\n        }\r\n      } else {\r\n        // Si volvió al rango normal, reiniciamos para que la próxima vez envíe alerta\r\n        if (lastAlertValue !== null) {\r\n          this.setState({ \r\n            lastAlertValue: null,\r\n            alertStatus: 'Temperatura normalizada'\r\n          });\r\n          \r\n          // Después de 3 segundos, limpiamos el mensaje\r\n          setTimeout(() => {\r\n            if (this.getTemperature() >= 22 && this.getTemperature() <= 32) {\r\n              this.setState({ alertStatus: '' });\r\n            }\r\n          }, 3000);\r\n        }\r\n      }\r\n    }\r\n  }\r\n  \r\n  render() {\r\n    const { inputValue, alertStatus, cooldown, lastAlertValue } = this.state;\r\n    const temperatura = this.getTemperature();\r\n    \r\n    return (\r\n      <div className=\"PruebasNotificaciones\">\r\n        <h2>Monitoreo De Temperatura</h2>\r\n        <div style={{ display: 'flex', alignItems: 'center', gap: '10px', marginBottom: '15px' }}>\r\n          <label htmlFor=\"temperatura\">Temperatura (°C): </label>\r\n          <input \r\n            id=\"temperatura\"\r\n            type=\"number\" \r\n            value={inputValue} \r\n            onChange={this.handleInputChange} \r\n            step=\"0.1\"\r\n            style={{ width: '80px' }}\r\n          />\r\n          <button \r\n            onClick={this.handleUpdateTemperature}\r\n            style={{\r\n              padding: '5px 15px',\r\n              backgroundColor: '#4CAF50',\r\n              color: 'white',\r\n              border: 'none',\r\n              borderRadius: '4px',\r\n              cursor: 'pointer'\r\n            }}\r\n          >\r\n            Actualizar\r\n          </button>\r\n        </div>\r\n        \r\n        <p>Temperatura actual: <span style={this.getTemperatureStyle()}>{temperatura.toFixed(2)}°C</span></p>\r\n        \r\n        {temperatura < 22 && \r\n          <p style={{color: 'blue'}}>\r\n            ⚠️ Temperatura por debajo del rango normal (22°C - 32°C)\r\n          </p>\r\n        }\r\n        {temperatura > 32 && \r\n          <p style={{color: 'red'}}>\r\n            ⚠️ Temperatura por encima del rango normal (22°C - 32°C)\r\n          </p>\r\n        }\r\n        \r\n        {cooldown && \r\n          <p style={{color: 'gray'}}>\r\n            ⏱️ Esperando para enviar la siguiente alerta...\r\n          </p>\r\n        }\r\n        \r\n        {alertStatus && <p className=\"alert-status\">{alertStatus}</p>}\r\n        \r\n        {lastAlertValue !== null && (\r\n          <div style={{marginTop: '10px', fontSize: '0.9em', color: '#555'}}>\r\n            Última alerta enviada: {lastAlertValue.toFixed(2)}°C\r\n          </div>\r\n        )}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\n// Componente principal que ahora solo muestra el adaptador\r\nfunction PruebasNotificaciones() {\r\n  return <TemperaturaAlertAdapter />;\r\n}\r\n\r\nexport default PruebasNotificaciones;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}