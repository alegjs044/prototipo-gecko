{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Roger\\\\Documents\\\\TT2_AVANCES\\\\prototipo-gecko\\\\frontend\\\\src\\\\pages\\\\TemperatureAlert.js\";\nimport React, { Component } from 'react';\nimport TemperatureUtility from './TemperatureUtility';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nclass TemperatureAlert extends Component {\n  constructor(props) {\n    super(props);\n    // Método para obtener la temperatura actual desde el utilitario\n    this.getTemperature = () => {\n      return TemperatureUtility.getTemperature();\n    };\n    this.enviar_temperatura_alert = async temp => {\n      this.setState({\n        alertStatus: 'Enviando alerta...'\n      });\n      try {\n        // Asegurar que la temperatura se envía como string con 2 decimales\n        const temperaturaFormateada = temp.toFixed(2);\n        console.log(\"Enviando temperatura formateada:\", temperaturaFormateada);\n        const response = await fetch(\"http://localhost:5000/send-email\", {\n          method: \"POST\",\n          headers: {\n            \"Content-Type\": \"application/json\"\n          },\n          body: JSON.stringify({\n            temperatura: parseFloat(temperaturaFormateada),\n            minTemp: TemperatureUtility.getMinTemperature(),\n            maxTemp: TemperatureUtility.getMaxTemperature()\n          })\n        });\n        const data = await response.json();\n        if (response.ok) {\n          console.log(\"Alerta enviada con éxito:\", data.message);\n          this.setState({\n            alertStatus: 'Alerta enviada con éxito',\n            lastAlertValue: temp,\n            cooldown: true\n          });\n\n          // Establecemos un tiempo de espera para evitar el spam de alertas\n          setTimeout(() => {\n            this.setState({\n              cooldown: false\n            });\n          }, 10000); // 10 segundos de cooldown\n        } else {\n          console.error(\"Error en la respuesta del servidor:\", data.message);\n          this.setState({\n            alertStatus: `Error: ${data.message}`\n          });\n        }\n      } catch (error) {\n        console.error(\"Error al enviar la alerta:\", error);\n        this.setState({\n          alertStatus: `Error de conexión: ${error.message}`\n        });\n      }\n    };\n    // Este manejador solo actualiza el input, no el valor de temperatura real\n    this.handleInputChange = e => {\n      this.setState({\n        inputValue: e.target.value\n      });\n    };\n    // Función para actualizar la temperatura cuando se presiona el botón\n    this.handleUpdateTemperature = () => {\n      const newTemperatura = parseFloat(this.state.inputValue);\n\n      // Verificar que es un número válido\n      if (!isNaN(newTemperatura)) {\n        // Usamos el utilitario directamente para actualizar y notificar a todos los componentes\n        const isOutOfRange = TemperatureUtility.setTemperature(newTemperatura);\n\n        // Si está fuera de rango y no estamos en cooldown, enviamos alerta\n        if (isOutOfRange && !this.state.cooldown && (this.state.lastAlertValue === null || Math.abs(newTemperatura - this.state.lastAlertValue) >= 1)) {\n          this.enviar_temperatura_alert(newTemperatura);\n        }\n      } else {\n        this.setState({\n          alertStatus: 'Por favor ingrese un número válido'\n        });\n        setTimeout(() => this.setState({\n          alertStatus: ''\n        }), 3000);\n      }\n    };\n    // Determinar el estilo basado en el rango de temperatura\n    this.getTemperatureStyle = () => {\n      const temperatura = this.getTemperature();\n      const minTemp = TemperatureUtility.getMinTemperature();\n      const maxTemp = TemperatureUtility.getMaxTemperature();\n      if (temperatura > maxTemp) return {\n        color: 'red',\n        fontWeight: 'bold'\n      };\n      if (temperatura < minTemp) return {\n        color: 'blue',\n        fontWeight: 'bold'\n      };\n      return {\n        color: 'green'\n      };\n    };\n    this.checkAndSendAlert = temperatura => {\n      const {\n        lastAlertValue,\n        cooldown\n      } = this.state;\n      const minTemp = TemperatureUtility.getMinTemperature();\n      const maxTemp = TemperatureUtility.getMaxTemperature();\n\n      // Solo enviar alerta si la temperatura es válida (no NaN)\n      if (isNaN(temperatura)) return;\n\n      // Verificamos si está fuera del rango permitido\n      const fueraDeRango = temperatura < minTemp || temperatura > maxTemp;\n      if (fueraDeRango) {\n        // Verificamos si debemos enviar una nueva alerta\n        const debeEnviarAlerta =\n        // No hay una alerta previa\n        lastAlertValue === null ||\n        // La temperatura ha cambiado significativamente (más de 1 grado)\n        Math.abs(temperatura - lastAlertValue) >= 1 ||\n        // La temperatura cruzó el umbral (de caliente a frío o viceversa)\n        lastAlertValue > maxTemp && temperatura < minTemp || lastAlertValue < minTemp && temperatura > maxTemp;\n\n        // Solo enviamos si debemos y no estamos en cooldown\n        if (debeEnviarAlerta && !cooldown) {\n          console.log(\"Enviando alerta por temperatura:\", temperatura);\n          this.enviar_temperatura_alert(temperatura);\n        }\n      } else {\n        // Si volvió al rango normal, reiniciamos para que la próxima vez envíe alerta\n        if (lastAlertValue !== null) {\n          this.setState({\n            lastAlertValue: null,\n            alertStatus: 'Temperatura normalizada'\n          });\n\n          // Después de 3 segundos, limpiamos el mensaje\n          setTimeout(() => {\n            const currentTemp = this.getTemperature();\n            if (currentTemp >= minTemp && currentTemp <= maxTemp) {\n              this.setState({\n                alertStatus: ''\n              });\n            }\n          }, 3000);\n        }\n      }\n    };\n    this.state = {\n      inputValue: TemperatureUtility.getTemperature().toString(),\n      lastAlertValue: null,\n      alertStatus: '',\n      cooldown: false\n    };\n  }\n  // React lifecycle methods\n  componentDidMount() {\n    // Suscribimos a cambios de temperatura\n    this.unsubscribeTemp = TemperatureUtility.subscribeToTemperature(newTemp => {\n      this.setState({\n        inputValue: newTemp.toString()\n      });\n      this.checkAndSendAlert(newTemp);\n    });\n  }\n  componentWillUnmount() {\n    // Limpiamos las suscripciones\n    if (this.unsubscribeTemp) this.unsubscribeTemp();\n  }\n  render() {\n    const {\n      inputValue,\n      alertStatus,\n      cooldown,\n      lastAlertValue\n    } = this.state;\n    const temperatura = this.getTemperature();\n    const minTemp = TemperatureUtility.getMinTemperature();\n    const maxTemp = TemperatureUtility.getMaxTemperature();\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"PruebasNotificaciones\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Monitoreo De Temperatura\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 168,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          display: 'flex',\n          alignItems: 'center',\n          gap: '10px',\n          marginBottom: '15px'\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"temperatura\",\n          children: \"Temperatura (\\xB0C): \"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 170,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          id: \"temperatura\",\n          type: \"number\",\n          value: inputValue,\n          onChange: this.handleInputChange,\n          step: \"0.1\",\n          style: {\n            width: '80px'\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 171,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: this.handleUpdateTemperature,\n          style: {\n            padding: '5px 15px',\n            backgroundColor: '#4CAF50',\n            color: 'white',\n            border: 'none',\n            borderRadius: '4px',\n            cursor: 'pointer'\n          },\n          children: \"Actualizar\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 179,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 169,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Temperatura actual: \", /*#__PURE__*/_jsxDEV(\"span\", {\n          style: this.getTemperatureStyle(),\n          children: [temperatura.toFixed(2), \"\\xB0C\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 194,\n          columnNumber: 32\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 194,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Rango normal: \", minTemp, \"\\xB0C - \", maxTemp, \"\\xB0C\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 195,\n        columnNumber: 9\n      }, this), temperatura < minTemp && /*#__PURE__*/_jsxDEV(\"p\", {\n        style: {\n          color: 'blue'\n        },\n        children: [\"\\u26A0\\uFE0F Temperatura por debajo del rango normal (\", minTemp, \"\\xB0C - \", maxTemp, \"\\xB0C)\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 198,\n        columnNumber: 11\n      }, this), temperatura > maxTemp && /*#__PURE__*/_jsxDEV(\"p\", {\n        style: {\n          color: 'red'\n        },\n        children: [\"\\u26A0\\uFE0F Temperatura por encima del rango normal (\", minTemp, \"\\xB0C - \", maxTemp, \"\\xB0C)\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 203,\n        columnNumber: 11\n      }, this), cooldown && /*#__PURE__*/_jsxDEV(\"p\", {\n        style: {\n          color: 'gray'\n        },\n        children: \"\\u23F1\\uFE0F Esperando para enviar la siguiente alerta...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 209,\n        columnNumber: 11\n      }, this), alertStatus && /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"alert-status\",\n        children: alertStatus\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 214,\n        columnNumber: 25\n      }, this), lastAlertValue !== null && /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          marginTop: '10px',\n          fontSize: '0.9em',\n          color: '#555'\n        },\n        children: [\"\\xDAltima alerta enviada: \", lastAlertValue.toFixed(2), \"\\xB0C\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 217,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 167,\n      columnNumber: 7\n    }, this);\n  }\n}\nexport default TemperatureAlert;","map":{"version":3,"names":["React","Component","TemperatureUtility","jsxDEV","_jsxDEV","TemperatureAlert","constructor","props","getTemperature","enviar_temperatura_alert","temp","setState","alertStatus","temperaturaFormateada","toFixed","console","log","response","fetch","method","headers","body","JSON","stringify","temperatura","parseFloat","minTemp","getMinTemperature","maxTemp","getMaxTemperature","data","json","ok","message","lastAlertValue","cooldown","setTimeout","error","handleInputChange","e","inputValue","target","value","handleUpdateTemperature","newTemperatura","state","isNaN","isOutOfRange","setTemperature","Math","abs","getTemperatureStyle","color","fontWeight","checkAndSendAlert","fueraDeRango","debeEnviarAlerta","currentTemp","toString","componentDidMount","unsubscribeTemp","subscribeToTemperature","newTemp","componentWillUnmount","render","className","children","fileName","_jsxFileName","lineNumber","columnNumber","style","display","alignItems","gap","marginBottom","htmlFor","id","type","onChange","step","width","onClick","padding","backgroundColor","border","borderRadius","cursor","marginTop","fontSize"],"sources":["C:/Users/Roger/Documents/TT2_AVANCES/prototipo-gecko/frontend/src/pages/TemperatureAlert.js"],"sourcesContent":["import React, { Component } from 'react';\r\nimport TemperatureUtility from './TemperatureUtility';\r\n\r\nclass TemperatureAlert extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      inputValue: TemperatureUtility.getTemperature().toString(),\r\n      lastAlertValue: null,\r\n      alertStatus: '',\r\n      cooldown: false\r\n    };\r\n  }\r\n\r\n  // Método para obtener la temperatura actual desde el utilitario\r\n  getTemperature = () => {\r\n    return TemperatureUtility.getTemperature();\r\n  }\r\n  \r\n  enviar_temperatura_alert = async (temp) => {\r\n    this.setState({ alertStatus: 'Enviando alerta...' });\r\n    try {\r\n      // Asegurar que la temperatura se envía como string con 2 decimales\r\n      const temperaturaFormateada = temp.toFixed(2);\r\n      \r\n      console.log(\"Enviando temperatura formateada:\", temperaturaFormateada);\r\n      \r\n      const response = await fetch(\"http://localhost:5000/send-email\", {\r\n        method: \"POST\",\r\n        headers: { \"Content-Type\": \"application/json\" },\r\n        body: JSON.stringify({ \r\n          temperatura: parseFloat(temperaturaFormateada),\r\n          minTemp: TemperatureUtility.getMinTemperature(),\r\n          maxTemp: TemperatureUtility.getMaxTemperature()\r\n        }),\r\n      });\r\n      \r\n      const data = await response.json();\r\n      \r\n      if (response.ok) {\r\n        console.log(\"Alerta enviada con éxito:\", data.message);\r\n        this.setState({ \r\n          alertStatus: 'Alerta enviada con éxito',\r\n          lastAlertValue: temp,\r\n          cooldown: true\r\n        });\r\n        \r\n        // Establecemos un tiempo de espera para evitar el spam de alertas\r\n        setTimeout(() => {\r\n          this.setState({ cooldown: false });\r\n        }, 10000); // 10 segundos de cooldown\r\n        \r\n      } else {\r\n        console.error(\"Error en la respuesta del servidor:\", data.message);\r\n        this.setState({ alertStatus: `Error: ${data.message}` });\r\n      }\r\n    } catch (error) {\r\n      console.error(\"Error al enviar la alerta:\", error);\r\n      this.setState({ alertStatus: `Error de conexión: ${error.message}` });\r\n    }\r\n  };\r\n  \r\n  // Este manejador solo actualiza el input, no el valor de temperatura real\r\n  handleInputChange = (e) => {\r\n    this.setState({ inputValue: e.target.value });\r\n  };\r\n  \r\n  // Función para actualizar la temperatura cuando se presiona el botón\r\n  handleUpdateTemperature = () => {\r\n    const newTemperatura = parseFloat(this.state.inputValue);\r\n    \r\n    // Verificar que es un número válido\r\n    if (!isNaN(newTemperatura)) {\r\n      // Usamos el utilitario directamente para actualizar y notificar a todos los componentes\r\n      const isOutOfRange = TemperatureUtility.setTemperature(newTemperatura);\r\n      \r\n      // Si está fuera de rango y no estamos en cooldown, enviamos alerta\r\n      if (isOutOfRange && !this.state.cooldown && \r\n          (this.state.lastAlertValue === null || \r\n           Math.abs(newTemperatura - this.state.lastAlertValue) >= 1)) {\r\n        this.enviar_temperatura_alert(newTemperatura);\r\n      }\r\n    } else {\r\n      this.setState({ alertStatus: 'Por favor ingrese un número válido' });\r\n      setTimeout(() => this.setState({ alertStatus: '' }), 3000);\r\n    }\r\n  };\r\n  \r\n  // Determinar el estilo basado en el rango de temperatura\r\n  getTemperatureStyle = () => {\r\n    const temperatura = this.getTemperature();\r\n    const minTemp = TemperatureUtility.getMinTemperature();\r\n    const maxTemp = TemperatureUtility.getMaxTemperature();\r\n    \r\n    if (temperatura > maxTemp) return { color: 'red', fontWeight: 'bold' };\r\n    if (temperatura < minTemp) return { color: 'blue', fontWeight: 'bold' };\r\n    return { color: 'green' };\r\n  };\r\n\r\n  // React lifecycle methods\r\n  componentDidMount() {\r\n    // Suscribimos a cambios de temperatura\r\n    this.unsubscribeTemp = TemperatureUtility.subscribeToTemperature((newTemp) => {\r\n      this.setState({ inputValue: newTemp.toString() });\r\n      this.checkAndSendAlert(newTemp);\r\n    });\r\n  }\r\n  \r\n  componentWillUnmount() {\r\n    // Limpiamos las suscripciones\r\n    if (this.unsubscribeTemp) this.unsubscribeTemp();\r\n  }\r\n  \r\n  checkAndSendAlert = (temperatura) => {\r\n    const { lastAlertValue, cooldown } = this.state;\r\n    const minTemp = TemperatureUtility.getMinTemperature();\r\n    const maxTemp = TemperatureUtility.getMaxTemperature();\r\n    \r\n    // Solo enviar alerta si la temperatura es válida (no NaN)\r\n    if (isNaN(temperatura)) return;\r\n    \r\n    // Verificamos si está fuera del rango permitido\r\n    const fueraDeRango = temperatura < minTemp || temperatura > maxTemp;\r\n    \r\n    if (fueraDeRango) {\r\n      // Verificamos si debemos enviar una nueva alerta\r\n      const debeEnviarAlerta = \r\n        // No hay una alerta previa\r\n        lastAlertValue === null || \r\n        // La temperatura ha cambiado significativamente (más de 1 grado)\r\n        Math.abs(temperatura - lastAlertValue) >= 1 || \r\n        // La temperatura cruzó el umbral (de caliente a frío o viceversa)\r\n        (lastAlertValue > maxTemp && temperatura < minTemp) || \r\n        (lastAlertValue < minTemp && temperatura > maxTemp);\r\n      \r\n      // Solo enviamos si debemos y no estamos en cooldown\r\n      if (debeEnviarAlerta && !cooldown) {\r\n        console.log(\"Enviando alerta por temperatura:\", temperatura);\r\n        this.enviar_temperatura_alert(temperatura);\r\n      }\r\n    } else {\r\n      // Si volvió al rango normal, reiniciamos para que la próxima vez envíe alerta\r\n      if (lastAlertValue !== null) {\r\n        this.setState({ \r\n          lastAlertValue: null,\r\n          alertStatus: 'Temperatura normalizada'\r\n        });\r\n        \r\n        // Después de 3 segundos, limpiamos el mensaje\r\n        setTimeout(() => {\r\n          const currentTemp = this.getTemperature();\r\n          if (currentTemp >= minTemp && currentTemp <= maxTemp) {\r\n            this.setState({ alertStatus: '' });\r\n          }\r\n        }, 3000);\r\n      }\r\n    }\r\n  }\r\n  \r\n  render() {\r\n    const { inputValue, alertStatus, cooldown, lastAlertValue } = this.state;\r\n    const temperatura = this.getTemperature();\r\n    const minTemp = TemperatureUtility.getMinTemperature();\r\n    const maxTemp = TemperatureUtility.getMaxTemperature();\r\n    \r\n    return (\r\n      <div className=\"PruebasNotificaciones\">\r\n        <h2>Monitoreo De Temperatura</h2>\r\n        <div style={{ display: 'flex', alignItems: 'center', gap: '10px', marginBottom: '15px' }}>\r\n          <label htmlFor=\"temperatura\">Temperatura (°C): </label>\r\n          <input \r\n            id=\"temperatura\"\r\n            type=\"number\" \r\n            value={inputValue} \r\n            onChange={this.handleInputChange} \r\n            step=\"0.1\"\r\n            style={{ width: '80px' }}\r\n          />\r\n          <button \r\n            onClick={this.handleUpdateTemperature}\r\n            style={{\r\n              padding: '5px 15px',\r\n              backgroundColor: '#4CAF50',\r\n              color: 'white',\r\n              border: 'none',\r\n              borderRadius: '4px',\r\n              cursor: 'pointer'\r\n            }}\r\n          >\r\n            Actualizar\r\n          </button>\r\n        </div>\r\n        \r\n        <p>Temperatura actual: <span style={this.getTemperatureStyle()}>{temperatura.toFixed(2)}°C</span></p>\r\n        <p>Rango normal: {minTemp}°C - {maxTemp}°C</p>\r\n        \r\n        {temperatura < minTemp && \r\n          <p style={{color: 'blue'}}>\r\n            ⚠️ Temperatura por debajo del rango normal ({minTemp}°C - {maxTemp}°C)\r\n          </p>\r\n        }\r\n        {temperatura > maxTemp && \r\n          <p style={{color: 'red'}}>\r\n            ⚠️ Temperatura por encima del rango normal ({minTemp}°C - {maxTemp}°C)\r\n          </p>\r\n        }\r\n        \r\n        {cooldown && \r\n          <p style={{color: 'gray'}}>\r\n            ⏱️ Esperando para enviar la siguiente alerta...\r\n          </p>\r\n        }\r\n        \r\n        {alertStatus && <p className=\"alert-status\">{alertStatus}</p>}\r\n        \r\n        {lastAlertValue !== null && (\r\n          <div style={{marginTop: '10px', fontSize: '0.9em', color: '#555'}}>\r\n            Última alerta enviada: {lastAlertValue.toFixed(2)}°C\r\n          </div>\r\n        )}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default TemperatureAlert;"],"mappings":";AAAA,OAAOA,KAAK,IAAIC,SAAS,QAAQ,OAAO;AACxC,OAAOC,kBAAkB,MAAM,sBAAsB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEtD,MAAMC,gBAAgB,SAASJ,SAAS,CAAC;EACvCK,WAAWA,CAACC,KAAK,EAAE;IACjB,KAAK,CAACA,KAAK,CAAC;IASd;IAAA,KACAC,cAAc,GAAG,MAAM;MACrB,OAAON,kBAAkB,CAACM,cAAc,CAAC,CAAC;IAC5C,CAAC;IAAA,KAEDC,wBAAwB,GAAG,MAAOC,IAAI,IAAK;MACzC,IAAI,CAACC,QAAQ,CAAC;QAAEC,WAAW,EAAE;MAAqB,CAAC,CAAC;MACpD,IAAI;QACF;QACA,MAAMC,qBAAqB,GAAGH,IAAI,CAACI,OAAO,CAAC,CAAC,CAAC;QAE7CC,OAAO,CAACC,GAAG,CAAC,kCAAkC,EAAEH,qBAAqB,CAAC;QAEtE,MAAMI,QAAQ,GAAG,MAAMC,KAAK,CAAC,kCAAkC,EAAE;UAC/DC,MAAM,EAAE,MAAM;UACdC,OAAO,EAAE;YAAE,cAAc,EAAE;UAAmB,CAAC;UAC/CC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;YACnBC,WAAW,EAAEC,UAAU,CAACZ,qBAAqB,CAAC;YAC9Ca,OAAO,EAAExB,kBAAkB,CAACyB,iBAAiB,CAAC,CAAC;YAC/CC,OAAO,EAAE1B,kBAAkB,CAAC2B,iBAAiB,CAAC;UAChD,CAAC;QACH,CAAC,CAAC;QAEF,MAAMC,IAAI,GAAG,MAAMb,QAAQ,CAACc,IAAI,CAAC,CAAC;QAElC,IAAId,QAAQ,CAACe,EAAE,EAAE;UACfjB,OAAO,CAACC,GAAG,CAAC,2BAA2B,EAAEc,IAAI,CAACG,OAAO,CAAC;UACtD,IAAI,CAACtB,QAAQ,CAAC;YACZC,WAAW,EAAE,0BAA0B;YACvCsB,cAAc,EAAExB,IAAI;YACpByB,QAAQ,EAAE;UACZ,CAAC,CAAC;;UAEF;UACAC,UAAU,CAAC,MAAM;YACf,IAAI,CAACzB,QAAQ,CAAC;cAAEwB,QAAQ,EAAE;YAAM,CAAC,CAAC;UACpC,CAAC,EAAE,KAAK,CAAC,CAAC,CAAC;QAEb,CAAC,MAAM;UACLpB,OAAO,CAACsB,KAAK,CAAC,qCAAqC,EAAEP,IAAI,CAACG,OAAO,CAAC;UAClE,IAAI,CAACtB,QAAQ,CAAC;YAAEC,WAAW,EAAE,UAAUkB,IAAI,CAACG,OAAO;UAAG,CAAC,CAAC;QAC1D;MACF,CAAC,CAAC,OAAOI,KAAK,EAAE;QACdtB,OAAO,CAACsB,KAAK,CAAC,4BAA4B,EAAEA,KAAK,CAAC;QAClD,IAAI,CAAC1B,QAAQ,CAAC;UAAEC,WAAW,EAAE,sBAAsByB,KAAK,CAACJ,OAAO;QAAG,CAAC,CAAC;MACvE;IACF,CAAC;IAED;IAAA,KACAK,iBAAiB,GAAIC,CAAC,IAAK;MACzB,IAAI,CAAC5B,QAAQ,CAAC;QAAE6B,UAAU,EAAED,CAAC,CAACE,MAAM,CAACC;MAAM,CAAC,CAAC;IAC/C,CAAC;IAED;IAAA,KACAC,uBAAuB,GAAG,MAAM;MAC9B,MAAMC,cAAc,GAAGnB,UAAU,CAAC,IAAI,CAACoB,KAAK,CAACL,UAAU,CAAC;;MAExD;MACA,IAAI,CAACM,KAAK,CAACF,cAAc,CAAC,EAAE;QAC1B;QACA,MAAMG,YAAY,GAAG7C,kBAAkB,CAAC8C,cAAc,CAACJ,cAAc,CAAC;;QAEtE;QACA,IAAIG,YAAY,IAAI,CAAC,IAAI,CAACF,KAAK,CAACV,QAAQ,KACnC,IAAI,CAACU,KAAK,CAACX,cAAc,KAAK,IAAI,IAClCe,IAAI,CAACC,GAAG,CAACN,cAAc,GAAG,IAAI,CAACC,KAAK,CAACX,cAAc,CAAC,IAAI,CAAC,CAAC,EAAE;UAC/D,IAAI,CAACzB,wBAAwB,CAACmC,cAAc,CAAC;QAC/C;MACF,CAAC,MAAM;QACL,IAAI,CAACjC,QAAQ,CAAC;UAAEC,WAAW,EAAE;QAAqC,CAAC,CAAC;QACpEwB,UAAU,CAAC,MAAM,IAAI,CAACzB,QAAQ,CAAC;UAAEC,WAAW,EAAE;QAAG,CAAC,CAAC,EAAE,IAAI,CAAC;MAC5D;IACF,CAAC;IAED;IAAA,KACAuC,mBAAmB,GAAG,MAAM;MAC1B,MAAM3B,WAAW,GAAG,IAAI,CAAChB,cAAc,CAAC,CAAC;MACzC,MAAMkB,OAAO,GAAGxB,kBAAkB,CAACyB,iBAAiB,CAAC,CAAC;MACtD,MAAMC,OAAO,GAAG1B,kBAAkB,CAAC2B,iBAAiB,CAAC,CAAC;MAEtD,IAAIL,WAAW,GAAGI,OAAO,EAAE,OAAO;QAAEwB,KAAK,EAAE,KAAK;QAAEC,UAAU,EAAE;MAAO,CAAC;MACtE,IAAI7B,WAAW,GAAGE,OAAO,EAAE,OAAO;QAAE0B,KAAK,EAAE,MAAM;QAAEC,UAAU,EAAE;MAAO,CAAC;MACvE,OAAO;QAAED,KAAK,EAAE;MAAQ,CAAC;IAC3B,CAAC;IAAA,KAgBDE,iBAAiB,GAAI9B,WAAW,IAAK;MACnC,MAAM;QAAEU,cAAc;QAAEC;MAAS,CAAC,GAAG,IAAI,CAACU,KAAK;MAC/C,MAAMnB,OAAO,GAAGxB,kBAAkB,CAACyB,iBAAiB,CAAC,CAAC;MACtD,MAAMC,OAAO,GAAG1B,kBAAkB,CAAC2B,iBAAiB,CAAC,CAAC;;MAEtD;MACA,IAAIiB,KAAK,CAACtB,WAAW,CAAC,EAAE;;MAExB;MACA,MAAM+B,YAAY,GAAG/B,WAAW,GAAGE,OAAO,IAAIF,WAAW,GAAGI,OAAO;MAEnE,IAAI2B,YAAY,EAAE;QAChB;QACA,MAAMC,gBAAgB;QACpB;QACAtB,cAAc,KAAK,IAAI;QACvB;QACAe,IAAI,CAACC,GAAG,CAAC1B,WAAW,GAAGU,cAAc,CAAC,IAAI,CAAC;QAC3C;QACCA,cAAc,GAAGN,OAAO,IAAIJ,WAAW,GAAGE,OAAQ,IAClDQ,cAAc,GAAGR,OAAO,IAAIF,WAAW,GAAGI,OAAQ;;QAErD;QACA,IAAI4B,gBAAgB,IAAI,CAACrB,QAAQ,EAAE;UACjCpB,OAAO,CAACC,GAAG,CAAC,kCAAkC,EAAEQ,WAAW,CAAC;UAC5D,IAAI,CAACf,wBAAwB,CAACe,WAAW,CAAC;QAC5C;MACF,CAAC,MAAM;QACL;QACA,IAAIU,cAAc,KAAK,IAAI,EAAE;UAC3B,IAAI,CAACvB,QAAQ,CAAC;YACZuB,cAAc,EAAE,IAAI;YACpBtB,WAAW,EAAE;UACf,CAAC,CAAC;;UAEF;UACAwB,UAAU,CAAC,MAAM;YACf,MAAMqB,WAAW,GAAG,IAAI,CAACjD,cAAc,CAAC,CAAC;YACzC,IAAIiD,WAAW,IAAI/B,OAAO,IAAI+B,WAAW,IAAI7B,OAAO,EAAE;cACpD,IAAI,CAACjB,QAAQ,CAAC;gBAAEC,WAAW,EAAE;cAAG,CAAC,CAAC;YACpC;UACF,CAAC,EAAE,IAAI,CAAC;QACV;MACF;IACF,CAAC;IAvJC,IAAI,CAACiC,KAAK,GAAG;MACXL,UAAU,EAAEtC,kBAAkB,CAACM,cAAc,CAAC,CAAC,CAACkD,QAAQ,CAAC,CAAC;MAC1DxB,cAAc,EAAE,IAAI;MACpBtB,WAAW,EAAE,EAAE;MACfuB,QAAQ,EAAE;IACZ,CAAC;EACH;EAuFA;EACAwB,iBAAiBA,CAAA,EAAG;IAClB;IACA,IAAI,CAACC,eAAe,GAAG1D,kBAAkB,CAAC2D,sBAAsB,CAAEC,OAAO,IAAK;MAC5E,IAAI,CAACnD,QAAQ,CAAC;QAAE6B,UAAU,EAAEsB,OAAO,CAACJ,QAAQ,CAAC;MAAE,CAAC,CAAC;MACjD,IAAI,CAACJ,iBAAiB,CAACQ,OAAO,CAAC;IACjC,CAAC,CAAC;EACJ;EAEAC,oBAAoBA,CAAA,EAAG;IACrB;IACA,IAAI,IAAI,CAACH,eAAe,EAAE,IAAI,CAACA,eAAe,CAAC,CAAC;EAClD;EAgDAI,MAAMA,CAAA,EAAG;IACP,MAAM;MAAExB,UAAU;MAAE5B,WAAW;MAAEuB,QAAQ;MAAED;IAAe,CAAC,GAAG,IAAI,CAACW,KAAK;IACxE,MAAMrB,WAAW,GAAG,IAAI,CAAChB,cAAc,CAAC,CAAC;IACzC,MAAMkB,OAAO,GAAGxB,kBAAkB,CAACyB,iBAAiB,CAAC,CAAC;IACtD,MAAMC,OAAO,GAAG1B,kBAAkB,CAAC2B,iBAAiB,CAAC,CAAC;IAEtD,oBACEzB,OAAA;MAAK6D,SAAS,EAAC,uBAAuB;MAAAC,QAAA,gBACpC9D,OAAA;QAAA8D,QAAA,EAAI;MAAwB;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC,eACjClE,OAAA;QAAKmE,KAAK,EAAE;UAAEC,OAAO,EAAE,MAAM;UAAEC,UAAU,EAAE,QAAQ;UAAEC,GAAG,EAAE,MAAM;UAAEC,YAAY,EAAE;QAAO,CAAE;QAAAT,QAAA,gBACvF9D,OAAA;UAAOwE,OAAO,EAAC,aAAa;UAAAV,QAAA,EAAC;QAAkB;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAO,CAAC,eACvDlE,OAAA;UACEyE,EAAE,EAAC,aAAa;UAChBC,IAAI,EAAC,QAAQ;UACbpC,KAAK,EAAEF,UAAW;UAClBuC,QAAQ,EAAE,IAAI,CAACzC,iBAAkB;UACjC0C,IAAI,EAAC,KAAK;UACVT,KAAK,EAAE;YAAEU,KAAK,EAAE;UAAO;QAAE;UAAAd,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAC1B,CAAC,eACFlE,OAAA;UACE8E,OAAO,EAAE,IAAI,CAACvC,uBAAwB;UACtC4B,KAAK,EAAE;YACLY,OAAO,EAAE,UAAU;YACnBC,eAAe,EAAE,SAAS;YAC1BhC,KAAK,EAAE,OAAO;YACdiC,MAAM,EAAE,MAAM;YACdC,YAAY,EAAE,KAAK;YACnBC,MAAM,EAAE;UACV,CAAE;UAAArB,QAAA,EACH;QAED;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAQ,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACN,CAAC,eAENlE,OAAA;QAAA8D,QAAA,GAAG,sBAAoB,eAAA9D,OAAA;UAAMmE,KAAK,EAAE,IAAI,CAACpB,mBAAmB,CAAC,CAAE;UAAAe,QAAA,GAAE1C,WAAW,CAACV,OAAO,CAAC,CAAC,CAAC,EAAC,OAAE;QAAA;UAAAqD,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAM,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAG,CAAC,eACrGlE,OAAA;QAAA8D,QAAA,GAAG,gBAAc,EAACxC,OAAO,EAAC,UAAK,EAACE,OAAO,EAAC,OAAE;MAAA;QAAAuC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAG,CAAC,EAE7C9C,WAAW,GAAGE,OAAO,iBACpBtB,OAAA;QAAGmE,KAAK,EAAE;UAACnB,KAAK,EAAE;QAAM,CAAE;QAAAc,QAAA,GAAC,wDACmB,EAACxC,OAAO,EAAC,UAAK,EAACE,OAAO,EAAC,QACrE;MAAA;QAAAuC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAG,CAAC,EAEL9C,WAAW,GAAGI,OAAO,iBACpBxB,OAAA;QAAGmE,KAAK,EAAE;UAACnB,KAAK,EAAE;QAAK,CAAE;QAAAc,QAAA,GAAC,wDACoB,EAACxC,OAAO,EAAC,UAAK,EAACE,OAAO,EAAC,QACrE;MAAA;QAAAuC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAG,CAAC,EAGLnC,QAAQ,iBACP/B,OAAA;QAAGmE,KAAK,EAAE;UAACnB,KAAK,EAAE;QAAM,CAAE;QAAAc,QAAA,EAAC;MAE3B;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAG,CAAC,EAGL1D,WAAW,iBAAIR,OAAA;QAAG6D,SAAS,EAAC,cAAc;QAAAC,QAAA,EAAEtD;MAAW;QAAAuD,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC,EAE5DpC,cAAc,KAAK,IAAI,iBACtB9B,OAAA;QAAKmE,KAAK,EAAE;UAACiB,SAAS,EAAE,MAAM;UAAEC,QAAQ,EAAE,OAAO;UAAErC,KAAK,EAAE;QAAM,CAAE;QAAAc,QAAA,GAAC,4BAC1C,EAAChC,cAAc,CAACpB,OAAO,CAAC,CAAC,CAAC,EAAC,OACpD;MAAA;QAAAqD,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAK,CACN;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACE,CAAC;EAEV;AACF;AAEA,eAAejE,gBAAgB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}