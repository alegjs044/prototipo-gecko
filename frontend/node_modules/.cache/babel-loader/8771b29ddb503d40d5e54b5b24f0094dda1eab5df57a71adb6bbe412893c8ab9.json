{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Roger\\\\Documents\\\\TT2_AVANCES\\\\prototipo-gecko\\\\frontend\\\\src\\\\pages\\\\pruebasNotificaciones.jsx\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport { useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst TemperaturaAlert = ({\n  temperatura,\n  setTemperatura\n}) => {\n  _s();\n  const [alertSent, setAlertSent] = useState(false);\n  const enviar_temperatura_alert = async temp => {\n    try {\n      const response = await fetch(\"http://localhost:5000/send-email\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n          temperatura: temp\n        })\n      });\n      const data = await response.json();\n      console.log(response);\n      console.log(data.message);\n    } catch (error) {\n      console.error(\"Error al enviar la alerta:\", error);\n    }\n    console.log(temp);\n  };\n  const handleChange = e => {\n    const newTemperatura = parseFloat(e.target.value);\n    setTemperatura(newTemperatura);\n  };\n  useEffect(() => {\n    if (temperatura < 22 || temperatura > 32) {\n      if (!alertSent) {\n        console.log(\"Enviando alerta por temperatura:\", temperatura);\n        enviar_temperatura_alert(temperatura);\n        setAlertSent(true);\n      }\n    } else {\n      if (alertSent) {\n        setAlertSent(false); // Reiniciar cuando la temperatura vuelva a estar dentro del rango\n      }\n    }\n  }, [temperatura, alertSent]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"PruebasNotificaciones\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Monitoreo De Temperatura\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"number\",\n      value: temperatura,\n      onChange: handleChange\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Temperatura actual: \", temperatura]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 43,\n    columnNumber: 5\n  }, this);\n};\n_s(TemperaturaAlert, \"ii7vGGP8m0WfTvmWldTGg0hcsdw=\");\n_c = TemperaturaAlert;\nfunction PruebasNotificaciones() {\n  _s2();\n  const [temperatura, setTemperatura] = useState(0);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(TemperaturaAlert, {\n      temperatura: temperatura,\n      setTemperatura: setTemperatura\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 55,\n    columnNumber: 5\n  }, this);\n}\n_s2(PruebasNotificaciones, \"r7onMzeDxyNFM/bv/VbnfYH01U8=\");\n_c2 = PruebasNotificaciones;\nexport default PruebasNotificaciones;\nvar _c, _c2;\n$RefreshReg$(_c, \"TemperaturaAlert\");\n$RefreshReg$(_c2, \"PruebasNotificaciones\");","map":{"version":3,"names":["useState","useEffect","jsxDEV","_jsxDEV","TemperaturaAlert","temperatura","setTemperatura","_s","alertSent","setAlertSent","enviar_temperatura_alert","temp","response","fetch","method","headers","body","JSON","stringify","data","json","console","log","message","error","handleChange","e","newTemperatura","parseFloat","target","value","className","children","fileName","_jsxFileName","lineNumber","columnNumber","type","onChange","_c","PruebasNotificaciones","_s2","_c2","$RefreshReg$"],"sources":["C:/Users/Roger/Documents/TT2_AVANCES/prototipo-gecko/frontend/src/pages/pruebasNotificaciones.jsx"],"sourcesContent":["\r\nimport { useState, useEffect } from 'react';\r\n\r\nconst TemperaturaAlert = ({ temperatura, setTemperatura }) => {\r\n  const [alertSent, setAlertSent] = useState(false);\r\n  \r\n  const enviar_temperatura_alert = async (temp) => {\r\n    try {\r\n      const response = await fetch(\"http://localhost:5000/send-email\", {\r\n        method: \"POST\",\r\n        headers: { \"Content-Type\": \"application/json\" },\r\n        body: JSON.stringify({ temperatura: temp }),\r\n      });\r\n      const data = await response.json();\r\n      console.log(response);\r\n      console.log(data.message);\r\n    } catch (error) {\r\n      console.error(\"Error al enviar la alerta:\", error);\r\n    }\r\n    console.log(temp);\r\n  };\r\n  \r\n  const handleChange = (e) => {\r\n    const newTemperatura = parseFloat(e.target.value);\r\n    setTemperatura(newTemperatura);\r\n  };\r\n  \r\n  useEffect(() => {\r\n    if (temperatura < 22 || temperatura > 32) {\r\n      if (!alertSent) {\r\n        console.log(\"Enviando alerta por temperatura:\", temperatura);\r\n        enviar_temperatura_alert(temperatura);\r\n        setAlertSent(true);\r\n      }\r\n    } else {\r\n      if (alertSent) {\r\n        setAlertSent(false); // Reiniciar cuando la temperatura vuelva a estar dentro del rango\r\n      }\r\n    }\r\n  }, [temperatura, alertSent]);\r\n  \r\n  return (\r\n    <div className=\"PruebasNotificaciones\">\r\n      <h2>Monitoreo De Temperatura</h2>\r\n      <input type=\"number\" value={temperatura} onChange={handleChange} />\r\n      <p>Temperatura actual: {temperatura}</p>\r\n    </div>\r\n  );\r\n};\r\n\r\nfunction PruebasNotificaciones() {\r\n  const [temperatura, setTemperatura] = useState(0);\r\n  \r\n  return (\r\n    <div>\r\n      <TemperaturaAlert temperatura={temperatura} setTemperatura={setTemperatura} />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default PruebasNotificaciones;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}