{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Roger\\\\Documents\\\\TT2_AVANCES\\\\prototipo-gecko\\\\frontend\\\\src\\\\pages\\\\pruebasNotificaciones.jsx\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport { useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst TemperaturaAlert = ({\n  temperatura,\n  setTemperatura\n}) => {\n  _s();\n  // Estado para el valor del input separado del valor actual de temperatura\n  const [inputValue, setInputValue] = useState(temperatura.toString());\n  const [lastAlertValue, setLastAlertValue] = useState(null);\n  const [alertStatus, setAlertStatus] = useState('');\n  const [cooldown, setCooldown] = useState(false);\n  const [zona, setZona] = useState('');\n  const [timestamp, setTimestamp] = useState('');\n  const zonas = ['zona fria', 'zona caliente', 'zona media']; // Array con las opciones de zona\n\n  const enviar_temperatura_alert = async (temp, zona, timestamp) => {\n    setAlertStatus('Enviando alerta...');\n    try {\n      // Asegurar que la temperatura se envía como string con 2 decimales\n      const temperaturaFormateada = temp.toFixed(2);\n      console.log(\"Enviando temperatura formateada:\", temperaturaFormateada);\n      const response = await fetch(\"http://localhost:5000/send-email\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n          temperatura: parseFloat(temperaturaFormateada),\n          // Convertir a número de nuevo\n          zona,\n          timestamp\n        })\n      });\n      const data = await response.json();\n      if (response.ok) {\n        console.log(\"Alerta enviada con éxito:\", data.message);\n        setAlertStatus('Alerta enviada con éxito');\n\n        // Guardamos el valor actual como el último valor de alerta\n        setLastAlertValue(temp);\n\n        // Establecemos un tiempo de espera para evitar el spam de alertas\n        setCooldown(true);\n        setTimeout(() => {\n          setCooldown(false);\n        }, 10000); // 10 segundos de cooldown\n      } else {\n        console.error(\"Error en la respuesta del servidor:\", data.message);\n        setAlertStatus(`Error: ${data.message}`);\n      }\n    } catch (error) {\n      console.error(\"Error al enviar la alerta:\", error);\n      setAlertStatus(`Error de conexión: ${error.message}`);\n    }\n  };\n\n  // Este manejador solo actualiza el input, no el valor de temperatura real\n  const handleInputChange = e => {\n    setInputValue(e.target.value);\n  };\n\n  // Función para actualizar la temperatura cuando se presiona el botón\n  const handleUpdateTemperature = () => {\n    const newTemperatura = parseFloat(inputValue);\n\n    // Verificar que es un número válido\n    if (!isNaN(newTemperatura)) {\n      setTemperatura(newTemperatura);\n    } else {\n      setAlertStatus('Por favor ingrese un número válido');\n      setTimeout(() => setAlertStatus(''), 3000);\n    }\n  };\n  const handleSubmit = async e => {\n    e.preventDefault();\n    if (!inputValue || !zona || !timestamp) {\n      alert('Todos los campos son obligatorios');\n      return;\n    }\n\n    // Obtener el timestamp actual\n    const currentTimestamp = new Date().toISOString();\n    setTimestamp(currentTimestamp); // Guardamos el timestamp actual\n\n    // Enviar alerta con los valores del formulario\n    await enviar_temperatura_alert(parseFloat(inputValue), zona, currentTimestamp);\n    setZona('');\n    setTimestamp('');\n  };\n  useEffect(() => {\n    // Solo enviar alerta si la temperatura es válida (no NaN)\n    if (isNaN(temperatura)) return;\n\n    // Verificamos si está fuera del rango permitido\n    const fueraDeRango = temperatura < 22 || temperatura > 32;\n    if (fueraDeRango) {\n      // Verificamos si debemos enviar una nueva alerta\n      const debeEnviarAlerta =\n      // No hay una alerta previa\n      lastAlertValue === null ||\n      // La temperatura ha cambiado significativamente (más de 1 grado)\n      Math.abs(temperatura - lastAlertValue) >= 1 ||\n      // La temperatura cruzó el umbral (de caliente a frío o viceversa)\n      lastAlertValue > 32 && temperatura < 22 || lastAlertValue < 22 && temperatura > 32;\n\n      // Solo enviamos si debemos y no estamos en cooldown\n      if (debeEnviarAlerta && !cooldown) {\n        console.log(\"Enviando alerta por temperatura:\", temperatura);\n        enviar_temperatura_alert(temperatura, zona, timestamp);\n      }\n    } else {\n      // Si volvió al rango normal, reiniciamos para que la próxima vez envíe alerta\n      if (lastAlertValue !== null) {\n        setLastAlertValue(null);\n        setAlertStatus('Temperatura normalizada');\n\n        // Después de 3 segundos, limpiamos el mensaje\n        setTimeout(() => {\n          if (temperatura >= 22 && temperatura <= 32) {\n            setAlertStatus('');\n          }\n        }, 3000);\n      }\n    }\n  }, [temperatura, lastAlertValue, cooldown, zona, timestamp]);\n  useEffect(() => {\n    setInputValue(temperatura.toString());\n  }, [temperatura]);\n  const getTemperatureStyle = () => {\n    if (temperatura > 32) return {\n      color: 'red',\n      fontWeight: 'bold'\n    };\n    if (temperatura < 22) return {\n      color: 'blue',\n      fontWeight: 'bold'\n    };\n    return {\n      color: 'green'\n    };\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"PruebasNotificaciones\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Monitoreo De Temperatura\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 144,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleSubmit,\n      className: \"p-4 border rounded shadow-md\",\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        className: \"block mb-2\",\n        children: [\"Temperatura:\", /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"number\",\n          step: \"0.1\",\n          value: inputValue,\n          onChange: handleInputChange,\n          style: {\n            width: '80px'\n          },\n          required: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 148,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 146,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        className: \"block mb-2\",\n        children: [\"Zona:\", /*#__PURE__*/_jsxDEV(\"select\", {\n          value: zona,\n          onChange: e => setZona(e.target.value),\n          className: \"border p-2 w-full\",\n          required: true,\n          children: [/*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"\",\n            children: \"Seleccione una zona\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 166,\n            columnNumber: 13\n          }, this), zonas.map((zona, index) => /*#__PURE__*/_jsxDEV(\"option\", {\n            value: zona,\n            children: zona.charAt(0).toUpperCase() + zona.slice(1)\n          }, index, false, {\n            fileName: _jsxFileName,\n            lineNumber: 168,\n            columnNumber: 15\n          }, this))]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 160,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 158,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        className: \"bg-blue-500 text-white px-4 py-2 mt-2 rounded\",\n        children: \"Enviar\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 173,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 145,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Temperatura actual: \", /*#__PURE__*/_jsxDEV(\"span\", {\n        style: getTemperatureStyle(),\n        children: [temperatura.toFixed(2), \"\\xB0C\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 178,\n        columnNumber: 30\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 178,\n      columnNumber: 7\n    }, this), temperatura < 22 && /*#__PURE__*/_jsxDEV(\"p\", {\n      style: {\n        color: 'blue'\n      },\n      children: \"\\u26A0\\uFE0F Temperatura por debajo del rango normal (22\\xB0C - 32\\xB0C)\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 181,\n      columnNumber: 9\n    }, this), temperatura > 32 && /*#__PURE__*/_jsxDEV(\"p\", {\n      style: {\n        color: 'red'\n      },\n      children: \"\\u26A0\\uFE0F Temperatura por encima del rango normal (22\\xB0C - 32\\xB0C)\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 186,\n      columnNumber: 9\n    }, this), cooldown && /*#__PURE__*/_jsxDEV(\"p\", {\n      style: {\n        color: 'gray'\n      },\n      children: \"\\u23F1\\uFE0F Esperando para enviar la siguiente alerta...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 192,\n      columnNumber: 9\n    }, this), alertStatus && /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"alert-status\",\n      children: alertStatus\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 197,\n      columnNumber: 23\n    }, this), lastAlertValue !== null && /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        marginTop: '10px',\n        fontSize: '0.9em',\n        color: '#555'\n      },\n      children: [\"\\xDAltima alerta enviada: \", lastAlertValue.toFixed(2), \"\\xB0C\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 200,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 143,\n    columnNumber: 5\n  }, this);\n};\n_s(TemperaturaAlert, \"GhVTUQXQd1iq+JxPY08HYUKgdzU=\");\n_c = TemperaturaAlert;\nfunction PruebasNotificaciones() {\n  _s2();\n  const [temperatura, setTemperatura] = useState(25); // Valor inicial dentro del rango normal\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(TemperaturaAlert, {\n      temperatura: temperatura,\n      setTemperatura: setTemperatura\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 213,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 212,\n    columnNumber: 5\n  }, this);\n}\n_s2(PruebasNotificaciones, \"BSLE6W81eo5m/C7rYFlDzZ5wRTU=\");\n_c2 = PruebasNotificaciones;\nexport default PruebasNotificaciones;\nvar _c, _c2;\n$RefreshReg$(_c, \"TemperaturaAlert\");\n$RefreshReg$(_c2, \"PruebasNotificaciones\");","map":{"version":3,"names":["useState","useEffect","jsxDEV","_jsxDEV","TemperaturaAlert","temperatura","setTemperatura","_s","inputValue","setInputValue","toString","lastAlertValue","setLastAlertValue","alertStatus","setAlertStatus","cooldown","setCooldown","zona","setZona","timestamp","setTimestamp","zonas","enviar_temperatura_alert","temp","temperaturaFormateada","toFixed","console","log","response","fetch","method","headers","body","JSON","stringify","parseFloat","data","json","ok","message","setTimeout","error","handleInputChange","e","target","value","handleUpdateTemperature","newTemperatura","isNaN","handleSubmit","preventDefault","alert","currentTimestamp","Date","toISOString","fueraDeRango","debeEnviarAlerta","Math","abs","getTemperatureStyle","color","fontWeight","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onSubmit","type","step","onChange","style","width","required","map","index","charAt","toUpperCase","slice","marginTop","fontSize","_c","PruebasNotificaciones","_s2","_c2","$RefreshReg$"],"sources":["C:/Users/Roger/Documents/TT2_AVANCES/prototipo-gecko/frontend/src/pages/pruebasNotificaciones.jsx"],"sourcesContent":["import { useState, useEffect } from 'react';\r\n\r\nconst TemperaturaAlert = ({ temperatura, setTemperatura }) => {\r\n  // Estado para el valor del input separado del valor actual de temperatura\r\n  const [inputValue, setInputValue] = useState(temperatura.toString());\r\n  const [lastAlertValue, setLastAlertValue] = useState(null);\r\n  const [alertStatus, setAlertStatus] = useState('');\r\n  const [cooldown, setCooldown] = useState(false);\r\n  const [zona, setZona] = useState('');\r\n  const [timestamp, setTimestamp] = useState('');\r\n\r\n  const zonas = ['zona fria', 'zona caliente', 'zona media']; // Array con las opciones de zona\r\n\r\n  const enviar_temperatura_alert = async (temp, zona, timestamp) => {\r\n    setAlertStatus('Enviando alerta...');\r\n    try {\r\n      // Asegurar que la temperatura se envía como string con 2 decimales\r\n      const temperaturaFormateada = temp.toFixed(2);\r\n      \r\n      console.log(\"Enviando temperatura formateada:\", temperaturaFormateada);\r\n      \r\n      const response = await fetch(\"http://localhost:5000/send-email\", {\r\n        method: \"POST\",\r\n        headers: { \"Content-Type\": \"application/json\" },\r\n        body: JSON.stringify({ \r\n          temperatura: parseFloat(temperaturaFormateada), // Convertir a número de nuevo\r\n          zona,\r\n          timestamp\r\n        }),\r\n      });\r\n      \r\n      const data = await response.json();\r\n      \r\n      if (response.ok) {\r\n        console.log(\"Alerta enviada con éxito:\", data.message);\r\n        setAlertStatus('Alerta enviada con éxito');\r\n        \r\n        // Guardamos el valor actual como el último valor de alerta\r\n        setLastAlertValue(temp);\r\n        \r\n        // Establecemos un tiempo de espera para evitar el spam de alertas\r\n        setCooldown(true);\r\n        setTimeout(() => {\r\n          setCooldown(false);\r\n        }, 10000); // 10 segundos de cooldown\r\n        \r\n      } else {\r\n        console.error(\"Error en la respuesta del servidor:\", data.message);\r\n        setAlertStatus(`Error: ${data.message}`);\r\n      }\r\n    } catch (error) {\r\n      console.error(\"Error al enviar la alerta:\", error);\r\n      setAlertStatus(`Error de conexión: ${error.message}`);\r\n    }\r\n  };\r\n\r\n  // Este manejador solo actualiza el input, no el valor de temperatura real\r\n  const handleInputChange = (e) => {\r\n    setInputValue(e.target.value);\r\n  };\r\n\r\n  // Función para actualizar la temperatura cuando se presiona el botón\r\n  const handleUpdateTemperature = () => {\r\n    const newTemperatura = parseFloat(inputValue);\r\n    \r\n    // Verificar que es un número válido\r\n    if (!isNaN(newTemperatura)) {\r\n      setTemperatura(newTemperatura);\r\n    } else {\r\n      setAlertStatus('Por favor ingrese un número válido');\r\n      setTimeout(() => setAlertStatus(''), 3000);\r\n    }\r\n  };\r\n\r\n  const handleSubmit = async (e) => {\r\n    e.preventDefault();\r\n    if (!inputValue || !zona || !timestamp) {\r\n      alert('Todos los campos son obligatorios');\r\n      return;\r\n    }\r\n\r\n    // Obtener el timestamp actual\r\n    const currentTimestamp = new Date().toISOString();\r\n    setTimestamp(currentTimestamp); // Guardamos el timestamp actual\r\n\r\n    // Enviar alerta con los valores del formulario\r\n    await enviar_temperatura_alert(parseFloat(inputValue), zona, currentTimestamp);\r\n    \r\n    setZona('');\r\n    setTimestamp('');\r\n  };\r\n\r\n  useEffect(() => {\r\n    // Solo enviar alerta si la temperatura es válida (no NaN)\r\n    if (isNaN(temperatura)) return;\r\n    \r\n    // Verificamos si está fuera del rango permitido\r\n    const fueraDeRango = temperatura < 22 || temperatura > 32;\r\n    \r\n    if (fueraDeRango) {\r\n      // Verificamos si debemos enviar una nueva alerta\r\n      const debeEnviarAlerta = \r\n        // No hay una alerta previa\r\n        lastAlertValue === null || \r\n        // La temperatura ha cambiado significativamente (más de 1 grado)\r\n        Math.abs(temperatura - lastAlertValue) >= 1 || \r\n        // La temperatura cruzó el umbral (de caliente a frío o viceversa)\r\n        (lastAlertValue > 32 && temperatura < 22) || \r\n        (lastAlertValue < 22 && temperatura > 32);\r\n      \r\n      // Solo enviamos si debemos y no estamos en cooldown\r\n      if (debeEnviarAlerta && !cooldown) {\r\n        console.log(\"Enviando alerta por temperatura:\", temperatura);\r\n        enviar_temperatura_alert(temperatura, zona, timestamp);\r\n      }\r\n    } else {\r\n      // Si volvió al rango normal, reiniciamos para que la próxima vez envíe alerta\r\n      if (lastAlertValue !== null) {\r\n        setLastAlertValue(null);\r\n        setAlertStatus('Temperatura normalizada');\r\n        \r\n        // Después de 3 segundos, limpiamos el mensaje\r\n        setTimeout(() => {\r\n          if (temperatura >= 22 && temperatura <= 32) {\r\n            setAlertStatus('');\r\n          }\r\n        }, 3000);\r\n      }\r\n    }\r\n  }, [temperatura, lastAlertValue, cooldown, zona, timestamp]);\r\n\r\n  useEffect(() => {\r\n    setInputValue(temperatura.toString());\r\n  }, [temperatura]);\r\n\r\n  const getTemperatureStyle = () => {\r\n    if (temperatura > 32) return { color: 'red', fontWeight: 'bold' };\r\n    if (temperatura < 22) return { color: 'blue', fontWeight: 'bold' };\r\n    return { color: 'green' };\r\n  };\r\n\r\n  return (\r\n    <div className=\"PruebasNotificaciones\">\r\n      <h2>Monitoreo De Temperatura</h2>\r\n      <form onSubmit={handleSubmit} className=\"p-4 border rounded shadow-md\">\r\n        <label className=\"block mb-2\">\r\n          Temperatura:\r\n          <input\r\n            type=\"number\"\r\n            step=\"0.1\"\r\n            value={inputValue}\r\n            onChange={handleInputChange}\r\n            style={{ width: '80px' }}\r\n            required\r\n          />\r\n        </label>\r\n\r\n        <label className=\"block mb-2\">\r\n          Zona:\r\n          <select\r\n            value={zona}\r\n            onChange={(e) => setZona(e.target.value)}\r\n            className=\"border p-2 w-full\"\r\n            required\r\n          >\r\n            <option value=\"\">Seleccione una zona</option>\r\n            {zonas.map((zona, index) => (\r\n              <option key={index} value={zona}>{zona.charAt(0).toUpperCase() + zona.slice(1)}</option>\r\n            ))}\r\n          </select>\r\n        </label>\r\n\r\n        <button type=\"submit\" className=\"bg-blue-500 text-white px-4 py-2 mt-2 rounded\">\r\n          Enviar\r\n        </button>\r\n      </form>\r\n\r\n      <p>Temperatura actual: <span style={getTemperatureStyle()}>{temperatura.toFixed(2)}°C</span></p>\r\n\r\n      {temperatura < 22 && \r\n        <p style={{color: 'blue'}}>\r\n          ⚠️ Temperatura por debajo del rango normal (22°C - 32°C)\r\n        </p>\r\n      }\r\n      {temperatura > 32 && \r\n        <p style={{color: 'red'}}>\r\n          ⚠️ Temperatura por encima del rango normal (22°C - 32°C)\r\n        </p>\r\n      }\r\n\r\n      {cooldown && \r\n        <p style={{color: 'gray'}}>\r\n          ⏱️ Esperando para enviar la siguiente alerta...\r\n        </p>\r\n      }\r\n\r\n      {alertStatus && <p className=\"alert-status\">{alertStatus}</p>}\r\n\r\n      {lastAlertValue !== null && (\r\n        <div style={{marginTop: '10px', fontSize: '0.9em', color: '#555'}}>\r\n          Última alerta enviada: {lastAlertValue.toFixed(2)}°C\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nfunction PruebasNotificaciones() {\r\n  const [temperatura, setTemperatura] = useState(25); // Valor inicial dentro del rango normal\r\n  \r\n  return (\r\n    <div>\r\n      <TemperaturaAlert temperatura={temperatura} setTemperatura={setTemperatura} />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default PruebasNotificaciones;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}