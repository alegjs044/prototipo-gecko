{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Roger\\\\Documents\\\\TT2_AVANCES\\\\prototipo-gecko\\\\frontend\\\\src\\\\pages\\\\pruebasNotificaciones.jsx\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$(),\n  _s3 = $RefreshSig$();\nimport { useState } from 'react';\nimport axios from 'axios';\nimport { jwtDecode } from 'jwt-decode';\n\n/**\r\n * Componente principal de monitoreo de temperatura y humedad\r\n */\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst PruebasNotificaciones = () => {\n  _s();\n  const [temperatura, setTemperatura] = useState(25);\n  const [humedad, setHumedad] = useState(40);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(TemperaturaAlert, {\n      temperatura: temperatura,\n      setTemperatura: setTemperatura\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 14,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(HumedadAlert, {\n      humedad: humedad,\n      setHumedad: setHumedad\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 15,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 13,\n    columnNumber: 5\n  }, this);\n};\n\n/**\r\n * Componente para monitoreo de humedad\r\n */\n_s(PruebasNotificaciones, \"nFfk9TMAPB0lUdEctBHXkq2LoW0=\");\n_c = PruebasNotificaciones;\nconst HumedadAlert = ({\n  humedad,\n  setHumedad\n}) => {\n  _s2();\n  const [inputValue, setInputValue] = useState(humedad.toString());\n  const [lastAlertValue, setLastAlertValue] = useState(null);\n  const [alertStatus, setAlertStatus] = useState('');\n\n  // Obtener ID del usuario desde el token JWT almacenado\n  const token = localStorage.getItem('token');\n  const ID_usuario = token ? jwtDecode(token).id : '';\n  const handleInputChange = e => setInputValue(e.target.value);\n  const handleUpdateHumedad = () => {\n    const newHumedad = parseFloat(inputValue);\n    if (!isNaN(newHumedad)) {\n      setHumedad(newHumedad);\n      gestionarNotificacionHumedad(newHumedad, ID_usuario, setAlertStatus, setLastAlertValue, lastAlertValue);\n    } else {\n      setAlertStatus('Por favor ingrese un número válido');\n      setTimeout(() => setAlertStatus(''), 3000);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"PruebasNotificaciones\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Monitoreo De Humedad\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"humedad\",\n        children: \"Humedad (%): \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        id: \"humedad\",\n        type: \"number\",\n        value: inputValue,\n        onChange: handleInputChange,\n        step: \"0.1\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleUpdateHumedad,\n        children: \"Actualizar\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Humedad actual: \", /*#__PURE__*/_jsxDEV(\"span\", {\n        children: [humedad.toFixed(1), \"%\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 26\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 7\n    }, this), alertStatus && /*#__PURE__*/_jsxDEV(\"p\", {\n      children: alertStatus\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 23\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 46,\n    columnNumber: 5\n  }, this);\n};\n\n/**\r\n * Gestiona la notificación de humedad\r\n */\n_s2(HumedadAlert, \"Cslk5TwE2HKZ/t7UeeG+kZvWWb8=\");\n_c2 = HumedadAlert;\nconst gestionarNotificacionHumedad = async (humedad, ID_usuario, setAlertStatus, setLastAlertValue, lastAlertValue) => {\n  const Marca_tiempo = new Date().toISOString().slice(0, 19).replace('T', ' ');\n\n  // Insertar siempre la humedad en la base de datos\n  await enviarHumedad(ID_usuario, humedad, 'Zona 1', Marca_tiempo);\n  const humedadFormateada = humedad.toFixed(1);\n\n  // Evitar notificaciones repetidas para valores similares\n  if (lastAlertValue !== null && Math.abs(humedad - lastAlertValue) < 1) {\n    console.log('Humedad similar a la anterior, no se enviará alerta.');\n    return;\n  }\n\n  // Verifica si la humedad está fuera del rango aceptable (30%-50%)\n  if (humedad < 30 || humedad > 50) {\n    try {\n      // Envía alerta por correo electrónico\n      await enviarEmailHumedad(humedad, setAlertStatus);\n\n      // Registra la notificación en la base de datos\n      const notificacionResponse = await axios.post('http://localhost:5000/api/addNotification', {\n        tipo: 'humedad',\n        descripcion: `Humedad fuera de rango: ${humedadFormateada}%`,\n        time_alert: Marca_tiempo\n      }, {\n        headers: {\n          'Content-Type': 'application/json'\n        }\n      });\n\n      // Vincula la notificación con el usuario\n      const idNotificacion = notificacionResponse.data.id_notificacion;\n      if (idNotificacion) {\n        await axios.post('http://localhost:5000/api/addNotificationUser', {\n          id_notificacion: idNotificacion,\n          id_user: ID_usuario\n        }, {\n          headers: {\n            'Content-Type': 'application/json'\n          }\n        });\n        console.log('Relación notificación-usuario guardada con éxito');\n      }\n      setLastAlertValue(humedad);\n    } catch (error) {\n      console.error('Error al gestionar la notificación de humedad:', error);\n      setAlertStatus(`Error de conexión: ${error.message}`);\n    }\n  }\n};\n\n/**\r\n * Registra la humedad en la base de datos\r\n */\nconst enviarHumedad = async (ID_usuario, humedad, Zona, Marca_tiempo) => {\n  try {\n    if (!ID_usuario || humedad === undefined || !Zona || !Marca_tiempo) {\n      console.error('Datos incompletos para humedad:', {\n        ID_usuario,\n        humedad,\n        Zona,\n        Marca_tiempo\n      });\n      throw new Error('Todos los campos son obligatorios');\n    }\n    console.log('Registrando humedad en la base de datos:', {\n      ID_usuario,\n      Medicion: humedad,\n      Zona,\n      Marca_tiempo\n    });\n    await axios.post('http://localhost:5000/api/addhumedad', {\n      ID_usuario,\n      Medicion: humedad,\n      Zona,\n      Marca_tiempo\n    }, {\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      timeout: 10000\n    });\n    console.log('Humedad guardada correctamente.');\n  } catch (error) {\n    console.error('Error al guardar la humedad:', error);\n  }\n};\n\n/**\r\n * Envía una alerta de humedad por correo electrónico\r\n * Usa el mismo endpoint que temperatura pero con diferente payload\r\n */\nconst enviarEmailHumedad = async (humedad, setAlertStatus) => {\n  setAlertStatus('Enviando alerta de humedad...');\n  try {\n    const response = await fetch('http://localhost:5000/send-email', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        // Mantenemos la misma estructura que espera el servidor, pero con humedad\n        temperatura: humedad,\n        descripcion: `Alerta de humedad fuera de rango: ${humedad}%`,\n        tipo: 'humedad'\n      })\n    });\n    const result = await response.json();\n    if (response.ok) {\n      console.log('Alerta de humedad enviada con éxito:', result.message);\n      setAlertStatus('Alerta de humedad enviada con éxito');\n    } else {\n      console.error('Error en la respuesta del servidor:', result.message);\n      setAlertStatus(`Error: ${result.message}`);\n    }\n  } catch (error) {\n    console.error('Error al enviar la alerta de humedad:', error);\n    setAlertStatus(`Error de conexión: ${error.message}`);\n  }\n};\n\n// Mantener el componente TemperaturaAlert y sus funciones auxiliares\nconst TemperaturaAlert = ({\n  temperatura,\n  setTemperatura\n}) => {\n  _s3();\n  const [inputValue, setInputValue] = useState(temperatura.toString());\n  const [lastAlertValue, setLastAlertValue] = useState(null);\n  const [alertStatus, setAlertStatus] = useState('');\n  const token = localStorage.getItem('token');\n  const ID_usuario = token ? jwtDecode(token).id : '';\n  const handleInputChange = e => setInputValue(e.target.value);\n  const handleUpdateTemperature = () => {\n    const newTemperatura = parseFloat(inputValue);\n    if (!isNaN(newTemperatura)) {\n      setTemperatura(newTemperatura);\n      gestionarNotificacion(newTemperatura, ID_usuario, setAlertStatus, setLastAlertValue, lastAlertValue);\n    } else {\n      setAlertStatus('Por favor ingrese un número válido');\n      setTimeout(() => setAlertStatus(''), 3000);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"PruebasNotificaciones\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Monitoreo De Temperatura\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 202,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"temperatura\",\n        children: \"Temperatura (\\xB0C): \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 204,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        id: \"temperatura\",\n        type: \"number\",\n        value: inputValue,\n        onChange: handleInputChange,\n        step: \"0.1\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 205,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleUpdateTemperature,\n        children: \"Actualizar\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 206,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 203,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Temperatura actual: \", /*#__PURE__*/_jsxDEV(\"span\", {\n        children: [temperatura.toFixed(2), \"\\xB0C\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 208,\n        columnNumber: 30\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 208,\n      columnNumber: 7\n    }, this), alertStatus && /*#__PURE__*/_jsxDEV(\"p\", {\n      children: alertStatus\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 209,\n      columnNumber: 23\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 201,\n    columnNumber: 5\n  }, this);\n};\n\n// Mantener las funciones originales de temperatura\n_s3(TemperaturaAlert, \"SXHQEkyvBDclk8/MhxKtAoAiqdQ=\");\n_c3 = TemperaturaAlert;\nconst gestionarNotificacion = async (temperatura, ID_usuario, setAlertStatus, setLastAlertValue, lastAlertValue) => {\n  const Marca_tiempo = new Date().toISOString().slice(0, 19).replace('T', ' ');\n  await enviarTemperatura(ID_usuario, temperatura, 'Zona 1', Marca_tiempo);\n  const temperaturaFormateada = temperatura.toFixed(2);\n  console.log('Temperatura formateada:', temperaturaFormateada);\n  if (lastAlertValue !== null && Math.abs(temperatura - lastAlertValue) < 1) {\n    console.log('Temperatura similar a la anterior, no se enviará alerta.');\n    return;\n  }\n  if (temperatura < 22 || temperatura > 32) {\n    try {\n      await enviarEmail('Temperatura fuera de rango', temperatura, setAlertStatus);\n      const notificacionResponse = await axios.post('http://localhost:5000/api/addNotification', {\n        tipo: 'temperatura',\n        descripcion: `Temperatura fuera de rango: ${temperaturaFormateada}°C`,\n        time_alert: Marca_tiempo\n      }, {\n        headers: {\n          'Content-Type': 'application/json'\n        }\n      });\n      const idNotificacion = notificacionResponse.data.id_notificacion;\n      if (idNotificacion) {\n        await axios.post('http://localhost:5000/api/addNotificationUser', {\n          id_notificacion: idNotificacion,\n          id_user: ID_usuario\n        }, {\n          headers: {\n            'Content-Type': 'application/json'\n          }\n        });\n        console.log('Relación notificación-usuario guardada con éxito');\n      }\n      setLastAlertValue(temperatura);\n    } catch (error) {\n      console.error('Error al gestionar la notificación:', error);\n      setAlertStatus(`Error de conexión: ${error.message}`);\n    }\n  }\n};\nconst enviarTemperatura = async (ID_usuario, temperatura, Zona, Marca_tiempo) => {\n  try {\n    if (!ID_usuario || !temperatura || !Zona || !Marca_tiempo) {\n      console.error('Datos incompletos:', {\n        ID_usuario,\n        temperatura,\n        Zona,\n        Marca_tiempo\n      });\n      throw new Error('Todos los campos son obligatorios');\n    }\n    console.log('Registrando temperatura en la base de datos:', {\n      ID_usuario,\n      Medicion: temperatura,\n      Zona,\n      Marca_tiempo\n    });\n    await axios.post('http://localhost:5000/api/addtemperatura', {\n      ID_usuario,\n      Medicion: temperatura,\n      Zona,\n      Marca_tiempo\n    }, {\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      timeout: 10000\n    });\n    console.log('Temperatura guardada correctamente.');\n  } catch (error) {\n    console.error('Error al guardar la temperatura:', error);\n  }\n};\nconst enviarEmail = async (descripcion, temperatura, setAlertStatus) => {\n  setAlertStatus('Enviando alerta...');\n  try {\n    const response = await fetch('http://localhost:5000/send-email', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        descripcion,\n        temperatura\n      })\n    });\n    const result = await response.json();\n    if (response.ok) {\n      console.log('Alerta enviada con éxito:', result.message);\n      setAlertStatus('Alerta enviada con éxito');\n    } else {\n      console.error('Error en la respuesta del servidor:', result.message);\n      setAlertStatus(`Error: ${result.message}`);\n    }\n  } catch (error) {\n    console.error('Error al enviar la alerta:', error);\n    setAlertStatus(`Error de conexión: ${error.message}`);\n  }\n};\nexport default PruebasNotificaciones;\nvar _c, _c2, _c3;\n$RefreshReg$(_c, \"PruebasNotificaciones\");\n$RefreshReg$(_c2, \"HumedadAlert\");\n$RefreshReg$(_c3, \"TemperaturaAlert\");","map":{"version":3,"names":["useState","axios","jwtDecode","jsxDEV","_jsxDEV","PruebasNotificaciones","_s","temperatura","setTemperatura","humedad","setHumedad","children","TemperaturaAlert","fileName","_jsxFileName","lineNumber","columnNumber","HumedadAlert","_c","_s2","inputValue","setInputValue","toString","lastAlertValue","setLastAlertValue","alertStatus","setAlertStatus","token","localStorage","getItem","ID_usuario","id","handleInputChange","e","target","value","handleUpdateHumedad","newHumedad","parseFloat","isNaN","gestionarNotificacionHumedad","setTimeout","className","htmlFor","type","onChange","step","onClick","toFixed","_c2","Marca_tiempo","Date","toISOString","slice","replace","enviarHumedad","humedadFormateada","Math","abs","console","log","enviarEmailHumedad","notificacionResponse","post","tipo","descripcion","time_alert","headers","idNotificacion","data","id_notificacion","id_user","error","message","Zona","undefined","Error","Medicion","timeout","response","fetch","method","body","JSON","stringify","result","json","ok","_s3","handleUpdateTemperature","newTemperatura","gestionarNotificacion","_c3","enviarTemperatura","temperaturaFormateada","enviarEmail","$RefreshReg$"],"sources":["C:/Users/Roger/Documents/TT2_AVANCES/prototipo-gecko/frontend/src/pages/pruebasNotificaciones.jsx"],"sourcesContent":["import { useState } from 'react';\r\nimport axios from 'axios';\r\nimport { jwtDecode } from 'jwt-decode';\r\n\r\n/**\r\n * Componente principal de monitoreo de temperatura y humedad\r\n */\r\nconst PruebasNotificaciones = () => {\r\n  const [temperatura, setTemperatura] = useState(25);\r\n  const [humedad, setHumedad] = useState(40);\r\n  \r\n  return (\r\n    <div>\r\n      <TemperaturaAlert temperatura={temperatura} setTemperatura={setTemperatura} />\r\n      <HumedadAlert humedad={humedad} setHumedad={setHumedad} />\r\n    </div>\r\n  );\r\n};\r\n\r\n/**\r\n * Componente para monitoreo de humedad\r\n */\r\nconst HumedadAlert = ({ humedad, setHumedad }) => {\r\n  const [inputValue, setInputValue] = useState(humedad.toString());\r\n  const [lastAlertValue, setLastAlertValue] = useState(null);\r\n  const [alertStatus, setAlertStatus] = useState('');\r\n\r\n  // Obtener ID del usuario desde el token JWT almacenado\r\n  const token = localStorage.getItem('token');\r\n  const ID_usuario = token ? jwtDecode(token).id : '';\r\n\r\n  const handleInputChange = (e) => setInputValue(e.target.value);\r\n\r\n  const handleUpdateHumedad = () => {\r\n    const newHumedad = parseFloat(inputValue);\r\n    if (!isNaN(newHumedad)) {\r\n      setHumedad(newHumedad);\r\n      gestionarNotificacionHumedad(newHumedad, ID_usuario, setAlertStatus, setLastAlertValue, lastAlertValue);\r\n    } else {\r\n      setAlertStatus('Por favor ingrese un número válido');\r\n      setTimeout(() => setAlertStatus(''), 3000);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"PruebasNotificaciones\">\r\n      <h2>Monitoreo De Humedad</h2>\r\n      <div>\r\n        <label htmlFor=\"humedad\">Humedad (%): </label>\r\n        <input id=\"humedad\" type=\"number\" value={inputValue} onChange={handleInputChange} step=\"0.1\" />\r\n        <button onClick={handleUpdateHumedad}>Actualizar</button>\r\n      </div>\r\n      <p>Humedad actual: <span>{humedad.toFixed(1)}%</span></p>\r\n      {alertStatus && <p>{alertStatus}</p>}\r\n    </div>\r\n  );\r\n};\r\n\r\n/**\r\n * Gestiona la notificación de humedad\r\n */\r\nconst gestionarNotificacionHumedad = async (humedad, ID_usuario, setAlertStatus, setLastAlertValue, lastAlertValue) => {\r\n  const Marca_tiempo = new Date().toISOString().slice(0, 19).replace('T', ' ');\r\n\r\n  // Insertar siempre la humedad en la base de datos\r\n  await enviarHumedad(ID_usuario, humedad, 'Zona 1', Marca_tiempo);\r\n\r\n  const humedadFormateada = humedad.toFixed(1);\r\n  \r\n  // Evitar notificaciones repetidas para valores similares\r\n  if (lastAlertValue !== null && Math.abs(humedad - lastAlertValue) < 1) {\r\n    console.log('Humedad similar a la anterior, no se enviará alerta.');\r\n    return;\r\n  }\r\n\r\n  // Verifica si la humedad está fuera del rango aceptable (30%-50%)\r\n  if (humedad < 30 || humedad > 50) {\r\n    try {\r\n      // Envía alerta por correo electrónico\r\n      await enviarEmailHumedad(humedad, setAlertStatus);\r\n\r\n      // Registra la notificación en la base de datos\r\n      const notificacionResponse = await axios.post(\r\n        'http://localhost:5000/api/addNotification',\r\n        {\r\n          tipo: 'humedad',\r\n          descripcion: `Humedad fuera de rango: ${humedadFormateada}%`,\r\n          time_alert: Marca_tiempo,\r\n        },\r\n        { headers: { 'Content-Type': 'application/json' } }\r\n      );\r\n\r\n      // Vincula la notificación con el usuario\r\n      const idNotificacion = notificacionResponse.data.id_notificacion;\r\n      if (idNotificacion) {\r\n        await axios.post(\r\n          'http://localhost:5000/api/addNotificationUser',\r\n          { id_notificacion: idNotificacion, id_user: ID_usuario },\r\n          { headers: { 'Content-Type': 'application/json' } }\r\n        );\r\n        console.log('Relación notificación-usuario guardada con éxito');\r\n      }\r\n\r\n      setLastAlertValue(humedad);\r\n    } catch (error) {\r\n      console.error('Error al gestionar la notificación de humedad:', error);\r\n      setAlertStatus(`Error de conexión: ${error.message}`);\r\n    }\r\n  }\r\n};\r\n\r\n/**\r\n * Registra la humedad en la base de datos\r\n */\r\nconst enviarHumedad = async (ID_usuario, humedad, Zona, Marca_tiempo) => {\r\n  try {\r\n    if (!ID_usuario || humedad === undefined || !Zona || !Marca_tiempo) {\r\n      console.error('Datos incompletos para humedad:', { ID_usuario, humedad, Zona, Marca_tiempo });\r\n      throw new Error('Todos los campos son obligatorios');\r\n    }\r\n\r\n    console.log('Registrando humedad en la base de datos:', {\r\n      ID_usuario,\r\n      Medicion: humedad,\r\n      Zona,\r\n      Marca_tiempo\r\n    });\r\n\r\n    await axios.post(\r\n      'http://localhost:5000/api/addhumedad',\r\n      {\r\n        ID_usuario,\r\n        Medicion: humedad,\r\n        Zona,\r\n        Marca_tiempo\r\n      },\r\n      { headers: { \"Content-Type\": \"application/json\" }, timeout: 10000 }\r\n    );\r\n\r\n    console.log('Humedad guardada correctamente.');\r\n  } catch (error) {\r\n    console.error('Error al guardar la humedad:', error);\r\n  }\r\n};\r\n\r\n/**\r\n * Envía una alerta de humedad por correo electrónico\r\n * Usa el mismo endpoint que temperatura pero con diferente payload\r\n */\r\nconst enviarEmailHumedad = async (humedad, setAlertStatus) => {\r\n  setAlertStatus('Enviando alerta de humedad...');\r\n  try {\r\n    const response = await fetch('http://localhost:5000/send-email', {\r\n      method: 'POST',\r\n      headers: { 'Content-Type': 'application/json' },\r\n      body: JSON.stringify({ \r\n        // Mantenemos la misma estructura que espera el servidor, pero con humedad\r\n        temperatura: humedad,\r\n        descripcion: `Alerta de humedad fuera de rango: ${humedad}%`,\r\n        tipo: 'humedad'\r\n      }),\r\n    });\r\n\r\n    const result = await response.json();\r\n    if (response.ok) {\r\n      console.log('Alerta de humedad enviada con éxito:', result.message);\r\n      setAlertStatus('Alerta de humedad enviada con éxito');\r\n    } else {\r\n      console.error('Error en la respuesta del servidor:', result.message);\r\n      setAlertStatus(`Error: ${result.message}`);\r\n    }\r\n  } catch (error) {\r\n    console.error('Error al enviar la alerta de humedad:', error);\r\n    setAlertStatus(`Error de conexión: ${error.message}`);\r\n  }\r\n};\r\n\r\n// Mantener el componente TemperaturaAlert y sus funciones auxiliares\r\nconst TemperaturaAlert = ({ temperatura, setTemperatura }) => {\r\n  const [inputValue, setInputValue] = useState(temperatura.toString());\r\n  const [lastAlertValue, setLastAlertValue] = useState(null);\r\n  const [alertStatus, setAlertStatus] = useState('');\r\n\r\n  const token = localStorage.getItem('token');\r\n  const ID_usuario = token ? jwtDecode(token).id : '';\r\n\r\n  const handleInputChange = (e) => setInputValue(e.target.value);\r\n\r\n  const handleUpdateTemperature = () => {\r\n    const newTemperatura = parseFloat(inputValue);\r\n    if (!isNaN(newTemperatura)) {\r\n      setTemperatura(newTemperatura);\r\n      gestionarNotificacion(newTemperatura, ID_usuario, setAlertStatus, setLastAlertValue, lastAlertValue);\r\n    } else {\r\n      setAlertStatus('Por favor ingrese un número válido');\r\n      setTimeout(() => setAlertStatus(''), 3000);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"PruebasNotificaciones\">\r\n      <h2>Monitoreo De Temperatura</h2>\r\n      <div>\r\n        <label htmlFor=\"temperatura\">Temperatura (°C): </label>\r\n        <input id=\"temperatura\" type=\"number\" value={inputValue} onChange={handleInputChange} step=\"0.1\" />\r\n        <button onClick={handleUpdateTemperature}>Actualizar</button>\r\n      </div>\r\n      <p>Temperatura actual: <span>{temperatura.toFixed(2)}°C</span></p>\r\n      {alertStatus && <p>{alertStatus}</p>}\r\n    </div>\r\n  );\r\n};\r\n\r\n// Mantener las funciones originales de temperatura\r\nconst gestionarNotificacion = async (temperatura, ID_usuario, setAlertStatus, setLastAlertValue, lastAlertValue) => {\r\n  const Marca_tiempo = new Date().toISOString().slice(0, 19).replace('T', ' ');\r\n\r\n  await enviarTemperatura(ID_usuario, temperatura, 'Zona 1', Marca_tiempo);\r\n\r\n  const temperaturaFormateada = temperatura.toFixed(2);\r\n  console.log('Temperatura formateada:', temperaturaFormateada);\r\n\r\n  if (lastAlertValue !== null && Math.abs(temperatura - lastAlertValue) < 1) {\r\n    console.log('Temperatura similar a la anterior, no se enviará alerta.');\r\n    return;\r\n  }\r\n\r\n  if (temperatura < 22 || temperatura > 32) {\r\n    try {\r\n      await enviarEmail('Temperatura fuera de rango', temperatura, setAlertStatus);\r\n\r\n      const notificacionResponse = await axios.post(\r\n        'http://localhost:5000/api/addNotification',\r\n        {\r\n          tipo: 'temperatura',\r\n          descripcion: `Temperatura fuera de rango: ${temperaturaFormateada}°C`,\r\n          time_alert: Marca_tiempo,\r\n        },\r\n        { headers: { 'Content-Type': 'application/json' } }\r\n      );\r\n\r\n      const idNotificacion = notificacionResponse.data.id_notificacion;\r\n      if (idNotificacion) {\r\n        await axios.post(\r\n          'http://localhost:5000/api/addNotificationUser',\r\n          { id_notificacion: idNotificacion, id_user: ID_usuario },\r\n          { headers: { 'Content-Type': 'application/json' } }\r\n        );\r\n        console.log('Relación notificación-usuario guardada con éxito');\r\n      }\r\n\r\n      setLastAlertValue(temperatura);\r\n    } catch (error) {\r\n      console.error('Error al gestionar la notificación:', error);\r\n      setAlertStatus(`Error de conexión: ${error.message}`);\r\n    }\r\n  }\r\n};\r\n\r\nconst enviarTemperatura = async (ID_usuario, temperatura, Zona, Marca_tiempo) => {\r\n  try {\r\n    if (!ID_usuario || !temperatura || !Zona || !Marca_tiempo) {\r\n      console.error('Datos incompletos:', { ID_usuario, temperatura, Zona, Marca_tiempo });\r\n      throw new Error('Todos los campos son obligatorios');\r\n    }\r\n\r\n    console.log('Registrando temperatura en la base de datos:', {\r\n      ID_usuario,\r\n      Medicion: temperatura,\r\n      Zona,\r\n      Marca_tiempo\r\n    });\r\n\r\n    await axios.post(\r\n      'http://localhost:5000/api/addtemperatura',\r\n      {\r\n        ID_usuario,\r\n        Medicion: temperatura,\r\n        Zona,\r\n        Marca_tiempo\r\n      },\r\n      { headers: { \"Content-Type\": \"application/json\" }, timeout: 10000 }\r\n    );\r\n\r\n    console.log('Temperatura guardada correctamente.');\r\n  } catch (error) {\r\n    console.error('Error al guardar la temperatura:', error);\r\n  }\r\n};\r\n\r\nconst enviarEmail = async (descripcion, temperatura, setAlertStatus) => {\r\n  setAlertStatus('Enviando alerta...');\r\n  try {\r\n    const response = await fetch('http://localhost:5000/send-email', {\r\n      method: 'POST',\r\n      headers: { 'Content-Type': 'application/json' },\r\n      body: JSON.stringify({ descripcion, temperatura }),\r\n    });\r\n\r\n    const result = await response.json();\r\n    if (response.ok) {\r\n      console.log('Alerta enviada con éxito:', result.message);\r\n      setAlertStatus('Alerta enviada con éxito');\r\n    } else {\r\n      console.error('Error en la respuesta del servidor:', result.message);\r\n      setAlertStatus(`Error: ${result.message}`);\r\n    }\r\n  } catch (error) {\r\n    console.error('Error al enviar la alerta:', error);\r\n    setAlertStatus(`Error de conexión: ${error.message}`);\r\n  }\r\n};\r\n\r\nexport default PruebasNotificaciones;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}