{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Roger\\\\Documents\\\\TT2_AVANCES\\\\prototipo-gecko\\\\frontend\\\\src\\\\pages\\\\pruebasNotificaciones.jsx\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport { useState } from 'react';\nimport axios from 'axios';\nimport { jwtDecode } from 'jwt-decode';\n\n/**\r\n * Componente para monitorear temperatura y humedad con sistema de alertas\r\n * Permite actualizar valores manualmente y envía notificaciones cuando están fuera de rango\r\n */\n\n// Constantes de configuración\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst CONFIG = {\n  temperatura: {\n    minimo: 22,\n    maximo: 32,\n    unidad: '°C',\n    endpoint: 'addtemperatura'\n  },\n  humedad: {\n    minimo: 30,\n    maximo: 50,\n    unidad: '%',\n    endpoint: 'addhumedad'\n  },\n  luz_uv: {\n    minimo: 0.4,\n    maximo: 0.7,\n    unidad: 'lux',\n    endpoint: 'addiluminacion'\n  }\n};\n\n/**\r\n * Envía una alerta por correo electrónico\r\n * @param {string} descripcion - Descripción de la alerta\r\n * @param {number} valor - Valor que generó la alerta\r\n * @param {string} tipo - Tipo de alerta ('temperatura' o 'humedad')\r\n * @param {Function} setAlertStatus - Función para actualizar el estado de la alerta\r\n */\nconst enviarEmail = async (descripcion, valor, tipo, setAlertStatus) => {\n  setAlertStatus(`Enviando alerta de ${tipo}...`);\n  try {\n    // Configuramos el payload con compatibilidad para ambos tipos\n    const payload = {\n      descripcion,\n      valor,\n      tipo\n    };\n    if (tipo === 'temperatura') payload.temperatura = valor;\n    const response = await fetch('http://localhost:5000/send-email', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(payload)\n    });\n    const result = await response.json();\n    if (response.ok) {\n      console.log(`Alerta de ${tipo} enviada con éxito:`, result.message);\n      setAlertStatus(`Alerta de ${tipo} enviada con éxito`);\n    } else {\n      console.error('Error en la respuesta del servidor:', result.message);\n      setAlertStatus(`Error: ${result.message}`);\n    }\n  } catch (error) {\n    console.error(`Error al enviar la alerta de ${tipo}:`, error);\n    setAlertStatus(`Error de conexión: ${error.message}`);\n  }\n};\n\n/**\r\n * Envía una medición a la base de datos\r\n * @param {string} tipo - Tipo de medición ('temperatura' o 'humedad')\r\n * @param {string} ID_usuario - ID del usuario\r\n * @param {number} valor - Valor a guardar\r\n * @param {string} Zona - Zona de la medición\r\n * @param {string} Marca_tiempo - Marca de tiempo\r\n */\nconst enviarMedicion = async (tipo, ID_usuario, valor, Zona, Marca_tiempo) => {\n  try {\n    // Validar que tenemos todos los datos necesarios\n    if (!ID_usuario || valor === undefined || !Zona || !Marca_tiempo) {\n      console.error(`Datos incompletos para ${tipo}:`, {\n        ID_usuario,\n        valor,\n        Zona,\n        Marca_tiempo\n      });\n      throw new Error('Todos los campos son obligatorios');\n    }\n    console.log(`Registrando ${tipo} en la base de datos:`, {\n      ID_usuario,\n      Medicion: valor,\n      Zona,\n      Marca_tiempo\n    });\n\n    // Enviar datos al endpoint correspondiente\n    await axios.post(`http://localhost:5000/api/${CONFIG[tipo].endpoint}`, {\n      ID_usuario,\n      Medicion: valor,\n      Zona,\n      Marca_tiempo\n    }, {\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      timeout: 10000\n    });\n    console.log(`${tipo} guardada correctamente.`);\n  } catch (error) {\n    console.error(`Error al guardar ${tipo}:`, error);\n  }\n};\n\n/**\r\n * Gestiona una notificación (registro, alerta y notificación al usuario)\r\n * @param {string} tipo - Tipo de medición ('temperatura' o 'humedad')\r\n * @param {number} valor - Valor de la medición\r\n * @param {string} ID_usuario - ID del usuario\r\n * @param {Function} setAlertStatus - Función para actualizar el estado de la alerta\r\n * @param {Function} setLastAlertValue - Función para guardar el último valor que generó alerta\r\n * @param {number|null} lastAlertValue - Último valor que generó alerta\r\n */\nconst gestionarNotificacion = async (tipo, valor, ID_usuario, setAlertStatus, setLastAlertValue, lastAlertValue) => {\n  const Marca_tiempo = new Date().toISOString().slice(0, 19).replace('T', ' ');\n  const config = CONFIG[tipo];\n\n  // Guardar siempre la medición en la base de datos\n  await enviarMedicion(tipo, ID_usuario, valor, 'Zona 1', Marca_tiempo);\n  const valorFormateado = valor.toFixed(2);\n  console.log(`${tipo} formateada:`, valorFormateado);\n\n  // Evitar alertas repetidas para valores similares\n  if (lastAlertValue !== null && Math.abs(valor - lastAlertValue) < 1) {\n    console.log(`${tipo} similar a la anterior, no se enviará alerta.`);\n    return;\n  }\n\n  // Verificar si el valor está fuera de rango\n  if (valor < config.minimo || valor > config.maximo) {\n    try {\n      // Enviar alerta por correo\n      await enviarEmail(`${tipo} fuera de rango`, valor, tipo, setAlertStatus);\n\n      // Crear una notificación en el sistema\n      const notificacionResponse = await axios.post('http://localhost:5000/api/addNotification', {\n        tipo,\n        descripcion: `${tipo} fuera de rango: ${valorFormateado}${config.unidad}`,\n        time_alert: Marca_tiempo\n      }, {\n        headers: {\n          'Content-Type': 'application/json'\n        }\n      });\n\n      // Asociar la notificación al usuario\n      const idNotificacion = notificacionResponse.data.id_notificacion;\n      if (idNotificacion) {\n        await axios.post('http://localhost:5000/api/addNotificationUser', {\n          id_notificacion: idNotificacion,\n          id_user: ID_usuario\n        }, {\n          headers: {\n            'Content-Type': 'application/json'\n          }\n        });\n        console.log('Relación notificación-usuario guardada con éxito');\n      }\n      setLastAlertValue(valor);\n    } catch (error) {\n      console.error(`Error al gestionar la notificación de ${tipo}:`, error);\n      setAlertStatus(`Error de conexión: ${error.message}`);\n    }\n  }\n};\n\n/**\r\n * Componente para monitoreo de una variable (temperatura o humedad)\r\n * @param {Object} props - Propiedades del componente\r\n * @param {string} props.tipo - Tipo de variable ('temperatura' o 'humedad')\r\n * @param {number} props.valor - Valor actual\r\n * @param {Function} props.setValor - Función para actualizar el valor\r\n */\nconst MonitoreoComponente = ({\n  tipo,\n  valor,\n  setValor\n}) => {\n  _s();\n  const [inputValue, setInputValue] = useState(valor.toString());\n  const [lastAlertValue, setLastAlertValue] = useState(null);\n  const [alertStatus, setAlertStatus] = useState('');\n  const config = CONFIG[tipo];\n  const token = localStorage.getItem('token');\n  const ID_usuario = token ? jwtDecode(token).id : '';\n  const handleInputChange = e => setInputValue(e.target.value);\n  const handleUpdateValue = () => {\n    const newValue = parseFloat(inputValue);\n    if (!isNaN(newValue)) {\n      setValor(newValue);\n      gestionarNotificacion(tipo, newValue, ID_usuario, setAlertStatus, setLastAlertValue, lastAlertValue);\n    } else {\n      setAlertStatus('Por favor ingrese un número válido');\n      setTimeout(() => setAlertStatus(''), 3000);\n    }\n  };\n\n  // Capitalizar la primera letra para el título\n  const tipoCapitalizado = tipo.charAt(0).toUpperCase() + tipo.slice(1);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: `Monitoreo${tipoCapitalizado}`,\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: [\"Monitoreo De \", tipoCapitalizado]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 202,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: tipo,\n        children: [tipoCapitalizado, \" (\", config.unidad, \"): \"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 204,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        id: tipo,\n        type: \"number\",\n        value: inputValue,\n        onChange: handleInputChange,\n        step: \"0.1\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 205,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleUpdateValue,\n        children: \"Actualizar\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 212,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 203,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [tipoCapitalizado, \" actual: \", /*#__PURE__*/_jsxDEV(\"span\", {\n        children: [valor.toFixed(2), config.unidad]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 214,\n        columnNumber: 37\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 214,\n      columnNumber: 7\n    }, this), alertStatus && /*#__PURE__*/_jsxDEV(\"p\", {\n      children: alertStatus\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 215,\n      columnNumber: 23\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 201,\n    columnNumber: 5\n  }, this);\n};\n\n/**\r\n * Componente principal que integra el monitoreo de temperatura y humedad\r\n */\n_s(MonitoreoComponente, \"anwGaFoaZCs5fLZLWpduaQ/7BgE=\");\n_c = MonitoreoComponente;\nconst PruebasNotificaciones = () => {\n  _s2();\n  const [temperatura, setTemperatura] = useState(25);\n  const [humedad, setHumedad] = useState(40);\n  const [luz_uv, setLuzUV] = useState(0.5);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"PruebasNotificaciones\",\n    children: [/*#__PURE__*/_jsxDEV(MonitoreoComponente, {\n      tipo: \"temperatura\",\n      valor: temperatura,\n      setValor: setTemperatura\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 231,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"hr\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 236,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(MonitoreoComponente, {\n      tipo: \"humedad\",\n      valor: humedad,\n      setValor: setHumedad\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 237,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"hr\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 242,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(MonitoreoComponente, {\n      tipo: \"luz_uv\",\n      valor: luz_uv,\n      setValor: setLuzUV\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 243,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 230,\n    columnNumber: 5\n  }, this);\n};\n_s2(PruebasNotificaciones, \"pfSYBuL7ivQYrRNb/zDJAjA2r3A=\");\n_c2 = PruebasNotificaciones;\nexport default PruebasNotificaciones;\nvar _c, _c2;\n$RefreshReg$(_c, \"MonitoreoComponente\");\n$RefreshReg$(_c2, \"PruebasNotificaciones\");","map":{"version":3,"names":["useState","axios","jwtDecode","jsxDEV","_jsxDEV","CONFIG","temperatura","minimo","maximo","unidad","endpoint","humedad","luz_uv","enviarEmail","descripcion","valor","tipo","setAlertStatus","payload","response","fetch","method","headers","body","JSON","stringify","result","json","ok","console","log","message","error","enviarMedicion","ID_usuario","Zona","Marca_tiempo","undefined","Error","Medicion","post","timeout","gestionarNotificacion","setLastAlertValue","lastAlertValue","Date","toISOString","slice","replace","config","valorFormateado","toFixed","Math","abs","notificacionResponse","time_alert","idNotificacion","data","id_notificacion","id_user","MonitoreoComponente","setValor","_s","inputValue","setInputValue","toString","alertStatus","token","localStorage","getItem","id","handleInputChange","e","target","value","handleUpdateValue","newValue","parseFloat","isNaN","setTimeout","tipoCapitalizado","charAt","toUpperCase","className","children","fileName","_jsxFileName","lineNumber","columnNumber","htmlFor","type","onChange","step","onClick","_c","PruebasNotificaciones","_s2","setTemperatura","setHumedad","setLuzUV","_c2","$RefreshReg$"],"sources":["C:/Users/Roger/Documents/TT2_AVANCES/prototipo-gecko/frontend/src/pages/pruebasNotificaciones.jsx"],"sourcesContent":["import { useState } from 'react';\r\nimport axios from 'axios';\r\nimport { jwtDecode } from 'jwt-decode';\r\n\r\n/**\r\n * Componente para monitorear temperatura y humedad con sistema de alertas\r\n * Permite actualizar valores manualmente y envía notificaciones cuando están fuera de rango\r\n */\r\n\r\n// Constantes de configuración\r\nconst CONFIG = {\r\n  temperatura: {\r\n    minimo: 22,\r\n    maximo: 32,\r\n    unidad: '°C',\r\n    endpoint: 'addtemperatura'\r\n  },\r\n  humedad: {\r\n    minimo: 30,\r\n    maximo: 50,\r\n    unidad: '%',\r\n    endpoint: 'addhumedad'\r\n  },\r\n  luz_uv: {\r\n    minimo: 0.4,\r\n    maximo: 0.7,\r\n    unidad: 'lux',\r\n    endpoint: 'addiluminacion'\r\n  }\r\n};\r\n\r\n/**\r\n * Envía una alerta por correo electrónico\r\n * @param {string} descripcion - Descripción de la alerta\r\n * @param {number} valor - Valor que generó la alerta\r\n * @param {string} tipo - Tipo de alerta ('temperatura' o 'humedad')\r\n * @param {Function} setAlertStatus - Función para actualizar el estado de la alerta\r\n */\r\nconst enviarEmail = async (descripcion, valor, tipo, setAlertStatus) => {\r\n  setAlertStatus(`Enviando alerta de ${tipo}...`);\r\n  try {\r\n    // Configuramos el payload con compatibilidad para ambos tipos\r\n    const payload = { descripcion, valor, tipo };\r\n    if (tipo === 'temperatura') payload.temperatura = valor;\r\n    \r\n    const response = await fetch('http://localhost:5000/send-email', {\r\n      method: 'POST',\r\n      headers: { 'Content-Type': 'application/json' },\r\n      body: JSON.stringify(payload),\r\n    });\r\n\r\n    const result = await response.json();\r\n    if (response.ok) {\r\n      console.log(`Alerta de ${tipo} enviada con éxito:`, result.message);\r\n      setAlertStatus(`Alerta de ${tipo} enviada con éxito`);\r\n    } else {\r\n      console.error('Error en la respuesta del servidor:', result.message);\r\n      setAlertStatus(`Error: ${result.message}`);\r\n    }\r\n  } catch (error) {\r\n    console.error(`Error al enviar la alerta de ${tipo}:`, error);\r\n    setAlertStatus(`Error de conexión: ${error.message}`);\r\n  }\r\n};\r\n\r\n/**\r\n * Envía una medición a la base de datos\r\n * @param {string} tipo - Tipo de medición ('temperatura' o 'humedad')\r\n * @param {string} ID_usuario - ID del usuario\r\n * @param {number} valor - Valor a guardar\r\n * @param {string} Zona - Zona de la medición\r\n * @param {string} Marca_tiempo - Marca de tiempo\r\n */\r\nconst enviarMedicion = async (tipo, ID_usuario, valor, Zona, Marca_tiempo) => {\r\n  try {\r\n    // Validar que tenemos todos los datos necesarios\r\n    if (!ID_usuario || valor === undefined || !Zona || !Marca_tiempo) {\r\n      console.error(`Datos incompletos para ${tipo}:`, { ID_usuario, valor, Zona, Marca_tiempo });\r\n      throw new Error('Todos los campos son obligatorios');\r\n    }\r\n\r\n    console.log(`Registrando ${tipo} en la base de datos:`, {\r\n      ID_usuario,\r\n      Medicion: valor,\r\n      Zona,\r\n      Marca_tiempo\r\n    });\r\n\r\n    // Enviar datos al endpoint correspondiente\r\n    await axios.post(\r\n      `http://localhost:5000/api/${CONFIG[tipo].endpoint}`,\r\n      {\r\n        ID_usuario,\r\n        Medicion: valor,\r\n        Zona,\r\n        Marca_tiempo\r\n      },\r\n      { headers: { \"Content-Type\": \"application/json\" }, timeout: 10000 }\r\n    );\r\n\r\n    console.log(`${tipo} guardada correctamente.`);\r\n  } catch (error) {\r\n    console.error(`Error al guardar ${tipo}:`, error);\r\n  }\r\n};\r\n\r\n/**\r\n * Gestiona una notificación (registro, alerta y notificación al usuario)\r\n * @param {string} tipo - Tipo de medición ('temperatura' o 'humedad')\r\n * @param {number} valor - Valor de la medición\r\n * @param {string} ID_usuario - ID del usuario\r\n * @param {Function} setAlertStatus - Función para actualizar el estado de la alerta\r\n * @param {Function} setLastAlertValue - Función para guardar el último valor que generó alerta\r\n * @param {number|null} lastAlertValue - Último valor que generó alerta\r\n */\r\nconst gestionarNotificacion = async (tipo, valor, ID_usuario, setAlertStatus, setLastAlertValue, lastAlertValue) => {\r\n  const Marca_tiempo = new Date().toISOString().slice(0, 19).replace('T', ' ');\r\n  const config = CONFIG[tipo];\r\n  \r\n  // Guardar siempre la medición en la base de datos\r\n  await enviarMedicion(tipo, ID_usuario, valor, 'Zona 1', Marca_tiempo);\r\n\r\n  const valorFormateado = valor.toFixed(2);\r\n  console.log(`${tipo} formateada:`, valorFormateado);\r\n\r\n  // Evitar alertas repetidas para valores similares\r\n  if (lastAlertValue !== null && Math.abs(valor - lastAlertValue) < 1) {\r\n    console.log(`${tipo} similar a la anterior, no se enviará alerta.`);\r\n    return;\r\n  }\r\n\r\n  // Verificar si el valor está fuera de rango\r\n  if (valor < config.minimo || valor > config.maximo) {\r\n    try {\r\n      // Enviar alerta por correo\r\n      await enviarEmail(`${tipo} fuera de rango`, valor, tipo, setAlertStatus);\r\n\r\n      // Crear una notificación en el sistema\r\n      const notificacionResponse = await axios.post(\r\n        'http://localhost:5000/api/addNotification',\r\n        {\r\n          tipo,\r\n          descripcion: `${tipo} fuera de rango: ${valorFormateado}${config.unidad}`,\r\n          time_alert: Marca_tiempo,\r\n        },\r\n        { headers: { 'Content-Type': 'application/json' } }\r\n      );\r\n\r\n      // Asociar la notificación al usuario\r\n      const idNotificacion = notificacionResponse.data.id_notificacion;\r\n      if (idNotificacion) {\r\n        await axios.post(\r\n          'http://localhost:5000/api/addNotificationUser',\r\n          { id_notificacion: idNotificacion, id_user: ID_usuario },\r\n          { headers: { 'Content-Type': 'application/json' } }\r\n        );\r\n        console.log('Relación notificación-usuario guardada con éxito');\r\n      }\r\n\r\n      setLastAlertValue(valor);\r\n    } catch (error) {\r\n      console.error(`Error al gestionar la notificación de ${tipo}:`, error);\r\n      setAlertStatus(`Error de conexión: ${error.message}`);\r\n    }\r\n  }\r\n};\r\n\r\n/**\r\n * Componente para monitoreo de una variable (temperatura o humedad)\r\n * @param {Object} props - Propiedades del componente\r\n * @param {string} props.tipo - Tipo de variable ('temperatura' o 'humedad')\r\n * @param {number} props.valor - Valor actual\r\n * @param {Function} props.setValor - Función para actualizar el valor\r\n */\r\nconst MonitoreoComponente = ({ tipo, valor, setValor }) => {\r\n  const [inputValue, setInputValue] = useState(valor.toString());\r\n  const [lastAlertValue, setLastAlertValue] = useState(null);\r\n  const [alertStatus, setAlertStatus] = useState('');\r\n  const config = CONFIG[tipo];\r\n\r\n  const token = localStorage.getItem('token');\r\n  const ID_usuario = token ? jwtDecode(token).id : '';\r\n\r\n  const handleInputChange = (e) => setInputValue(e.target.value);\r\n\r\n  const handleUpdateValue = () => {\r\n    const newValue = parseFloat(inputValue);\r\n    if (!isNaN(newValue)) {\r\n      setValor(newValue);\r\n      gestionarNotificacion(tipo, newValue, ID_usuario, setAlertStatus, setLastAlertValue, lastAlertValue);\r\n    } else {\r\n      setAlertStatus('Por favor ingrese un número válido');\r\n      setTimeout(() => setAlertStatus(''), 3000);\r\n    }\r\n  };\r\n\r\n  // Capitalizar la primera letra para el título\r\n  const tipoCapitalizado = tipo.charAt(0).toUpperCase() + tipo.slice(1);\r\n\r\n  return (\r\n    <div className={`Monitoreo${tipoCapitalizado}`}>\r\n      <h2>Monitoreo De {tipoCapitalizado}</h2>\r\n      <div>\r\n        <label htmlFor={tipo}>{tipoCapitalizado} ({config.unidad}): </label>\r\n        <input \r\n          id={tipo} \r\n          type=\"number\" \r\n          value={inputValue} \r\n          onChange={handleInputChange} \r\n          step=\"0.1\" \r\n        />\r\n        <button onClick={handleUpdateValue}>Actualizar</button>\r\n      </div>\r\n      <p>{tipoCapitalizado} actual: <span>{valor.toFixed(2)}{config.unidad}</span></p>\r\n      {alertStatus && <p>{alertStatus}</p>}\r\n    </div>\r\n  );\r\n};\r\n\r\n/**\r\n * Componente principal que integra el monitoreo de temperatura y humedad\r\n */\r\nconst PruebasNotificaciones = () => {\r\n  const [temperatura, setTemperatura] = useState(25);\r\n  const [humedad, setHumedad] = useState(40);\r\n  const [luz_uv, setLuzUV] = useState(0.5);\r\n\r\n  \r\n  return (\r\n    <div className=\"PruebasNotificaciones\">\r\n      <MonitoreoComponente \r\n        tipo=\"temperatura\" \r\n        valor={temperatura} \r\n        setValor={setTemperatura} \r\n      />\r\n      <hr />\r\n      <MonitoreoComponente \r\n        tipo=\"humedad\" \r\n        valor={humedad} \r\n        setValor={setHumedad} \r\n      />\r\n        <hr />\r\n      <MonitoreoComponente \r\n        tipo=\"luz_uv\" \r\n        valor={luz_uv} \r\n        setValor={setLuzUV} \r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default PruebasNotificaciones;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}