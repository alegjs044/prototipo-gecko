{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Roger\\\\Documents\\\\TT2_AVANCES\\\\prototipo-gecko\\\\frontend\\\\src\\\\pages\\\\historial.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport Header from \"../components/Header\";\nimport Footer from \"../components/Footer\";\nimport { Line } from \"react-chartjs-2\";\nimport styled from 'styled-components';\nimport { useNavigate } from \"react-router-dom\";\nimport Button from \"../components/Button\";\nimport { ArrowDown } from \"lucide-react\";\nimport { jsPDF } from \"jspdf\";\n// Importamos axios para hacer peticiones HTTP a nuestra API\nimport axios from \"axios\";\n\n// Estilos (se mantienen igual que el código original)\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst Container = styled.div`\n  padding: 50px 30px;\n  margin: auto;\n  max-width: 1400px;\n  background: #f8f4e1;\n  border-radius: 20px;\n  box-shadow: 0px 4px 10px rgba(0, 0, 0, 0.2);\n  display: flex;\n  flex-direction: column;\n  gap: 20px;\n  min-height: 85vh;\n`;\n\n// El resto de los componentes styled se mantienen igual\n_c = Container;\nconst Column = styled.div`\n  display: flex;\n  flex-direction: column;\n  gap: 15px;\n`;\nconst Row = styled.div`\n  display: flex;\n  flex-direction: row;\n  justify-content: space-between;\n  gap: 20px;\n  padding: 20px;\n  margin: auto;\n  width: 100%;\n  border-radius: 25px;\n`;\nconst ControlsRow = styled(Row)`\n  background: transparent;\n  justify-content: flex-start;\n  gap: 15px;\n  padding: 10px 20px;\n`;\n_c2 = ControlsRow;\nconst ContentRow = styled(Row)`\n  display: flex;\n  flex-direction: row;\n  flex-wrap: nowrap;\n  justify-content: space-between;\n  gap: 30px;\n  \n  @media (max-width: 1200px) {\n    flex-direction: column;\n    align-items: center;\n  }\n`;\nconst CategorySelect = styled.select`\n  padding: 12px 15px;\n  border-radius: 25px;\n  border: 1px solid #ddd;\n  background-color: white;\n  width: 300px;\n  font-size: 16px;\n  appearance: none;\n  background-image: url(\"data:image/svg+xml;charset=UTF-8,%3csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 24 24' fill='none' stroke='currentColor' stroke-width='2' stroke-linecap='round' stroke-linejoin='round'%3e%3cpolyline points='6 9 12 15 18 9'%3e%3c/polyline%3e%3c/svg%3e\");\n  background-repeat: no-repeat;\n  background-position: right 1rem center;\n  background-size: 1em;\n  \n  &:focus {\n    outline: none;\n    border-color: #B4864D;\n  }\n`;\n_c3 = CategorySelect;\nconst RightButtonsContainer = styled.div`\n  display: flex;\n  gap: 15px;\n`;\n_c4 = RightButtonsContainer;\nconst SearchButton = styled.button`\n  background-color: #E74C3C;\n  color: white;\n  border: none;\n  border-radius: 5px;\n  padding: 8px 20px;\n  font-weight: bold;\n  cursor: pointer;\n  text-transform: uppercase;\n  font-size: 14px;\n  \n  &:hover {\n    background-color: #C0392B;\n  }\n`;\nconst DownloadButton = styled.button`\n  background-color: white;\n  border: 1px solid #ddd;\n  border-radius: 5px;\n  padding: 8px;\n  cursor: pointer;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  \n  &:hover {\n    background-color: #f5f5f5;\n  }\n`;\n_c5 = DownloadButton;\nconst DataPanel = styled.div`\n  background: rgba(123, 95, 61, 0.8);\n  box-shadow: inset -5px -5px 10px rgba(238, 209, 146, 0.5), \n              10px 10px 20px rgba(245, 239, 230, 0.2);\n  backdrop-filter: blur(10000px);\n  filter: drop-shadow(5px 5px 10px rgba(248, 202, 132, 3));\n  border: 1px solid rgba(248, 216, 186, 0.25);\n  border-radius: 10px;\n  padding: 15px;\n  width: 47%;\n  min-width: 300px;\n  min-height: 450px;\n  max-height: 500px;\n  overflow: auto;\n  \n  @media (max-width: 1200px) {\n    width: 100%;\n    max-width: 500px;\n  }\n`;\n_c6 = DataPanel;\nconst Table = styled.table`\n  width: 100%;\n  border-collapse: collapse;\n  background-color: white;\n  border-radius: 5px;\n  overflow: hidden;\n`;\n_c7 = Table;\nconst Th = styled.th`\n  background-color: #f0f0f0;\n  color: #333;\n  padding: 8px;\n  text-align: center;\n  border: 1px solid #ddd;\n  font-size: 14px;\n`;\n_c8 = Th;\nconst Td = styled.td`\n  padding: 6px 8px;\n  text-align: center;\n  border: 1px solid #ddd;\n  font-size: 14px;\n`;\n_c9 = Td;\nconst ChartContainer = styled.div`\n  background-color: white;\n  border-radius: 8px;\n  padding: 20px;\n  width: 100%;\n  height: 100%;\n  min-height: 300px;\n  overflow: hidden;\n  display: flex;\n  flex-direction: column;\n`;\n_c10 = ChartContainer;\nconst CurrentValue = styled.div`\n  text-align: center;\n  font-size: 3rem;\n  font-weight: bold;\n  margin-bottom: 10px;\n`;\n_c11 = CurrentValue;\nconst ChartTitle = styled.h3`\n  text-align: center;\n  background-color: #FF8C00;\n  color: white;\n  padding: 5px 15px;\n  border-radius: 4px;\n  margin: 0 auto 10px;\n  font-size: 16px;\n  display: inline-block;\n`;\n_c12 = ChartTitle;\nconst ChartTitleContainer = styled.div`\n  text-align: center;\n  margin-bottom: 5px;\n`;\n_c13 = ChartTitleContainer;\nconst Title = styled.h1`\n  text-align: center;\n  font-size: 2rem;\n  margin-bottom: 20px;\n  color: #333;\n`;\n\n// Categorías disponibles para seleccionar\nconst categories = ['Temperatura', 'Iluminacion', 'Humedad'];\n\n// Datos de ejemplo para Iluminación y Humedad (solo mantenemos estos, ya que Temperatura vendrá de la API)\nconst initialData = {\n  Iluminacion: [{\n    fecha: '01/02/2024',\n    dato: '350 lux'\n  }, {\n    fecha: '02/02/2024',\n    dato: '340 lux'\n  },\n  // ...resto de datos de iluminación\n  {\n    fecha: '18/02/2024',\n    dato: '430 lux'\n  }],\n  Humedad: [{\n    fecha: '01/02/2024',\n    dato: '60%'\n  }, {\n    fecha: '02/02/2024',\n    dato: '58%'\n  },\n  // ...resto de datos de humedad\n  {\n    fecha: '18/02/2024',\n    dato: '62%'\n  }]\n};\n\n// ----- FUNCIONES OPTIMIZADAS PARA MANEJO DE DATOS DE TEMPERATURA -----\n\n/**\r\n * Formatea una fecha ISO de la base de datos a formato de visualización DD/MM/YYYY\r\n * @param {String} dateTimeString - Fecha en formato ISO (ej: 2025-03-20T14:30:00)\r\n * @returns {String} - Fecha formateada (ej: 20/03/2025)\r\n */\nconst formatDate = dateTimeString => {\n  // Crear un objeto Date a partir del string de fecha\n  const date = new Date(dateTimeString);\n  // Formatear la fecha como DD/MM/YYYY con padding de ceros (01/01/2025 en lugar de 1/1/2025)\n  return `${date.getDate().toString().padStart(2, '0')}/${(date.getMonth() + 1).toString().padStart(2, '0')}/${date.getFullYear()}`;\n};\n\n/**\r\n * Formatea la hora de un timestamp para mostrarla en la gráfica\r\n * @param {String} dateTimeString - Fecha y hora en formato ISO\r\n * @returns {String} - Hora formateada (ej: 14:30)\r\n */\nconst formatTimeForChart = dateTimeString => {\n  // Crear un objeto Date a partir del string de fecha y hora\n  const date = new Date(dateTimeString);\n  // Devolver solo la hora y minutos formateados como HH:MM\n  return `${date.getHours()}:${date.getMinutes().toString().padStart(2, '0')}`;\n};\n\n/**\r\n * Prepara los datos para la gráfica Chart.js\r\n * @param {Array} data - Array de objetos con datos\r\n * @param {String} category - Categoría seleccionada\r\n * @returns {Object} Objeto formateado para Chart.js\r\n */\nconst prepareChartData = (data, category) => {\n  // CASO 1: Si es temperatura y tenemos datos reales de la API\n  if (category === 'Temperatura' && Array.isArray(data) && data.length > 0) {\n    // Tomar solo los últimos 6 registros (o menos si hay menos disponibles) y revertir para orden cronológico\n    const lastSixData = data.slice(0, Math.min(6, data.length)).reverse();\n\n    // Construir los datos para la gráfica\n    return {\n      // Etiquetas del eje X: horas de las mediciones\n      labels: lastSixData.map(item => formatTimeForChart(item.Marca_tiempo)),\n      // Conjunto de datos para dibujar\n      datasets: [{\n        label: category,\n        // Convertimos las mediciones a números para la gráfica\n        data: lastSixData.map(item => parseFloat(item.Medicion)),\n        // Configuración visual de la línea\n        fill: false,\n        backgroundColor: 'rgba(255, 165, 0, 0.2)',\n        borderColor: '#FFA500',\n        borderWidth: 3,\n        tension: 0.3,\n        pointBackgroundColor: '#FFA500',\n        pointBorderColor: '#FFF',\n        pointBorderWidth: 2,\n        pointRadius: 5,\n        pointHoverRadius: 7\n      }]\n    };\n  }\n  // CASO 2: Para otras categorías (Iluminación y Humedad) usamos datos de ejemplo\n  else {\n    // Datos de ejemplo para gráficas de Humedad\n    const fixedHumidityData = [{\n      hora: '6 AM',\n      valor: 60\n    }, {\n      hora: '9 AM',\n      valor: 63\n    }, {\n      hora: '12 PM',\n      valor: 67\n    }, {\n      hora: '3 PM',\n      valor: 70\n    }, {\n      hora: '6 PM',\n      valor: 65\n    }, {\n      hora: '9 PM',\n      valor: 62\n    }];\n\n    // Datos de ejemplo para gráficas de Iluminación\n    const fixedIlluminationData = [{\n      hora: '6 AM',\n      valor: 320\n    }, {\n      hora: '9 AM',\n      valor: 380\n    }, {\n      hora: '12 PM',\n      valor: 420\n    }, {\n      hora: '3 PM',\n      valor: 430\n    }, {\n      hora: '6 PM',\n      valor: 390\n    }, {\n      hora: '9 PM',\n      valor: 350\n    }];\n\n    // Seleccionar el conjunto de datos según la categoría\n    let dataToUse = category === 'Humedad' ? fixedHumidityData : fixedIlluminationData;\n\n    // Devolver los datos formateados para Chart.js\n    return {\n      labels: dataToUse.map(item => item.hora),\n      datasets: [{\n        label: category,\n        data: dataToUse.map(item => item.valor),\n        fill: false,\n        backgroundColor: 'rgba(255, 165, 0, 0.2)',\n        borderColor: '#FFA500',\n        borderWidth: 3,\n        tension: 0.3,\n        pointBackgroundColor: '#FFA500',\n        pointBorderColor: '#FFF',\n        pointBorderWidth: 2,\n        pointRadius: 5,\n        pointHoverRadius: 7\n      }]\n    };\n  }\n};\n\n// Configuración de opciones para la gráfica\nconst getChartOptions = category => {\n  // Determinar el rango según la categoría\n  let min, max, stepSize;\n  switch (category) {\n    case 'Temperatura':\n      // Valores ampliados para acomodar un rango más amplio de temperaturas\n      min = 20.0;\n      max = 35.0;\n      stepSize = 2.5;\n      break;\n    case 'Humedad':\n      min = 55;\n      max = 75;\n      stepSize = 5;\n      break;\n    case 'Iluminacion':\n      min = 300;\n      max = 450;\n      stepSize = 50;\n      break;\n    default:\n      min = null;\n      max = null;\n      stepSize = null;\n  }\n  return {\n    responsive: true,\n    maintainAspectRatio: false,\n    plugins: {\n      legend: {\n        display: false\n      },\n      tooltip: {\n        mode: 'index',\n        intersect: false,\n        callbacks: {\n          label: function (context) {\n            let label = context.dataset.label || '';\n            if (label) {\n              label += ': ';\n            }\n            if (context.parsed.y !== null) {\n              label += context.parsed.y;\n              // Añadir unidad según la categoría\n              if (category === 'Temperatura') label += '°C';else if (category === 'Humedad') label += '%';else if (category === 'Iluminacion') label += ' lux';\n            }\n            return label;\n          }\n        }\n      }\n    },\n    scales: {\n      x: {\n        display: true,\n        grid: {\n          display: true,\n          color: '#CCCCCC',\n          drawBorder: true\n        },\n        ticks: {\n          font: {\n            size: 12\n          }\n        },\n        title: {\n          display: true,\n          text: 'Tiempo',\n          font: {\n            size: 14\n          }\n        }\n      },\n      y: {\n        display: true,\n        grid: {\n          display: true,\n          color: '#CCCCCC',\n          drawBorder: true\n        },\n        min: min,\n        max: max,\n        ticks: {\n          stepSize: stepSize,\n          font: {\n            size: 12\n          }\n        },\n        title: {\n          display: true,\n          text: category,\n          font: {\n            size: 14\n          }\n        }\n      }\n    },\n    elements: {\n      point: {\n        radius: 5,\n        hoverRadius: 7,\n        borderWidth: 2\n      },\n      line: {\n        tension: 0.3,\n        borderWidth: 3\n      }\n    },\n    layout: {\n      padding: {\n        top: 5,\n        right: 20,\n        bottom: 20,\n        left: 20\n      }\n    }\n  };\n};\n\n/**\r\n * Componente principal para la visualización del historial de datos\r\n */\nfunction Historial() {\n  _s();\n  // Estado para la búsqueda\n  const [search, setSearch] = useState('');\n\n  // Estado para la categoría seleccionada (por defecto 'Temperatura')\n  const [selectedCategory, setSelectedCategory] = useState(categories[0]);\n\n  // Estado para almacenar los datos de temperatura cargados desde la API\n  const [temperatureData, setTemperatureData] = useState([]);\n\n  // Estado para almacenar los datos de humedad cargados desde la API\n  const [humidityData, setHumidityData] = useState([]);\n\n  // Estado para los datos filtrados según búsqueda y categoría\n  const [filteredData, setFilteredData] = useState([]);\n\n  // Estado para los datos procesados para la gráfica\n  const [chartData, setChartData] = useState(null);\n\n  // Estado para el valor actual a mostrar prominentemente\n  const [currentValue, setCurrentValue] = useState('');\n\n  // Estado para las opciones de configuración de la gráfica\n  const [chartOptions, setChartOptions] = useState(getChartOptions(categories[0]));\n\n  // Estado para controlar errores de carga\n  const [error, setError] = useState(null);\n\n  // Estado para controlar indicador de carga\n  const [loading, setLoading] = useState(true);\n  const navigate = useNavigate();\n\n  // Verificar autenticación al cargar el componente\n  useEffect(() => {\n    const token = localStorage.getItem(\"token\");\n    if (!token) {\n      navigate(\"/login\");\n    }\n  }, [navigate]);\n\n  // ----- OPTIMIZACIÓN 1: EFECTO PARA CARGAR DATOS DE TEMPERATURA -----\n  useEffect(() => {\n    // Función asíncrona para obtener datos de la API\n    const fetchTemperatureData = async () => {\n      try {\n        // 1. Indicar que estamos cargando datos\n        setLoading(true);\n\n        // 2. Realizar la petición GET a la API\n        const response = await axios.get('http://localhost:5000/api/temperatura');\n\n        // 3. Verificar si hay datos en la respuesta\n        if (response.data && response.data.length > 0) {\n          // 4. Procesar los datos recibidos para adaptarlos al formato esperado\n          const formattedData = response.data.map(item => ({\n            fecha: formatDate(item.Marca_tiempo),\n            // Formateamos fecha para visualización\n            dato: `${item.Medicion}°C`,\n            // Agregamos unidad a la medición\n            zona: item.Zona,\n            // Guardamos la zona de la temperatura\n            raw: item // Guardamos el objeto original para acceso a datos crudos\n          }));\n\n          // 5. Actualizar el estado con los datos formateados\n          setTemperatureData(formattedData);\n        } else {\n          // 6. Si no hay datos, establecer un array vacío\n          setTemperatureData([]);\n        }\n\n        // 7. Finalizar el estado de carga\n        setLoading(false);\n      } catch (err) {\n        // 8. Manejar errores de la petición\n        console.error(\"Error al cargar datos de temperatura:\", err);\n        setError(\"Error al cargar datos de temperatura. Por favor, intente de nuevo más tarde.\");\n        setLoading(false);\n      }\n    };\n\n    // Ejecutar la función de carga\n    fetchTemperatureData();\n  }, []); // Se ejecuta solo al montar el componente\n\n  // ----- EFECTO PARA CARGAR DATOS DE HUMEDAD -----\n  useEffect(() => {\n    // Función asíncrona para obtener datos de humedad\n    const fetchHumidityData = async () => {\n      try {\n        // Realizar la petición GET a la API\n        const response = await axios.get('http://localhost:5000/api/humedad');\n\n        // Verificar si hay datos en la respuesta\n        if (response.data && response.data.length > 0) {\n          // Procesar los datos recibidos para adaptarlos al formato esperado\n          const formattedData = response.data.map(item => ({\n            fecha: formatDate(item.Marca_tiempo),\n            // Formateamos fecha para visualización\n            dato: `${item.Medicion}%`,\n            // Agregamos unidad a la medición\n            raw: item // Guardamos el objeto original para acceso a datos crudos\n          }));\n\n          // Actualizar el estado con los datos formateados\n          setHumidityData(formattedData);\n        } else {\n          // Si no hay datos, establecer un array vacío\n          setHumidityData([]);\n        }\n\n        // Finalizar el estado de carga\n        setLoading(false);\n      } catch (err) {\n        // Manejar errores de la petición\n        console.error(\"Error al cargar datos de humedad:\", err);\n        setError(\"Error al cargar datos de humedad. Por favor, intente de nuevo más tarde.\");\n        setLoading(false);\n      }\n    };\n\n    // Ejecutar la función de carga\n    fetchHumidityData();\n  }, []); // Se ejecuta solo al montar el componente\n\n  // ----- EFECTO PARA ACTUALIZAR DATOS SEGÚN CATEGORÍA -----\n  useEffect(() => {\n    // CASO: TEMPERATURA - Usar datos reales de la API\n    if (selectedCategory === 'Temperatura') {\n      // 1. Actualizar los datos de la tabla\n      setFilteredData(temperatureData);\n\n      // 2. Preparar datos para la gráfica\n      if (temperatureData.length > 0) {\n        // Extraer los datos originales desde los objetos 'raw'\n        const rawTemperatureData = temperatureData.map(item => item.raw);\n\n        // Generar datos para la gráfica pasando los datos originales\n        setChartData(prepareChartData(rawTemperatureData, selectedCategory));\n\n        // 3. Actualizar el valor actual (primer registro, el más reciente)\n        setCurrentValue(temperatureData[0].dato);\n      } else {\n        // Si no hay datos, mostrar \"--\" como valor actual\n        setCurrentValue(\"--\");\n      }\n    }\n    // CASO: HUMEDAD - Usar datos reales de la API\n    else if (selectedCategory === 'Humedad') {\n      // 1. Actualizar los datos de la tabla\n      setFilteredData(humidityData);\n\n      // 2. Preparar datos para la gráfica\n      if (humidityData.length > 0) {\n        // Extraer los datos originales desde los objetos 'raw'\n        const rawHumidityData = humidityData.map(item => item.raw);\n\n        // Generar datos para la gráfica pasando los datos originales\n        setChartData(prepareChartData(rawHumidityData, selectedCategory));\n\n        // 3. Actualizar el valor actual (primer registro, el más reciente)\n        setCurrentValue(humidityData[0].dato);\n      } else {\n        // Si no hay datos, mostrar \"--\" como valor actual\n        setCurrentValue(\"--\");\n      }\n    }\n    // CASO: OTRAS CATEGORÍAS - Usar datos de ejemplo\n    else {\n      // 1. Actualizar los datos de la tabla\n      setFilteredData(initialData[selectedCategory]);\n\n      // 2. Preparar datos para la gráfica\n      setChartData(prepareChartData(null, selectedCategory));\n\n      // 3. Actualizar el valor actual\n      const lastItem = initialData[selectedCategory][initialData[selectedCategory].length - 1];\n      setCurrentValue(lastItem.dato);\n    }\n\n    // 4. Actualizar opciones de la gráfica según la categoría\n    setChartOptions(getChartOptions(selectedCategory));\n  }, [selectedCategory, temperatureData, humidityData]); // Se ejecuta cuando cambia la categoría o los datos\n\n  // Manejador para el cambio de categoría en el selector\n  const handleCategoryChange = event => {\n    setSelectedCategory(event.target.value);\n  };\n\n  // Función para manejar el filtro de búsqueda\n  const handleSearchChange = event => {\n    const query = event.target.value.toLowerCase();\n    setSearch(query);\n\n    // Filtrado diferente según la categoría seleccionada\n    if (selectedCategory === 'Temperatura') {\n      // Para temperatura, filtrar en datos reales de API\n      const filtered = temperatureData.filter(item => item.fecha.toLowerCase().includes(query) || item.dato.toLowerCase().includes(query) || item.zona && item.zona.toLowerCase().includes(query));\n      setFilteredData(filtered);\n    } else {\n      // Para otras categorías, filtrar en datos de ejemplo\n      const filtered = initialData[selectedCategory].filter(item => item.fecha.toLowerCase().includes(query) || item.dato.toLowerCase().includes(query));\n      setFilteredData(filtered);\n    }\n  };\n\n  // Función para descargar la tabla como PDF\n  const downloadPDF = () => {\n    const doc = new jsPDF();\n    let y = 20;\n    doc.text(`Tabla de Datos - ${selectedCategory}`, 20, y);\n    y += 10;\n\n    // Escribir los encabezados\n    doc.text(\"Fecha\", 20, y);\n    doc.text(\"Dato\", 80, y);\n    // Agregar columna de zona solo para temperatura\n    if (selectedCategory === 'Temperatura') {\n      doc.text(\"Zona\", 140, y);\n    }\n    y += 10;\n\n    // Escribir los datos de la tabla\n    filteredData.forEach(item => {\n      doc.text(item.fecha, 20, y);\n      doc.text(item.dato, 80, y);\n      if (selectedCategory === 'Temperatura' && item.zona) {\n        doc.text(item.zona, 140, y);\n      }\n      y += 10;\n\n      // Si llegamos al final de la página, crear una nueva\n      if (y > 280) {\n        doc.addPage();\n        y = 20;\n      }\n    });\n\n    // Guardar como PDF\n    doc.save(`tabla_${selectedCategory.toLowerCase()}.pdf`);\n  };\n\n  // Renderizar mensaje de carga o error si es necesario\n  if (loading) {\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(Header, {\n        showUserIcon: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 713,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Container, {\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            textAlign: 'center',\n            padding: '50px'\n          },\n          children: \"Cargando datos...\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 715,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 714,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Footer, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 719,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true);\n  }\n  if (error) {\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(Header, {\n        showUserIcon: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 727,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Container, {\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            textAlign: 'center',\n            padding: '50px',\n            color: 'red'\n          },\n          children: error\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 729,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 728,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Footer, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 733,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true);\n  }\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Header, {\n      showUserIcon: true\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 741,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Container, {\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        style: {\n          textAlign: 'center',\n          margin: '10px 0 30px'\n        },\n        children: \" \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 746,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(ControlsRow, {\n        children: [/*#__PURE__*/_jsxDEV(CategorySelect, {\n          onChange: handleCategoryChange,\n          value: selectedCategory,\n          children: categories.map(category => /*#__PURE__*/_jsxDEV(\"option\", {\n            value: category,\n            children: category\n          }, category, false, {\n            fileName: _jsxFileName,\n            lineNumber: 752,\n            columnNumber: 15\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 750,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(RightButtonsContainer, {\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            placeholder: \"Buscar...\",\n            value: search,\n            onChange: handleSearchChange,\n            style: {\n              padding: '8px 10px',\n              borderRadius: '5px',\n              border: '1px solid #ddd'\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 760,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(DownloadButton, {\n            onClick: downloadPDF,\n            children: /*#__PURE__*/_jsxDEV(ArrowDown, {\n              size: 24\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 773,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 772,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 758,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 749,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          display: 'flex',\n          flexDirection: 'row',\n          justifyContent: 'space-between',\n          gap: '30px',\n          width: '100%'\n        },\n        children: [/*#__PURE__*/_jsxDEV(DataPanel, {\n          children: /*#__PURE__*/_jsxDEV(Table, {\n            children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n              children: /*#__PURE__*/_jsxDEV(\"tr\", {\n                children: [/*#__PURE__*/_jsxDEV(Th, {\n                  children: \"Fecha\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 785,\n                  columnNumber: 19\n                }, this), /*#__PURE__*/_jsxDEV(Th, {\n                  children: \"Dato\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 786,\n                  columnNumber: 19\n                }, this), selectedCategory === 'Temperatura' && /*#__PURE__*/_jsxDEV(Th, {\n                  children: \"Zona\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 788,\n                  columnNumber: 58\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 784,\n                columnNumber: 17\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 783,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n              children: filteredData.length > 0 ? filteredData.map((item, index) => /*#__PURE__*/_jsxDEV(\"tr\", {\n                children: [/*#__PURE__*/_jsxDEV(Td, {\n                  children: item.fecha\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 795,\n                  columnNumber: 23\n                }, this), /*#__PURE__*/_jsxDEV(Td, {\n                  children: item.dato\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 796,\n                  columnNumber: 23\n                }, this), selectedCategory === 'Temperatura' && /*#__PURE__*/_jsxDEV(Td, {\n                  children: item.zona || '-'\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 797,\n                  columnNumber: 62\n                }, this)]\n              }, index, true, {\n                fileName: _jsxFileName,\n                lineNumber: 794,\n                columnNumber: 21\n              }, this)) : /*#__PURE__*/_jsxDEV(\"tr\", {\n                children: /*#__PURE__*/_jsxDEV(Td, {\n                  colSpan: selectedCategory === 'Temperatura' ? 3 : 2,\n                  style: {\n                    textAlign: 'center'\n                  },\n                  children: \"No hay datos disponibles\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 802,\n                  columnNumber: 21\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 801,\n                columnNumber: 19\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 791,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 782,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 781,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(DataPanel, {\n          children: /*#__PURE__*/_jsxDEV(ChartContainer, {\n            children: [/*#__PURE__*/_jsxDEV(ChartTitleContainer, {\n              children: /*#__PURE__*/_jsxDEV(ChartTitle, {\n                children: selectedCategory\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 816,\n                columnNumber: 17\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 815,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(CurrentValue, {\n              children: currentValue\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 820,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              style: {\n                height: '250px',\n                width: '100%',\n                flexGrow: 1\n              },\n              children: chartData && /*#__PURE__*/_jsxDEV(Line, {\n                data: chartData,\n                options: chartOptions\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 824,\n                columnNumber: 31\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 823,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 813,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 812,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 779,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 744,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Footer, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 832,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n}\n_s(Historial, \"6lGM1r2yFKsk/NRxvucRrFClN5Y=\", false, function () {\n  return [useNavigate];\n});\n_c14 = Historial;\nexport default Historial;\nvar _c, _c2, _c3, _c4, _c5, _c6, _c7, _c8, _c9, _c10, _c11, _c12, _c13, _c14;\n$RefreshReg$(_c, \"Container\");\n$RefreshReg$(_c2, \"ControlsRow\");\n$RefreshReg$(_c3, \"CategorySelect\");\n$RefreshReg$(_c4, \"RightButtonsContainer\");\n$RefreshReg$(_c5, \"DownloadButton\");\n$RefreshReg$(_c6, \"DataPanel\");\n$RefreshReg$(_c7, \"Table\");\n$RefreshReg$(_c8, \"Th\");\n$RefreshReg$(_c9, \"Td\");\n$RefreshReg$(_c10, \"ChartContainer\");\n$RefreshReg$(_c11, \"CurrentValue\");\n$RefreshReg$(_c12, \"ChartTitle\");\n$RefreshReg$(_c13, \"ChartTitleContainer\");\n$RefreshReg$(_c14, \"Historial\");","map":{"version":3,"names":["React","useState","useEffect","Header","Footer","Line","styled","useNavigate","Button","ArrowDown","jsPDF","axios","jsxDEV","_jsxDEV","Fragment","_Fragment","Container","div","_c","Column","Row","ControlsRow","_c2","ContentRow","CategorySelect","select","_c3","RightButtonsContainer","_c4","SearchButton","button","DownloadButton","_c5","DataPanel","_c6","Table","table","_c7","Th","th","_c8","Td","td","_c9","ChartContainer","_c10","CurrentValue","_c11","ChartTitle","h3","_c12","ChartTitleContainer","_c13","Title","h1","categories","initialData","Iluminacion","fecha","dato","Humedad","formatDate","dateTimeString","date","Date","getDate","toString","padStart","getMonth","getFullYear","formatTimeForChart","getHours","getMinutes","prepareChartData","data","category","Array","isArray","length","lastSixData","slice","Math","min","reverse","labels","map","item","Marca_tiempo","datasets","label","parseFloat","Medicion","fill","backgroundColor","borderColor","borderWidth","tension","pointBackgroundColor","pointBorderColor","pointBorderWidth","pointRadius","pointHoverRadius","fixedHumidityData","hora","valor","fixedIlluminationData","dataToUse","getChartOptions","max","stepSize","responsive","maintainAspectRatio","plugins","legend","display","tooltip","mode","intersect","callbacks","context","dataset","parsed","y","scales","x","grid","color","drawBorder","ticks","font","size","title","text","elements","point","radius","hoverRadius","line","layout","padding","top","right","bottom","left","Historial","_s","search","setSearch","selectedCategory","setSelectedCategory","temperatureData","setTemperatureData","humidityData","setHumidityData","filteredData","setFilteredData","chartData","setChartData","currentValue","setCurrentValue","chartOptions","setChartOptions","error","setError","loading","setLoading","navigate","token","localStorage","getItem","fetchTemperatureData","response","get","formattedData","zona","Zona","raw","err","console","fetchHumidityData","rawTemperatureData","rawHumidityData","lastItem","handleCategoryChange","event","target","value","handleSearchChange","query","toLowerCase","filtered","filter","includes","downloadPDF","doc","forEach","addPage","save","children","showUserIcon","fileName","_jsxFileName","lineNumber","columnNumber","style","textAlign","margin","onChange","type","placeholder","borderRadius","border","onClick","flexDirection","justifyContent","gap","width","index","colSpan","height","flexGrow","options","_c14","$RefreshReg$"],"sources":["C:/Users/Roger/Documents/TT2_AVANCES/prototipo-gecko/frontend/src/pages/historial.jsx"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport Header from \"../components/Header\";\r\nimport Footer from \"../components/Footer\";\r\nimport { Line } from \"react-chartjs-2\";\r\nimport styled from 'styled-components';\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport Button from \"../components/Button\";\r\nimport { ArrowDown } from \"lucide-react\";\r\nimport { jsPDF } from \"jspdf\";\r\n// Importamos axios para hacer peticiones HTTP a nuestra API\r\nimport axios from \"axios\";\r\n\r\n// Estilos (se mantienen igual que el código original)\r\nconst Container = styled.div`\r\n  padding: 50px 30px;\r\n  margin: auto;\r\n  max-width: 1400px;\r\n  background: #f8f4e1;\r\n  border-radius: 20px;\r\n  box-shadow: 0px 4px 10px rgba(0, 0, 0, 0.2);\r\n  display: flex;\r\n  flex-direction: column;\r\n  gap: 20px;\r\n  min-height: 85vh;\r\n`;\r\n\r\n// El resto de los componentes styled se mantienen igual\r\nconst Column = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  gap: 15px;\r\n`;\r\n\r\nconst Row = styled.div`\r\n  display: flex;\r\n  flex-direction: row;\r\n  justify-content: space-between;\r\n  gap: 20px;\r\n  padding: 20px;\r\n  margin: auto;\r\n  width: 100%;\r\n  border-radius: 25px;\r\n`;\r\n\r\nconst ControlsRow = styled(Row)`\r\n  background: transparent;\r\n  justify-content: flex-start;\r\n  gap: 15px;\r\n  padding: 10px 20px;\r\n`;\r\n\r\nconst ContentRow = styled(Row)`\r\n  display: flex;\r\n  flex-direction: row;\r\n  flex-wrap: nowrap;\r\n  justify-content: space-between;\r\n  gap: 30px;\r\n  \r\n  @media (max-width: 1200px) {\r\n    flex-direction: column;\r\n    align-items: center;\r\n  }\r\n`;\r\n\r\nconst CategorySelect = styled.select`\r\n  padding: 12px 15px;\r\n  border-radius: 25px;\r\n  border: 1px solid #ddd;\r\n  background-color: white;\r\n  width: 300px;\r\n  font-size: 16px;\r\n  appearance: none;\r\n  background-image: url(\"data:image/svg+xml;charset=UTF-8,%3csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 24 24' fill='none' stroke='currentColor' stroke-width='2' stroke-linecap='round' stroke-linejoin='round'%3e%3cpolyline points='6 9 12 15 18 9'%3e%3c/polyline%3e%3c/svg%3e\");\r\n  background-repeat: no-repeat;\r\n  background-position: right 1rem center;\r\n  background-size: 1em;\r\n  \r\n  &:focus {\r\n    outline: none;\r\n    border-color: #B4864D;\r\n  }\r\n`;\r\n\r\nconst RightButtonsContainer = styled.div`\r\n  display: flex;\r\n  gap: 15px;\r\n`;\r\n\r\nconst SearchButton = styled.button`\r\n  background-color: #E74C3C;\r\n  color: white;\r\n  border: none;\r\n  border-radius: 5px;\r\n  padding: 8px 20px;\r\n  font-weight: bold;\r\n  cursor: pointer;\r\n  text-transform: uppercase;\r\n  font-size: 14px;\r\n  \r\n  &:hover {\r\n    background-color: #C0392B;\r\n  }\r\n`;\r\n\r\nconst DownloadButton = styled.button`\r\n  background-color: white;\r\n  border: 1px solid #ddd;\r\n  border-radius: 5px;\r\n  padding: 8px;\r\n  cursor: pointer;\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  \r\n  &:hover {\r\n    background-color: #f5f5f5;\r\n  }\r\n`;\r\n\r\nconst DataPanel = styled.div`\r\n  background: rgba(123, 95, 61, 0.8);\r\n  box-shadow: inset -5px -5px 10px rgba(238, 209, 146, 0.5), \r\n              10px 10px 20px rgba(245, 239, 230, 0.2);\r\n  backdrop-filter: blur(10000px);\r\n  filter: drop-shadow(5px 5px 10px rgba(248, 202, 132, 3));\r\n  border: 1px solid rgba(248, 216, 186, 0.25);\r\n  border-radius: 10px;\r\n  padding: 15px;\r\n  width: 47%;\r\n  min-width: 300px;\r\n  min-height: 450px;\r\n  max-height: 500px;\r\n  overflow: auto;\r\n  \r\n  @media (max-width: 1200px) {\r\n    width: 100%;\r\n    max-width: 500px;\r\n  }\r\n`;\r\n\r\nconst Table = styled.table`\r\n  width: 100%;\r\n  border-collapse: collapse;\r\n  background-color: white;\r\n  border-radius: 5px;\r\n  overflow: hidden;\r\n`;\r\n\r\nconst Th = styled.th`\r\n  background-color: #f0f0f0;\r\n  color: #333;\r\n  padding: 8px;\r\n  text-align: center;\r\n  border: 1px solid #ddd;\r\n  font-size: 14px;\r\n`;\r\n\r\nconst Td = styled.td`\r\n  padding: 6px 8px;\r\n  text-align: center;\r\n  border: 1px solid #ddd;\r\n  font-size: 14px;\r\n`;\r\n\r\nconst ChartContainer = styled.div`\r\n  background-color: white;\r\n  border-radius: 8px;\r\n  padding: 20px;\r\n  width: 100%;\r\n  height: 100%;\r\n  min-height: 300px;\r\n  overflow: hidden;\r\n  display: flex;\r\n  flex-direction: column;\r\n`;\r\n\r\nconst CurrentValue = styled.div`\r\n  text-align: center;\r\n  font-size: 3rem;\r\n  font-weight: bold;\r\n  margin-bottom: 10px;\r\n`;\r\n\r\nconst ChartTitle = styled.h3`\r\n  text-align: center;\r\n  background-color: #FF8C00;\r\n  color: white;\r\n  padding: 5px 15px;\r\n  border-radius: 4px;\r\n  margin: 0 auto 10px;\r\n  font-size: 16px;\r\n  display: inline-block;\r\n`;\r\n\r\nconst ChartTitleContainer = styled.div`\r\n  text-align: center;\r\n  margin-bottom: 5px;\r\n`;\r\n\r\nconst Title = styled.h1`\r\n  text-align: center;\r\n  font-size: 2rem;\r\n  margin-bottom: 20px;\r\n  color: #333;\r\n`;\r\n\r\n// Categorías disponibles para seleccionar\r\nconst categories = ['Temperatura', 'Iluminacion', 'Humedad'];\r\n\r\n// Datos de ejemplo para Iluminación y Humedad (solo mantenemos estos, ya que Temperatura vendrá de la API)\r\nconst initialData = {\r\n  Iluminacion: [\r\n    { fecha: '01/02/2024', dato: '350 lux' },\r\n    { fecha: '02/02/2024', dato: '340 lux' },\r\n    // ...resto de datos de iluminación\r\n    { fecha: '18/02/2024', dato: '430 lux' },\r\n  ],\r\n  Humedad: [\r\n    { fecha: '01/02/2024', dato: '60%' },\r\n    { fecha: '02/02/2024', dato: '58%' },\r\n    // ...resto de datos de humedad\r\n    { fecha: '18/02/2024', dato: '62%' },\r\n  ],\r\n};\r\n\r\n// ----- FUNCIONES OPTIMIZADAS PARA MANEJO DE DATOS DE TEMPERATURA -----\r\n\r\n/**\r\n * Formatea una fecha ISO de la base de datos a formato de visualización DD/MM/YYYY\r\n * @param {String} dateTimeString - Fecha en formato ISO (ej: 2025-03-20T14:30:00)\r\n * @returns {String} - Fecha formateada (ej: 20/03/2025)\r\n */\r\nconst formatDate = (dateTimeString) => {\r\n  // Crear un objeto Date a partir del string de fecha\r\n  const date = new Date(dateTimeString);\r\n  // Formatear la fecha como DD/MM/YYYY con padding de ceros (01/01/2025 en lugar de 1/1/2025)\r\n  return `${date.getDate().toString().padStart(2, '0')}/${(date.getMonth() + 1).toString().padStart(2, '0')}/${date.getFullYear()}`;\r\n};\r\n\r\n/**\r\n * Formatea la hora de un timestamp para mostrarla en la gráfica\r\n * @param {String} dateTimeString - Fecha y hora en formato ISO\r\n * @returns {String} - Hora formateada (ej: 14:30)\r\n */\r\nconst formatTimeForChart = (dateTimeString) => {\r\n  // Crear un objeto Date a partir del string de fecha y hora\r\n  const date = new Date(dateTimeString);\r\n  // Devolver solo la hora y minutos formateados como HH:MM\r\n  return `${date.getHours()}:${date.getMinutes().toString().padStart(2, '0')}`;\r\n};\r\n\r\n/**\r\n * Prepara los datos para la gráfica Chart.js\r\n * @param {Array} data - Array de objetos con datos\r\n * @param {String} category - Categoría seleccionada\r\n * @returns {Object} Objeto formateado para Chart.js\r\n */\r\nconst prepareChartData = (data, category) => {\r\n  // CASO 1: Si es temperatura y tenemos datos reales de la API\r\n  if (category === 'Temperatura' && Array.isArray(data) && data.length > 0) {\r\n    // Tomar solo los últimos 6 registros (o menos si hay menos disponibles) y revertir para orden cronológico\r\n    const lastSixData = data.slice(0, Math.min(6, data.length)).reverse();\r\n    \r\n    // Construir los datos para la gráfica\r\n    return {\r\n      // Etiquetas del eje X: horas de las mediciones\r\n      labels: lastSixData.map(item => formatTimeForChart(item.Marca_tiempo)),\r\n      \r\n      // Conjunto de datos para dibujar\r\n      datasets: [\r\n        {\r\n          label: category,\r\n          // Convertimos las mediciones a números para la gráfica\r\n          data: lastSixData.map(item => parseFloat(item.Medicion)),\r\n          // Configuración visual de la línea\r\n          fill: false,\r\n          backgroundColor: 'rgba(255, 165, 0, 0.2)',\r\n          borderColor: '#FFA500',\r\n          borderWidth: 3,\r\n          tension: 0.3,\r\n          pointBackgroundColor: '#FFA500',\r\n          pointBorderColor: '#FFF',\r\n          pointBorderWidth: 2,\r\n          pointRadius: 5,\r\n          pointHoverRadius: 7,\r\n        }\r\n      ]\r\n    };\r\n  } \r\n  // CASO 2: Para otras categorías (Iluminación y Humedad) usamos datos de ejemplo\r\n  else {\r\n    // Datos de ejemplo para gráficas de Humedad\r\n    const fixedHumidityData = [\r\n      { hora: '6 AM', valor: 60 },\r\n      { hora: '9 AM', valor: 63 },\r\n      { hora: '12 PM', valor: 67 },\r\n      { hora: '3 PM', valor: 70 },\r\n      { hora: '6 PM', valor: 65 },\r\n      { hora: '9 PM', valor: 62 }\r\n    ];\r\n    \r\n    // Datos de ejemplo para gráficas de Iluminación\r\n    const fixedIlluminationData = [\r\n      { hora: '6 AM', valor: 320 },\r\n      { hora: '9 AM', valor: 380 },\r\n      { hora: '12 PM', valor: 420 },\r\n      { hora: '3 PM', valor: 430 },\r\n      { hora: '6 PM', valor: 390 },\r\n      { hora: '9 PM', valor: 350 }\r\n    ];\r\n    \r\n    // Seleccionar el conjunto de datos según la categoría\r\n    let dataToUse = category === 'Humedad' ? fixedHumidityData : fixedIlluminationData;\r\n    \r\n    // Devolver los datos formateados para Chart.js\r\n    return {\r\n      labels: dataToUse.map(item => item.hora),\r\n      datasets: [\r\n        {\r\n          label: category,\r\n          data: dataToUse.map(item => item.valor),\r\n          fill: false,\r\n          backgroundColor: 'rgba(255, 165, 0, 0.2)',\r\n          borderColor: '#FFA500',\r\n          borderWidth: 3,\r\n          tension: 0.3,\r\n          pointBackgroundColor: '#FFA500',\r\n          pointBorderColor: '#FFF',\r\n          pointBorderWidth: 2,\r\n          pointRadius: 5,\r\n          pointHoverRadius: 7,\r\n        }\r\n      ]\r\n    };\r\n  }\r\n};\r\n\r\n// Configuración de opciones para la gráfica\r\nconst getChartOptions = (category) => {\r\n  // Determinar el rango según la categoría\r\n  let min, max, stepSize;\r\n  \r\n  switch(category) {\r\n    case 'Temperatura':\r\n      // Valores ampliados para acomodar un rango más amplio de temperaturas\r\n      min = 20.0;\r\n      max = 35.0;\r\n      stepSize = 2.5;\r\n      break;\r\n    case 'Humedad':\r\n      min = 55;\r\n      max = 75;\r\n      stepSize = 5;\r\n      break;\r\n    case 'Iluminacion':\r\n      min = 300;\r\n      max = 450;\r\n      stepSize = 50;\r\n      break;\r\n    default:\r\n      min = null;\r\n      max = null;\r\n      stepSize = null;\r\n  }\r\n\r\n  return {\r\n    responsive: true,\r\n    maintainAspectRatio: false,\r\n    plugins: {\r\n      legend: {\r\n        display: false\r\n      },\r\n      tooltip: {\r\n        mode: 'index',\r\n        intersect: false,\r\n        callbacks: {\r\n          label: function(context) {\r\n            let label = context.dataset.label || '';\r\n            if (label) {\r\n              label += ': ';\r\n            }\r\n            if (context.parsed.y !== null) {\r\n              label += context.parsed.y;\r\n              // Añadir unidad según la categoría\r\n              if (category === 'Temperatura') label += '°C';\r\n              else if (category === 'Humedad') label += '%';\r\n              else if (category === 'Iluminacion') label += ' lux';\r\n            }\r\n            return label;\r\n          }\r\n        }\r\n      }\r\n    },\r\n    scales: {\r\n      x: {\r\n        display: true,\r\n        grid: {\r\n          display: true,\r\n          color: '#CCCCCC',\r\n          drawBorder: true,\r\n        },\r\n        ticks: {\r\n          font: {\r\n            size: 12\r\n          }\r\n        },\r\n        title: {\r\n          display: true,\r\n          text: 'Tiempo',\r\n          font: {\r\n            size: 14\r\n          }\r\n        }\r\n      },\r\n      y: {\r\n        display: true,\r\n        grid: {\r\n          display: true,\r\n          color: '#CCCCCC',\r\n          drawBorder: true,\r\n        },\r\n        min: min,\r\n        max: max,\r\n        ticks: {\r\n          stepSize: stepSize,\r\n          font: {\r\n            size: 12\r\n          }\r\n        },\r\n        title: {\r\n          display: true,\r\n          text: category,\r\n          font: {\r\n            size: 14\r\n          }\r\n        }\r\n      }\r\n    },\r\n    elements: {\r\n      point: {\r\n        radius: 5,\r\n        hoverRadius: 7,\r\n        borderWidth: 2\r\n      },\r\n      line: {\r\n        tension: 0.3,\r\n        borderWidth: 3,\r\n      }\r\n    },\r\n    layout: {\r\n      padding: {\r\n        top: 5,\r\n        right: 20,\r\n        bottom: 20,\r\n        left: 20\r\n      }\r\n    }\r\n  };\r\n};\r\n\r\n/**\r\n * Componente principal para la visualización del historial de datos\r\n */\r\nfunction Historial() {\r\n  // Estado para la búsqueda\r\n  const [search, setSearch] = useState('');\r\n\r\n  // Estado para la categoría seleccionada (por defecto 'Temperatura')\r\n  const [selectedCategory, setSelectedCategory] = useState(categories[0]);\r\n  \r\n  // Estado para almacenar los datos de temperatura cargados desde la API\r\n  const [temperatureData, setTemperatureData] = useState([]);\r\n\r\n  // Estado para almacenar los datos de humedad cargados desde la API\r\n  const [humidityData, setHumidityData] = useState([]);\r\n  \r\n  // Estado para los datos filtrados según búsqueda y categoría\r\n  const [filteredData, setFilteredData] = useState([]);\r\n  \r\n  // Estado para los datos procesados para la gráfica\r\n  const [chartData, setChartData] = useState(null);\r\n  \r\n  // Estado para el valor actual a mostrar prominentemente\r\n  const [currentValue, setCurrentValue] = useState('');\r\n  \r\n  // Estado para las opciones de configuración de la gráfica\r\n  const [chartOptions, setChartOptions] = useState(getChartOptions(categories[0]));\r\n  \r\n  // Estado para controlar errores de carga\r\n  const [error, setError] = useState(null);\r\n  \r\n  // Estado para controlar indicador de carga\r\n  const [loading, setLoading] = useState(true);\r\n  \r\n  const navigate = useNavigate();\r\n\r\n  // Verificar autenticación al cargar el componente\r\n  useEffect(() => {\r\n    const token = localStorage.getItem(\"token\");\r\n    if (!token) {\r\n      navigate(\"/login\");\r\n    }\r\n  }, [navigate]);\r\n\r\n  // ----- OPTIMIZACIÓN 1: EFECTO PARA CARGAR DATOS DE TEMPERATURA -----\r\n  useEffect(() => {\r\n    // Función asíncrona para obtener datos de la API\r\n    const fetchTemperatureData = async () => {\r\n      try {\r\n        // 1. Indicar que estamos cargando datos\r\n        setLoading(true);\r\n        \r\n        // 2. Realizar la petición GET a la API\r\n        const response = await axios.get('http://localhost:5000/api/temperatura');\r\n        \r\n        // 3. Verificar si hay datos en la respuesta\r\n        if (response.data && response.data.length > 0) {\r\n          // 4. Procesar los datos recibidos para adaptarlos al formato esperado\r\n          const formattedData = response.data.map(item => ({\r\n            fecha: formatDate(item.Marca_tiempo),  // Formateamos fecha para visualización\r\n            dato: `${item.Medicion}°C`,            // Agregamos unidad a la medición\r\n            zona: item.Zona,                       // Guardamos la zona de la temperatura\r\n            raw: item                              // Guardamos el objeto original para acceso a datos crudos\r\n          }));\r\n          \r\n          // 5. Actualizar el estado con los datos formateados\r\n          setTemperatureData(formattedData);\r\n        } else {\r\n          // 6. Si no hay datos, establecer un array vacío\r\n          setTemperatureData([]);\r\n        }\r\n        \r\n        // 7. Finalizar el estado de carga\r\n        setLoading(false);\r\n      } catch (err) {\r\n        // 8. Manejar errores de la petición\r\n        console.error(\"Error al cargar datos de temperatura:\", err);\r\n        setError(\"Error al cargar datos de temperatura. Por favor, intente de nuevo más tarde.\");\r\n        setLoading(false);\r\n      }\r\n    };\r\n    \r\n    // Ejecutar la función de carga\r\n    fetchTemperatureData();\r\n  }, []); // Se ejecuta solo al montar el componente\r\n\r\n  // ----- EFECTO PARA CARGAR DATOS DE HUMEDAD -----\r\n  useEffect(() => {\r\n    // Función asíncrona para obtener datos de humedad\r\n    const fetchHumidityData = async () => {\r\n      try {\r\n        // Realizar la petición GET a la API\r\n        const response = await axios.get('http://localhost:5000/api/humedad');\r\n        \r\n        // Verificar si hay datos en la respuesta\r\n        if (response.data && response.data.length > 0) {\r\n          // Procesar los datos recibidos para adaptarlos al formato esperado\r\n          const formattedData = response.data.map(item => ({\r\n            fecha: formatDate(item.Marca_tiempo),  // Formateamos fecha para visualización\r\n            dato: `${item.Medicion}%`,             // Agregamos unidad a la medición\r\n            raw: item                              // Guardamos el objeto original para acceso a datos crudos\r\n          }));\r\n          \r\n          // Actualizar el estado con los datos formateados\r\n          setHumidityData(formattedData);\r\n        } else {\r\n          // Si no hay datos, establecer un array vacío\r\n          setHumidityData([]);\r\n        }\r\n        \r\n        // Finalizar el estado de carga\r\n        setLoading(false);\r\n      } catch (err) {\r\n        // Manejar errores de la petición\r\n        console.error(\"Error al cargar datos de humedad:\", err);\r\n        setError(\"Error al cargar datos de humedad. Por favor, intente de nuevo más tarde.\");\r\n        setLoading(false);\r\n      }\r\n    };\r\n    \r\n    // Ejecutar la función de carga\r\n    fetchHumidityData();\r\n  }, []); // Se ejecuta solo al montar el componente\r\n\r\n  // ----- EFECTO PARA ACTUALIZAR DATOS SEGÚN CATEGORÍA -----\r\n  useEffect(() => {\r\n    // CASO: TEMPERATURA - Usar datos reales de la API\r\n    if (selectedCategory === 'Temperatura') {\r\n      // 1. Actualizar los datos de la tabla\r\n      setFilteredData(temperatureData);\r\n      \r\n      // 2. Preparar datos para la gráfica\r\n      if (temperatureData.length > 0) {\r\n        // Extraer los datos originales desde los objetos 'raw'\r\n        const rawTemperatureData = temperatureData.map(item => item.raw);\r\n        \r\n        // Generar datos para la gráfica pasando los datos originales\r\n        setChartData(prepareChartData(rawTemperatureData, selectedCategory));\r\n        \r\n        // 3. Actualizar el valor actual (primer registro, el más reciente)\r\n        setCurrentValue(temperatureData[0].dato);\r\n      } else {\r\n        // Si no hay datos, mostrar \"--\" como valor actual\r\n        setCurrentValue(\"--\");\r\n      }\r\n    } \r\n    // CASO: HUMEDAD - Usar datos reales de la API\r\n    else if (selectedCategory === 'Humedad') {\r\n      // 1. Actualizar los datos de la tabla\r\n      setFilteredData(humidityData);\r\n      \r\n      // 2. Preparar datos para la gráfica\r\n      if (humidityData.length > 0) {\r\n        // Extraer los datos originales desde los objetos 'raw'\r\n        const rawHumidityData = humidityData.map(item => item.raw);\r\n        \r\n        // Generar datos para la gráfica pasando los datos originales\r\n        setChartData(prepareChartData(rawHumidityData, selectedCategory));\r\n        \r\n        // 3. Actualizar el valor actual (primer registro, el más reciente)\r\n        setCurrentValue(humidityData[0].dato);\r\n      } else {\r\n        // Si no hay datos, mostrar \"--\" como valor actual\r\n        setCurrentValue(\"--\");\r\n      }\r\n    }\r\n    // CASO: OTRAS CATEGORÍAS - Usar datos de ejemplo\r\n    else {\r\n      // 1. Actualizar los datos de la tabla\r\n      setFilteredData(initialData[selectedCategory]);\r\n      \r\n      // 2. Preparar datos para la gráfica\r\n      setChartData(prepareChartData(null, selectedCategory));\r\n      \r\n      // 3. Actualizar el valor actual\r\n      const lastItem = initialData[selectedCategory][initialData[selectedCategory].length - 1];\r\n      setCurrentValue(lastItem.dato);\r\n    }\r\n    \r\n    // 4. Actualizar opciones de la gráfica según la categoría\r\n    setChartOptions(getChartOptions(selectedCategory));\r\n  }, [selectedCategory, temperatureData, humidityData]); // Se ejecuta cuando cambia la categoría o los datos\r\n\r\n  // Manejador para el cambio de categoría en el selector\r\n  const handleCategoryChange = (event) => {\r\n    setSelectedCategory(event.target.value);\r\n  };\r\n\r\n  // Función para manejar el filtro de búsqueda\r\n  const handleSearchChange = (event) => {\r\n    const query = event.target.value.toLowerCase();\r\n    setSearch(query);\r\n    \r\n    // Filtrado diferente según la categoría seleccionada\r\n    if (selectedCategory === 'Temperatura') {\r\n      // Para temperatura, filtrar en datos reales de API\r\n      const filtered = temperatureData.filter(\r\n        (item) => \r\n          item.fecha.toLowerCase().includes(query) || \r\n          item.dato.toLowerCase().includes(query) ||\r\n          (item.zona && item.zona.toLowerCase().includes(query))\r\n      );\r\n      setFilteredData(filtered);\r\n    } else {\r\n      // Para otras categorías, filtrar en datos de ejemplo\r\n      const filtered = initialData[selectedCategory].filter(\r\n        (item) => item.fecha.toLowerCase().includes(query) || item.dato.toLowerCase().includes(query)\r\n      );\r\n      setFilteredData(filtered);\r\n    }\r\n  };\r\n\r\n  // Función para descargar la tabla como PDF\r\n  const downloadPDF = () => {\r\n    const doc = new jsPDF();\r\n    let y = 20;\r\n    doc.text(`Tabla de Datos - ${selectedCategory}`, 20, y);\r\n    y += 10;\r\n\r\n    // Escribir los encabezados\r\n    doc.text(\"Fecha\", 20, y);\r\n    doc.text(\"Dato\", 80, y);\r\n    // Agregar columna de zona solo para temperatura\r\n    if (selectedCategory === 'Temperatura') {\r\n      doc.text(\"Zona\", 140, y);\r\n    }\r\n    y += 10;\r\n\r\n    // Escribir los datos de la tabla\r\n    filteredData.forEach(item => {\r\n      doc.text(item.fecha, 20, y);\r\n      doc.text(item.dato, 80, y);\r\n      if (selectedCategory === 'Temperatura' && item.zona) {\r\n        doc.text(item.zona, 140, y);\r\n      }\r\n      y += 10;\r\n      \r\n      // Si llegamos al final de la página, crear una nueva\r\n      if (y > 280) {\r\n        doc.addPage();\r\n        y = 20;\r\n      }\r\n    });\r\n\r\n    // Guardar como PDF\r\n    doc.save(`tabla_${selectedCategory.toLowerCase()}.pdf`);\r\n  };\r\n\r\n  // Renderizar mensaje de carga o error si es necesario\r\n  if (loading) {\r\n    return (\r\n      <>\r\n        <Header showUserIcon={true} />\r\n        <Container>\r\n          <div style={{ textAlign: 'center', padding: '50px' }}>\r\n            Cargando datos...\r\n          </div>\r\n        </Container>\r\n        <Footer />\r\n      </>\r\n    );\r\n  }\r\n\r\n  if (error) {\r\n    return (\r\n      <>\r\n        <Header showUserIcon={true} />\r\n        <Container>\r\n          <div style={{ textAlign: 'center', padding: '50px', color: 'red' }}>\r\n            {error}\r\n          </div>\r\n        </Container>\r\n        <Footer />\r\n      </>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <>\r\n      {/* Cabecera de la aplicación */}\r\n      <Header showUserIcon={true} />\r\n      \r\n      {/* Contenedor principal */}\r\n      <Container>\r\n        {/* Título */}\r\n        <h1 style={{ textAlign: 'center', margin: '10px 0 30px' }}> </h1>\r\n        \r\n        {/* Fila de controles: selector de categoría y botones */}\r\n        <ControlsRow>\r\n          <CategorySelect onChange={handleCategoryChange} value={selectedCategory}>\r\n            {categories.map((category) => (\r\n              <option key={category} value={category}>\r\n                {category}\r\n              </option>\r\n            ))}\r\n          </CategorySelect>\r\n  \r\n          <RightButtonsContainer>\r\n            {/* Botón búsqueda */}\r\n            <input\r\n              type=\"text\"\r\n              placeholder=\"Buscar...\"\r\n              value={search}\r\n              onChange={handleSearchChange}\r\n              style={{\r\n                padding: '8px 10px',\r\n                borderRadius: '5px',\r\n                border: '1px solid #ddd'\r\n              }}\r\n            />\r\n\r\n            <DownloadButton onClick={downloadPDF}>\r\n              <ArrowDown size={24} />\r\n            </DownloadButton>\r\n          </RightButtonsContainer>\r\n        </ControlsRow>\r\n        \r\n        {/* Fila de contenido: tabla y gráfica */}\r\n        <div style={{ display: 'flex', flexDirection: 'row', justifyContent: 'space-between', gap: '30px', width: '100%' }}>\r\n          {/* Panel izquierdo: Tabla de datos históricos */}\r\n          <DataPanel>\r\n            <Table>\r\n              <thead>\r\n                <tr>\r\n                  <Th>Fecha</Th>\r\n                  <Th>Dato</Th>\r\n                  {/* Mostrar columna Zona solo para Temperatura */}\r\n                  {selectedCategory === 'Temperatura' && <Th>Zona</Th>}\r\n                </tr>\r\n              </thead>\r\n              <tbody>\r\n                {filteredData.length > 0 ? (\r\n                  filteredData.map((item, index) => (\r\n                    <tr key={index}>\r\n                      <Td>{item.fecha}</Td>\r\n                      <Td>{item.dato}</Td>\r\n                      {selectedCategory === 'Temperatura' && <Td>{item.zona || '-'}</Td>}\r\n                    </tr>\r\n                  ))\r\n                ) : (\r\n                  <tr>\r\n                    <Td colSpan={selectedCategory === 'Temperatura' ? 3 : 2} style={{textAlign: 'center'}}>\r\n                      No hay datos disponibles\r\n                    </Td>\r\n                  </tr>\r\n                )}\r\n              </tbody>\r\n            </Table>\r\n          </DataPanel>\r\n          \r\n          {/* Panel derecho: Gráfica y valor actual */}\r\n          <DataPanel>\r\n            <ChartContainer>\r\n              {/* Título de la gráfica (categoría seleccionada) */}\r\n              <ChartTitleContainer>\r\n                <ChartTitle>{selectedCategory}</ChartTitle>\r\n              </ChartTitleContainer>\r\n              \r\n              {/* Valor actual */}\r\n              <CurrentValue>{currentValue}</CurrentValue>\r\n              \r\n              {/* Contenedor para la gráfica con espacio suficiente para ejes y etiquetas */}\r\n              <div style={{ height: '250px', width: '100%', flexGrow: 1 }}>\r\n                {chartData && <Line data={chartData} options={chartOptions} />}\r\n              </div>\r\n            </ChartContainer>\r\n          </DataPanel>\r\n        </div>\r\n      </Container>\r\n      \r\n      {/* Pie de página */}\r\n      <Footer />\r\n    </>\r\n  );\r\n}\r\n\r\nexport default Historial;"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,OAAOC,MAAM,MAAM,sBAAsB;AACzC,OAAOC,MAAM,MAAM,sBAAsB;AACzC,SAASC,IAAI,QAAQ,iBAAiB;AACtC,OAAOC,MAAM,MAAM,mBAAmB;AACtC,SAASC,WAAW,QAAQ,kBAAkB;AAC9C,OAAOC,MAAM,MAAM,sBAAsB;AACzC,SAASC,SAAS,QAAQ,cAAc;AACxC,SAASC,KAAK,QAAQ,OAAO;AAC7B;AACA,OAAOC,KAAK,MAAM,OAAO;;AAEzB;AAAA,SAAAC,MAAA,IAAAC,OAAA,EAAAC,QAAA,IAAAC,SAAA;AACA,MAAMC,SAAS,GAAGV,MAAM,CAACW,GAAG;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;;AAED;AAAAC,EAAA,GAbMF,SAAS;AAcf,MAAMG,MAAM,GAAGb,MAAM,CAACW,GAAG;AACzB;AACA;AACA;AACA,CAAC;AAED,MAAMG,GAAG,GAAGd,MAAM,CAACW,GAAG;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AAED,MAAMI,WAAW,GAAGf,MAAM,CAACc,GAAG,CAAC;AAC/B;AACA;AACA;AACA;AACA,CAAC;AAACE,GAAA,GALID,WAAW;AAOjB,MAAME,UAAU,GAAGjB,MAAM,CAACc,GAAG,CAAC;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AAED,MAAMI,cAAc,GAAGlB,MAAM,CAACmB,MAAM;AACpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AAACC,GAAA,GAjBIF,cAAc;AAmBpB,MAAMG,qBAAqB,GAAGrB,MAAM,CAACW,GAAG;AACxC;AACA;AACA,CAAC;AAACW,GAAA,GAHID,qBAAqB;AAK3B,MAAME,YAAY,GAAGvB,MAAM,CAACwB,MAAM;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AAED,MAAMC,cAAc,GAAGzB,MAAM,CAACwB,MAAM;AACpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AAACE,GAAA,GAbID,cAAc;AAepB,MAAME,SAAS,GAAG3B,MAAM,CAACW,GAAG;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AAACiB,GAAA,GAnBID,SAAS;AAqBf,MAAME,KAAK,GAAG7B,MAAM,CAAC8B,KAAK;AAC1B;AACA;AACA;AACA;AACA;AACA,CAAC;AAACC,GAAA,GANIF,KAAK;AAQX,MAAMG,EAAE,GAAGhC,MAAM,CAACiC,EAAE;AACpB;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AAACC,GAAA,GAPIF,EAAE;AASR,MAAMG,EAAE,GAAGnC,MAAM,CAACoC,EAAE;AACpB;AACA;AACA;AACA;AACA,CAAC;AAACC,GAAA,GALIF,EAAE;AAOR,MAAMG,cAAc,GAAGtC,MAAM,CAACW,GAAG;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AAAC4B,IAAA,GAVID,cAAc;AAYpB,MAAME,YAAY,GAAGxC,MAAM,CAACW,GAAG;AAC/B;AACA;AACA;AACA;AACA,CAAC;AAAC8B,IAAA,GALID,YAAY;AAOlB,MAAME,UAAU,GAAG1C,MAAM,CAAC2C,EAAE;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AAACC,IAAA,GATIF,UAAU;AAWhB,MAAMG,mBAAmB,GAAG7C,MAAM,CAACW,GAAG;AACtC;AACA;AACA,CAAC;AAACmC,IAAA,GAHID,mBAAmB;AAKzB,MAAME,KAAK,GAAG/C,MAAM,CAACgD,EAAE;AACvB;AACA;AACA;AACA;AACA,CAAC;;AAED;AACA,MAAMC,UAAU,GAAG,CAAC,aAAa,EAAE,aAAa,EAAE,SAAS,CAAC;;AAE5D;AACA,MAAMC,WAAW,GAAG;EAClBC,WAAW,EAAE,CACX;IA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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}