{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Roger\\\\Documents\\\\TT2_AVANCES\\\\prototipo-gecko\\\\frontend\\\\src\\\\pages\\\\pruebasNotificaciones.jsx\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$(),\n  _s3 = $RefreshSig$();\nimport { useState } from 'react';\nimport axios from 'axios';\nimport { jwtDecode } from 'jwt-decode';\n\n// Función para enviar la alerta por correo\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst enviarEmail = async (descripcion, valor, tipo, setAlertStatus) => {\n  setAlertStatus(`Enviando alerta de ${tipo}...`);\n  try {\n    // Adaptamos el objeto según el tipo para mantener compatibilidad con el backend\n    let payload;\n    if (tipo === 'temperatura') {\n      payload = {\n        descripcion,\n        temperatura: valor\n      };\n    } else if (tipo === 'humedad') {\n      // Para humedad, enviamos un mensaje específico con el valor como porcentaje\n      payload = {\n        descripcion: `Alerta de humedad: ${valor}% - Fuera del rango permitido (30%-50%)`,\n        humedad: valor,\n        temperatura: valor // Mantenemos para compatibilidad con el backend\n      };\n    }\n    console.log(`Enviando alerta de ${tipo}:`, payload);\n    const response = await fetch('http://localhost:5000/send-email', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(payload)\n    });\n    const result = await response.json();\n    if (response.ok) {\n      console.log(`Alerta de ${tipo} enviada con éxito:`, result.message);\n      setAlertStatus(`Alerta de ${tipo} enviada con éxito`);\n    } else {\n      console.error('Error en la respuesta del servidor:', result.message);\n      setAlertStatus(`Error: ${result.message}`);\n    }\n  } catch (error) {\n    console.error(`Error al enviar la alerta de ${tipo}:`, error);\n    setAlertStatus(`Error de conexión: ${error.message}`);\n  }\n};\n\n// Función para insertar la temperatura en la base de datos\nconst enviarTemperatura = async (ID_usuario, temperatura, Zona, Marca_tiempo) => {\n  try {\n    if (!ID_usuario || !temperatura || !Zona || !Marca_tiempo) {\n      console.error('Datos incompletos:', {\n        ID_usuario,\n        temperatura,\n        Zona,\n        Marca_tiempo\n      });\n      throw new Error('Todos los campos son obligatorios');\n    }\n    console.log('Registrando temperatura en la base de datos:', {\n      ID_usuario,\n      Medicion: temperatura,\n      Zona,\n      Marca_tiempo\n    });\n    await axios.post('http://localhost:5000/api/addtemperatura', {\n      ID_usuario,\n      Medicion: temperatura,\n      Zona,\n      Marca_tiempo\n    }, {\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      timeout: 10000\n    });\n    console.log('Temperatura guardada correctamente.');\n  } catch (error) {\n    console.error('Error al guardar la temperatura:', error);\n  }\n};\n\n// Nueva función para insertar la humedad en la base de datos\nconst enviarHumedad = async (ID_usuario, humedad, Zona, Marca_tiempo) => {\n  try {\n    if (!ID_usuario || !humedad || !Zona || !Marca_tiempo) {\n      console.error('Datos incompletos:', {\n        ID_usuario,\n        humedad,\n        Zona,\n        Marca_tiempo\n      });\n      throw new Error('Todos los campos son obligatorios');\n    }\n    console.log('Registrando humedad en la base de datos:', {\n      ID_usuario,\n      Medicion: humedad,\n      Zona,\n      Marca_tiempo\n    });\n    await axios.post('http://localhost:5000/api/addhumedad', {\n      ID_usuario,\n      Medicion: humedad,\n      Zona,\n      Marca_tiempo\n    }, {\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      timeout: 10000\n    });\n    console.log('Humedad guardada correctamente.');\n  } catch (error) {\n    console.error('Error al guardar la humedad:', error);\n  }\n};\n\n// Función para gestionar alertas de temperatura\nconst gestionarNotificacionTemperatura = async (temperatura, ID_usuario, setAlertStatus, setLastAlertValue, lastAlertValue) => {\n  const Marca_tiempo = new Date().toISOString().slice(0, 19).replace('T', ' ');\n\n  // Insertar siempre la temperatura en la base de datos\n  await enviarTemperatura(ID_usuario, temperatura, 'Zona 1', Marca_tiempo);\n  const temperaturaFormateada = temperatura.toFixed(2);\n  console.log('Temperatura formateada:', temperaturaFormateada);\n  if (lastAlertValue !== null && Math.abs(temperatura - lastAlertValue) < 1) {\n    console.log('Temperatura similar a la anterior, no se enviará alerta.');\n    return;\n  }\n  if (temperatura < 22 || temperatura > 32) {\n    try {\n      console.log('Temperatura fuera de rango, enviando alerta de correo...');\n      await enviarEmail(`Temperatura fuera de rango: ${temperaturaFormateada}°C`, temperatura, 'temperatura', setAlertStatus);\n      const notificacionResponse = await axios.post('http://localhost:5000/api/addNotification', {\n        tipo: 'temperatura',\n        descripcion: `Temperatura fuera de rango: ${temperaturaFormateada}°C`,\n        time_alert: Marca_tiempo\n      }, {\n        headers: {\n          'Content-Type': 'application/json'\n        }\n      });\n      const idNotificacion = notificacionResponse.data.id_notificacion;\n      if (idNotificacion) {\n        await axios.post('http://localhost:5000/api/addNotificationUser', {\n          id_notificacion: idNotificacion,\n          id_user: ID_usuario\n        }, {\n          headers: {\n            'Content-Type': 'application/json'\n          }\n        });\n        console.log('Relación notificación-usuario guardada con éxito');\n      }\n      setLastAlertValue(temperatura);\n    } catch (error) {\n      console.error('Error al gestionar la notificación:', error);\n      setAlertStatus(`Error de conexión: ${error.message}`);\n    }\n  }\n};\n\n// Nueva función para gestionar alertas de humedad\nconst gestionarNotificacionHumedad = async (humedad, ID_usuario, setAlertStatus, setLastAlertValue, lastAlertValue) => {\n  const Marca_tiempo = new Date().toISOString().slice(0, 19).replace('T', ' ');\n\n  // Insertar siempre la humedad en la base de datos\n  await enviarHumedad(ID_usuario, humedad, 'Zona 1', Marca_tiempo);\n  const humedadFormateada = humedad.toFixed(2);\n  console.log('Humedad formateada:', humedadFormateada);\n  if (lastAlertValue !== null && Math.abs(humedad - lastAlertValue) < 1) {\n    console.log('Humedad similar a la anterior, no se enviará alerta.');\n    return;\n  }\n  if (humedad < 30 || humedad > 50) {\n    try {\n      await enviarEmail('Humedad fuera de rango', humedad, 'humedad', setAlertStatus);\n      const notificacionResponse = await axios.post('http://localhost:5000/api/addNotification', {\n        tipo: 'humedad',\n        descripcion: `Humedad fuera de rango: ${humedadFormateada}%`,\n        time_alert: Marca_tiempo\n      }, {\n        headers: {\n          'Content-Type': 'application/json'\n        }\n      });\n      const idNotificacion = notificacionResponse.data.id_notificacion;\n      if (idNotificacion) {\n        await axios.post('http://localhost:5000/api/addNotificationUser', {\n          id_notificacion: idNotificacion,\n          id_user: ID_usuario\n        }, {\n          headers: {\n            'Content-Type': 'application/json'\n          }\n        });\n        console.log('Relación notificación-usuario guardada con éxito');\n      }\n      setLastAlertValue(humedad);\n    } catch (error) {\n      console.error('Error al gestionar la notificación:', error);\n      setAlertStatus(`Error de conexión: ${error.message}`);\n    }\n  }\n};\nconst TemperaturaAlert = ({\n  temperatura,\n  setTemperatura\n}) => {\n  _s();\n  const [inputValue, setInputValue] = useState(temperatura.toString());\n  const [lastAlertValue, setLastAlertValue] = useState(null);\n  const [alertStatus, setAlertStatus] = useState('');\n  const token = localStorage.getItem('token');\n  const ID_usuario = token ? jwtDecode(token).id : '';\n  const handleInputChange = e => setInputValue(e.target.value);\n  const handleUpdateTemperature = () => {\n    const newTemperatura = parseFloat(inputValue);\n    if (!isNaN(newTemperatura)) {\n      setTemperatura(newTemperatura);\n      gestionarNotificacionTemperatura(newTemperatura, ID_usuario, setAlertStatus, setLastAlertValue, lastAlertValue);\n    } else {\n      setAlertStatus('Por favor ingrese un número válido');\n      setTimeout(() => setAlertStatus(''), 3000);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"MonitoreoTemperatura\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Monitoreo De Temperatura\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 226,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"temperatura\",\n        children: \"Temperatura (\\xB0C): \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 228,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        id: \"temperatura\",\n        type: \"number\",\n        value: inputValue,\n        onChange: handleInputChange,\n        step: \"0.1\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 229,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleUpdateTemperature,\n        children: \"Actualizar\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 230,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 227,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Temperatura actual: \", /*#__PURE__*/_jsxDEV(\"span\", {\n        children: [temperatura.toFixed(2), \"\\xB0C\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 232,\n        columnNumber: 30\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 232,\n      columnNumber: 7\n    }, this), alertStatus && /*#__PURE__*/_jsxDEV(\"p\", {\n      children: alertStatus\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 233,\n      columnNumber: 23\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 225,\n    columnNumber: 5\n  }, this);\n};\n\n// Nuevo componente para monitorear humedad\n_s(TemperaturaAlert, \"SXHQEkyvBDclk8/MhxKtAoAiqdQ=\");\n_c = TemperaturaAlert;\nconst HumedadAlert = ({\n  humedad,\n  setHumedad\n}) => {\n  _s2();\n  const [inputValue, setInputValue] = useState(humedad.toString());\n  const [lastAlertValue, setLastAlertValue] = useState(null);\n  const [alertStatus, setAlertStatus] = useState('');\n  const token = localStorage.getItem('token');\n  const ID_usuario = token ? jwtDecode(token).id : '';\n  const handleInputChange = e => setInputValue(e.target.value);\n  const handleUpdateHumedad = () => {\n    const newHumedad = parseFloat(inputValue);\n    if (!isNaN(newHumedad)) {\n      setHumedad(newHumedad);\n      gestionarNotificacionHumedad(newHumedad, ID_usuario, setAlertStatus, setLastAlertValue, lastAlertValue);\n    } else {\n      setAlertStatus('Por favor ingrese un número válido');\n      setTimeout(() => setAlertStatus(''), 3000);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"MonitoreoHumedad\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Monitoreo De Humedad\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 262,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"humedad\",\n        children: \"Humedad (%): \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 264,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        id: \"humedad\",\n        type: \"number\",\n        value: inputValue,\n        onChange: handleInputChange,\n        step: \"0.1\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 265,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleUpdateHumedad,\n        children: \"Actualizar\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 266,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 263,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Humedad actual: \", /*#__PURE__*/_jsxDEV(\"span\", {\n        children: [humedad.toFixed(2), \"%\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 268,\n        columnNumber: 26\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 268,\n      columnNumber: 7\n    }, this), alertStatus && /*#__PURE__*/_jsxDEV(\"p\", {\n      children: alertStatus\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 269,\n      columnNumber: 23\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 261,\n    columnNumber: 5\n  }, this);\n};\n_s2(HumedadAlert, \"Cslk5TwE2HKZ/t7UeeG+kZvWWb8=\");\n_c2 = HumedadAlert;\nconst PruebasNotificaciones = () => {\n  _s3();\n  const [temperatura, setTemperatura] = useState(25);\n  const [humedad, setHumedad] = useState(40);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"PruebasNotificaciones\",\n    children: [/*#__PURE__*/_jsxDEV(TemperaturaAlert, {\n      temperatura: temperatura,\n      setTemperatura: setTemperatura\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 280,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"hr\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 281,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(HumedadAlert, {\n      humedad: humedad,\n      setHumedad: setHumedad\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 282,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 279,\n    columnNumber: 5\n  }, this);\n};\n_s3(PruebasNotificaciones, \"nFfk9TMAPB0lUdEctBHXkq2LoW0=\");\n_c3 = PruebasNotificaciones;\nexport default PruebasNotificaciones;\nvar _c, _c2, _c3;\n$RefreshReg$(_c, \"TemperaturaAlert\");\n$RefreshReg$(_c2, \"HumedadAlert\");\n$RefreshReg$(_c3, \"PruebasNotificaciones\");","map":{"version":3,"names":["useState","axios","jwtDecode","jsxDEV","_jsxDEV","enviarEmail","descripcion","valor","tipo","setAlertStatus","payload","temperatura","humedad","console","log","response","fetch","method","headers","body","JSON","stringify","result","json","ok","message","error","enviarTemperatura","ID_usuario","Zona","Marca_tiempo","Error","Medicion","post","timeout","enviarHumedad","gestionarNotificacionTemperatura","setLastAlertValue","lastAlertValue","Date","toISOString","slice","replace","temperaturaFormateada","toFixed","Math","abs","notificacionResponse","time_alert","idNotificacion","data","id_notificacion","id_user","gestionarNotificacionHumedad","humedadFormateada","TemperaturaAlert","setTemperatura","_s","inputValue","setInputValue","toString","alertStatus","token","localStorage","getItem","id","handleInputChange","e","target","value","handleUpdateTemperature","newTemperatura","parseFloat","isNaN","setTimeout","className","children","fileName","_jsxFileName","lineNumber","columnNumber","htmlFor","type","onChange","step","onClick","_c","HumedadAlert","setHumedad","_s2","handleUpdateHumedad","newHumedad","_c2","PruebasNotificaciones","_s3","_c3","$RefreshReg$"],"sources":["C:/Users/Roger/Documents/TT2_AVANCES/prototipo-gecko/frontend/src/pages/pruebasNotificaciones.jsx"],"sourcesContent":["import { useState } from 'react';\r\nimport axios from 'axios';\r\nimport { jwtDecode } from 'jwt-decode';\r\n\r\n// Función para enviar la alerta por correo\r\nconst enviarEmail = async (descripcion, valor, tipo, setAlertStatus) => {\r\n  setAlertStatus(`Enviando alerta de ${tipo}...`);\r\n  try {\r\n    // Adaptamos el objeto según el tipo para mantener compatibilidad con el backend\r\n    let payload;\r\n    if (tipo === 'temperatura') {\r\n      payload = { descripcion, temperatura: valor };\r\n    } else if (tipo === 'humedad') {\r\n      // Para humedad, enviamos un mensaje específico con el valor como porcentaje\r\n      payload = { \r\n        descripcion: `Alerta de humedad: ${valor}% - Fuera del rango permitido (30%-50%)`,\r\n        humedad: valor,\r\n        temperatura: valor // Mantenemos para compatibilidad con el backend\r\n      };\r\n    }\r\n\r\n    console.log(`Enviando alerta de ${tipo}:`, payload);\r\n    \r\n    const response = await fetch('http://localhost:5000/send-email', {\r\n      method: 'POST',\r\n      headers: { 'Content-Type': 'application/json' },\r\n      body: JSON.stringify(payload),\r\n    });\r\n\r\n    const result = await response.json();\r\n    if (response.ok) {\r\n      console.log(`Alerta de ${tipo} enviada con éxito:`, result.message);\r\n      setAlertStatus(`Alerta de ${tipo} enviada con éxito`);\r\n    } else {\r\n      console.error('Error en la respuesta del servidor:', result.message);\r\n      setAlertStatus(`Error: ${result.message}`);\r\n    }\r\n  } catch (error) {\r\n    console.error(`Error al enviar la alerta de ${tipo}:`, error);\r\n    setAlertStatus(`Error de conexión: ${error.message}`);\r\n  }\r\n};\r\n\r\n// Función para insertar la temperatura en la base de datos\r\nconst enviarTemperatura = async (ID_usuario, temperatura, Zona, Marca_tiempo) => {\r\n  try {\r\n    if (!ID_usuario || !temperatura || !Zona || !Marca_tiempo) {\r\n      console.error('Datos incompletos:', { ID_usuario, temperatura, Zona, Marca_tiempo });\r\n      throw new Error('Todos los campos son obligatorios');\r\n    }\r\n\r\n    console.log('Registrando temperatura en la base de datos:', {\r\n      ID_usuario,\r\n      Medicion: temperatura,\r\n      Zona,\r\n      Marca_tiempo\r\n    });\r\n\r\n    await axios.post(\r\n      'http://localhost:5000/api/addtemperatura',\r\n      {\r\n        ID_usuario,\r\n        Medicion: temperatura,\r\n        Zona,\r\n        Marca_tiempo\r\n      },\r\n      { headers: { \"Content-Type\": \"application/json\" }, timeout: 10000 }\r\n    );\r\n\r\n    console.log('Temperatura guardada correctamente.');\r\n  } catch (error) {\r\n    console.error('Error al guardar la temperatura:', error);\r\n  }\r\n};\r\n\r\n// Nueva función para insertar la humedad en la base de datos\r\nconst enviarHumedad = async (ID_usuario, humedad, Zona, Marca_tiempo) => {\r\n  try {\r\n    if (!ID_usuario || !humedad || !Zona || !Marca_tiempo) {\r\n      console.error('Datos incompletos:', { ID_usuario, humedad, Zona, Marca_tiempo });\r\n      throw new Error('Todos los campos son obligatorios');\r\n    }\r\n\r\n    console.log('Registrando humedad en la base de datos:', {\r\n      ID_usuario,\r\n      Medicion: humedad,\r\n      Zona,\r\n      Marca_tiempo\r\n    });\r\n\r\n    await axios.post(\r\n      'http://localhost:5000/api/addhumedad',\r\n      {\r\n        ID_usuario,\r\n        Medicion: humedad,\r\n        Zona,\r\n        Marca_tiempo\r\n      },\r\n      { headers: { \"Content-Type\": \"application/json\" }, timeout: 10000 }\r\n    );\r\n\r\n    console.log('Humedad guardada correctamente.');\r\n  } catch (error) {\r\n    console.error('Error al guardar la humedad:', error);\r\n  }\r\n};\r\n\r\n// Función para gestionar alertas de temperatura\r\nconst gestionarNotificacionTemperatura = async (temperatura, ID_usuario, setAlertStatus, setLastAlertValue, lastAlertValue) => {\r\n  const Marca_tiempo = new Date().toISOString().slice(0, 19).replace('T', ' ');\r\n\r\n  // Insertar siempre la temperatura en la base de datos\r\n  await enviarTemperatura(ID_usuario, temperatura, 'Zona 1', Marca_tiempo);\r\n\r\n  const temperaturaFormateada = temperatura.toFixed(2);\r\n  console.log('Temperatura formateada:', temperaturaFormateada);\r\n\r\n  if (lastAlertValue !== null && Math.abs(temperatura - lastAlertValue) < 1) {\r\n    console.log('Temperatura similar a la anterior, no se enviará alerta.');\r\n    return;\r\n  }\r\n\r\n  if (temperatura < 22 || temperatura > 32) {\r\n    try {\r\n      console.log('Temperatura fuera de rango, enviando alerta de correo...');\r\n      await enviarEmail(`Temperatura fuera de rango: ${temperaturaFormateada}°C`, temperatura, 'temperatura', setAlertStatus);\r\n\r\n      const notificacionResponse = await axios.post(\r\n        'http://localhost:5000/api/addNotification',\r\n        {\r\n          tipo: 'temperatura',\r\n          descripcion: `Temperatura fuera de rango: ${temperaturaFormateada}°C`,\r\n          time_alert: Marca_tiempo,\r\n        },\r\n        { headers: { 'Content-Type': 'application/json' } }\r\n      );\r\n\r\n      const idNotificacion = notificacionResponse.data.id_notificacion;\r\n      if (idNotificacion) {\r\n        await axios.post(\r\n          'http://localhost:5000/api/addNotificationUser',\r\n          { id_notificacion: idNotificacion, id_user: ID_usuario },\r\n          { headers: { 'Content-Type': 'application/json' } }\r\n        );\r\n        console.log('Relación notificación-usuario guardada con éxito');\r\n      }\r\n\r\n      setLastAlertValue(temperatura);\r\n    } catch (error) {\r\n      console.error('Error al gestionar la notificación:', error);\r\n      setAlertStatus(`Error de conexión: ${error.message}`);\r\n    }\r\n  }\r\n};\r\n\r\n// Nueva función para gestionar alertas de humedad\r\nconst gestionarNotificacionHumedad = async (humedad, ID_usuario, setAlertStatus, setLastAlertValue, lastAlertValue) => {\r\n  const Marca_tiempo = new Date().toISOString().slice(0, 19).replace('T', ' ');\r\n\r\n  // Insertar siempre la humedad en la base de datos\r\n  await enviarHumedad(ID_usuario, humedad, 'Zona 1', Marca_tiempo);\r\n\r\n  const humedadFormateada = humedad.toFixed(2);\r\n  console.log('Humedad formateada:', humedadFormateada);\r\n\r\n  if (lastAlertValue !== null && Math.abs(humedad - lastAlertValue) < 1) {\r\n    console.log('Humedad similar a la anterior, no se enviará alerta.');\r\n    return;\r\n  }\r\n\r\n  if (humedad < 30 || humedad > 50) {\r\n    try {\r\n      await enviarEmail('Humedad fuera de rango', humedad, 'humedad', setAlertStatus);\r\n\r\n      const notificacionResponse = await axios.post(\r\n        'http://localhost:5000/api/addNotification',\r\n        {\r\n          tipo: 'humedad',\r\n          descripcion: `Humedad fuera de rango: ${humedadFormateada}%`,\r\n          time_alert: Marca_tiempo,\r\n        },\r\n        { headers: { 'Content-Type': 'application/json' } }\r\n      );\r\n\r\n      const idNotificacion = notificacionResponse.data.id_notificacion;\r\n      if (idNotificacion) {\r\n        await axios.post(\r\n          'http://localhost:5000/api/addNotificationUser',\r\n          { id_notificacion: idNotificacion, id_user: ID_usuario },\r\n          { headers: { 'Content-Type': 'application/json' } }\r\n        );\r\n        console.log('Relación notificación-usuario guardada con éxito');\r\n      }\r\n\r\n      setLastAlertValue(humedad);\r\n    } catch (error) {\r\n      console.error('Error al gestionar la notificación:', error);\r\n      setAlertStatus(`Error de conexión: ${error.message}`);\r\n    }\r\n  }\r\n};\r\n\r\nconst TemperaturaAlert = ({ temperatura, setTemperatura }) => {\r\n  const [inputValue, setInputValue] = useState(temperatura.toString());\r\n  const [lastAlertValue, setLastAlertValue] = useState(null);\r\n  const [alertStatus, setAlertStatus] = useState('');\r\n\r\n  const token = localStorage.getItem('token');\r\n  const ID_usuario = token ? jwtDecode(token).id : '';\r\n\r\n  const handleInputChange = (e) => setInputValue(e.target.value);\r\n\r\n  const handleUpdateTemperature = () => {\r\n    const newTemperatura = parseFloat(inputValue);\r\n    if (!isNaN(newTemperatura)) {\r\n      setTemperatura(newTemperatura);\r\n      gestionarNotificacionTemperatura(newTemperatura, ID_usuario, setAlertStatus, setLastAlertValue, lastAlertValue);\r\n    } else {\r\n      setAlertStatus('Por favor ingrese un número válido');\r\n      setTimeout(() => setAlertStatus(''), 3000);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"MonitoreoTemperatura\">\r\n      <h2>Monitoreo De Temperatura</h2>\r\n      <div>\r\n        <label htmlFor=\"temperatura\">Temperatura (°C): </label>\r\n        <input id=\"temperatura\" type=\"number\" value={inputValue} onChange={handleInputChange} step=\"0.1\" />\r\n        <button onClick={handleUpdateTemperature}>Actualizar</button>\r\n      </div>\r\n      <p>Temperatura actual: <span>{temperatura.toFixed(2)}°C</span></p>\r\n      {alertStatus && <p>{alertStatus}</p>}\r\n    </div>\r\n  );\r\n};\r\n\r\n// Nuevo componente para monitorear humedad\r\nconst HumedadAlert = ({ humedad, setHumedad }) => {\r\n  const [inputValue, setInputValue] = useState(humedad.toString());\r\n  const [lastAlertValue, setLastAlertValue] = useState(null);\r\n  const [alertStatus, setAlertStatus] = useState('');\r\n\r\n  const token = localStorage.getItem('token');\r\n  const ID_usuario = token ? jwtDecode(token).id : '';\r\n\r\n  const handleInputChange = (e) => setInputValue(e.target.value);\r\n\r\n  const handleUpdateHumedad = () => {\r\n    const newHumedad = parseFloat(inputValue);\r\n    if (!isNaN(newHumedad)) {\r\n      setHumedad(newHumedad);\r\n      gestionarNotificacionHumedad(newHumedad, ID_usuario, setAlertStatus, setLastAlertValue, lastAlertValue);\r\n    } else {\r\n      setAlertStatus('Por favor ingrese un número válido');\r\n      setTimeout(() => setAlertStatus(''), 3000);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"MonitoreoHumedad\">\r\n      <h2>Monitoreo De Humedad</h2>\r\n      <div>\r\n        <label htmlFor=\"humedad\">Humedad (%): </label>\r\n        <input id=\"humedad\" type=\"number\" value={inputValue} onChange={handleInputChange} step=\"0.1\" />\r\n        <button onClick={handleUpdateHumedad}>Actualizar</button>\r\n      </div>\r\n      <p>Humedad actual: <span>{humedad.toFixed(2)}%</span></p>\r\n      {alertStatus && <p>{alertStatus}</p>}\r\n    </div>\r\n  );\r\n};\r\n\r\nconst PruebasNotificaciones = () => {\r\n  const [temperatura, setTemperatura] = useState(25);\r\n  const [humedad, setHumedad] = useState(40);\r\n  \r\n  return (\r\n    <div className=\"PruebasNotificaciones\">\r\n      <TemperaturaAlert temperatura={temperatura} setTemperatura={setTemperatura} />\r\n      <hr />\r\n      <HumedadAlert humedad={humedad} setHumedad={setHumedad} />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default PruebasNotificaciones;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}