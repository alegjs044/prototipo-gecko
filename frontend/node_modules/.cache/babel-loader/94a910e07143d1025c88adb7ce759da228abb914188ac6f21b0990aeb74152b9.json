{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Roger\\\\Documents\\\\TT2_AVANCES\\\\prototipo-gecko\\\\frontend\\\\src\\\\pages\\\\historial.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport Header from \"../components/Header\";\nimport Footer from \"../components/Footer\";\nimport { Line } from \"react-chartjs-2\";\nimport styled from 'styled-components';\nimport { useNavigate } from \"react-router-dom\";\nimport { ArrowDown } from \"lucide-react\";\nimport { jsPDF } from \"jspdf\";\n// Importamos axios para hacer peticiones HTTP a nuestra API\nimport axios from \"axios\";\n\n// Estilos (se mantienen igual que el código original)\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst Container = styled.div`\n  padding: 50px 30px;\n  margin: auto;\n  max-width: 1400px;\n  background: #f8f4e1;\n  border-radius: 20px;\n  box-shadow: 0px 4px 10px rgba(0, 0, 0, 0.2);\n  display: flex;\n  flex-direction: column;\n  gap: 20px;\n  min-height: 85vh;\n`;\n\n// El resto de los componentes styled se mantienen igual\n_c = Container;\nconst Column = styled.div`\n  display: flex;\n  flex-direction: column;\n  gap: 15px;\n`;\nconst Row = styled.div`\n  display: flex;\n  flex-direction: row;\n  justify-content: space-between;\n  gap: 20px;\n  padding: 20px;\n  margin: auto;\n  width: 100%;\n  border-radius: 25px;\n`;\nconst ControlsRow = styled(Row)`\n  background: transparent;\n  justify-content: flex-start;\n  gap: 15px;\n  padding: 10px 20px;\n`;\n_c2 = ControlsRow;\nconst ContentRow = styled(Row)`\n  display: flex;\n  flex-direction: row;\n  flex-wrap: nowrap;\n  justify-content: space-between;\n  gap: 30px;\n  \n  @media (max-width: 1200px) {\n    flex-direction: column;\n    align-items: center;\n  }\n`;\nconst CategorySelect = styled.select`\n  padding: 12px 15px;\n  border-radius: 25px;\n  border: 1px solid #ddd;\n  background-color: white;\n  width: 300px;\n  font-size: 16px;\n  appearance: none;\n  background-image: url(\"data:image/svg+xml;charset=UTF-8,%3csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 24 24' fill='none' stroke='currentColor' stroke-width='2' stroke-linecap='round' stroke-linejoin='round'%3e%3cpolyline points='6 9 12 15 18 9'%3e%3c/polyline%3e%3c/svg%3e\");\n  background-repeat: no-repeat;\n  background-position: right 1rem center;\n  background-size: 1em;\n  \n  &:focus {\n    outline: none;\n    border-color: #B4864D;\n  }\n`;\n_c3 = CategorySelect;\nconst RightButtonsContainer = styled.div`\n  display: flex;\n  gap: 15px;\n`;\n_c4 = RightButtonsContainer;\nconst SearchButton = styled.button`\n  background-color: #E74C3C;\n  color: white;\n  border: none;\n  border-radius: 5px;\n  padding: 8px 20px;\n  font-weight: bold;\n  cursor: pointer;\n  text-transform: uppercase;\n  font-size: 14px;\n  \n  &:hover {\n    background-color: #C0392B;\n  }\n`;\nconst DownloadButton = styled.button`\n  background-color: white;\n  border: 1px solid #ddd;\n  border-radius: 5px;\n  padding: 8px;\n  cursor: pointer;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  \n  &:hover {\n    background-color: #f5f5f5;\n  }\n`;\n_c5 = DownloadButton;\nconst DataPanel = styled.div`\n  background: rgba(123, 95, 61, 0.8);\n  box-shadow: inset -5px -5px 10px rgba(238, 209, 146, 0.5), \n              10px 10px 20px rgba(245, 239, 230, 0.2);\n  backdrop-filter: blur(10000px);\n  filter: drop-shadow(5px 5px 10px rgba(248, 202, 132, 3));\n  border: 1px solid rgba(248, 216, 186, 0.25);\n  border-radius: 10px;\n  padding: 15px;\n  width: 47%;\n  min-width: 300px;\n  min-height: 450px;\n  max-height: 500px;\n  overflow: auto;\n  \n  @media (max-width: 1200px) {\n    width: 100%;\n    max-width: 500px;\n  }\n`;\n_c6 = DataPanel;\nconst Table = styled.table`\n  width: 100%;\n  border-collapse: collapse;\n  background-color: white;\n  border-radius: 5px;\n  overflow: hidden;\n`;\n_c7 = Table;\nconst Th = styled.th`\n  background-color: #f0f0f0;\n  color: #333;\n  padding: 8px;\n  text-align: center;\n  border: 1px solid #ddd;\n  font-size: 14px;\n`;\n_c8 = Th;\nconst Td = styled.td`\n  padding: 6px 8px;\n  text-align: center;\n  border: 1px solid #ddd;\n  font-size: 14px;\n`;\n_c9 = Td;\nconst ChartContainer = styled.div`\n  background-color: white;\n  border-radius: 8px;\n  padding: 20px;\n  width: 100%;\n  height: 100%;\n  min-height: 300px;\n  overflow: hidden;\n  display: flex;\n  flex-direction: column;\n`;\n_c10 = ChartContainer;\nconst CurrentValue = styled.div`\n  text-align: center;\n  font-size: 3rem;\n  font-weight: bold;\n  margin-bottom: 10px;\n`;\n_c11 = CurrentValue;\nconst ChartTitle = styled.h3`\n  text-align: center;\n  background-color: #FF8C00;\n  color: white;\n  padding: 5px 15px;\n  border-radius: 4px;\n  margin: 0 auto 10px;\n  font-size: 16px;\n  display: inline-block;\n`;\n_c12 = ChartTitle;\nconst ChartTitleContainer = styled.div`\n  text-align: center;\n  margin-bottom: 5px;\n`;\n_c13 = ChartTitleContainer;\nconst Title = styled.h1`\n  text-align: center;\n  font-size: 2rem;\n  margin-bottom: 20px;\n  color: #333;\n`;\n\n// Categorías disponibles para seleccionar (Iluminacion ahora se llama Iluminacion UV para mayor claridad)\nconst categories = ['Temperatura', 'Iluminacion UV', 'Humedad'];\n\n/**\r\n * Formatea una fecha ISO de la base de datos a formato de visualización DD/MM/YYYY\r\n * @param {String} dateTimeString - Fecha en formato ISO (ej: 2025-03-20T14:30:00)\r\n * @returns {String} - Fecha formateada (ej: 20/03/2025)\r\n */\nconst formatDate = dateTimeString => {\n  // Crear un objeto Date a partir del string de fecha\n  const date = new Date(dateTimeString);\n  // Formatear la fecha como DD/MM/YYYY con padding de ceros (01/01/2025 en lugar de 1/1/2025)\n  return `${date.getDate().toString().padStart(2, '0')}/${(date.getMonth() + 1).toString().padStart(2, '0')}/${date.getFullYear()}`;\n};\n\n/**\r\n * Formatea la hora de un timestamp para mostrarla en la gráfica\r\n * @param {String} dateTimeString - Fecha y hora en formato ISO\r\n * @returns {String} - Hora formateada (ej: 14:30)\r\n */\nconst formatTimeForChart = dateTimeString => {\n  // Crear un objeto Date a partir del string de fecha y hora\n  const date = new Date(dateTimeString);\n  // Devolver solo la hora y minutos formateados como HH:MM\n  return `${date.getHours()}:${date.getMinutes().toString().padStart(2, '0')}`;\n};\n\n/**\r\n * Prepara los datos para la gráfica Chart.js\r\n * @param {Array} data - Array de objetos con datos\r\n * @param {String} category - Categoría seleccionada\r\n * @returns {Object} Objeto formateado para Chart.js\r\n */\nconst prepareChartData = (data, category) => {\n  // Si tenemos datos reales de la API para cualquiera de las categorías\n  if (Array.isArray(data) && data.length > 0) {\n    // Tomar solo los últimos 6 registros (o menos si hay menos disponibles) y revertir para orden cronológico\n    const lastSixData = data.slice(0, Math.min(6, data.length)).reverse();\n\n    // Construir los datos para la gráfica\n    return {\n      // Etiquetas del eje X: horas de las mediciones\n      labels: lastSixData.map(item => formatTimeForChart(item.Marca_tiempo)),\n      // Conjunto de datos para dibujar\n      datasets: [{\n        label: category,\n        // Convertimos las mediciones a números para la gráfica\n        data: lastSixData.map(item => parseFloat(item.Medicion)),\n        // Configuración visual de la línea\n        fill: false,\n        backgroundColor: 'rgba(255, 165, 0, 0.2)',\n        borderColor: '#FFA500',\n        borderWidth: 3,\n        tension: 0.3,\n        pointBackgroundColor: '#FFA500',\n        pointBorderColor: '#FFF',\n        pointBorderWidth: 2,\n        pointRadius: 5,\n        pointHoverRadius: 7\n      }]\n    };\n  } else {\n    // Si no hay datos, devolver un objeto con datos vacíos pero estructura válida\n    return {\n      labels: [],\n      datasets: [{\n        label: category,\n        data: [],\n        fill: false,\n        backgroundColor: 'rgba(255, 165, 0, 0.2)',\n        borderColor: '#FFA500',\n        borderWidth: 3,\n        tension: 0.3\n      }]\n    };\n  }\n};\n\n// Configuración de opciones para la gráfica\nconst getChartOptions = category => {\n  // Determinar el rango según la categoría\n  let min, max, stepSize;\n  switch (category) {\n    case 'Temperatura':\n      // Valores ampliados para acomodar un rango más amplio de temperaturas\n      min = 20.0;\n      max = 35.0;\n      stepSize = 2.5;\n      break;\n    case 'Humedad':\n      min = 55;\n      max = 75;\n      stepSize = 5;\n      break;\n    case 'Iluminacion UV':\n      min = 0;\n      max = 500;\n      stepSize = 50;\n      break;\n    default:\n      min = null;\n      max = null;\n      stepSize = null;\n  }\n  return {\n    responsive: true,\n    maintainAspectRatio: false,\n    plugins: {\n      legend: {\n        display: false\n      },\n      tooltip: {\n        mode: 'index',\n        intersect: false,\n        callbacks: {\n          label: function (context) {\n            let label = context.dataset.label || '';\n            if (label) {\n              label += ': ';\n            }\n            if (context.parsed.y !== null) {\n              label += context.parsed.y;\n              // Añadir unidad según la categoría\n              if (category === 'Temperatura') label += '°C';else if (category === 'Humedad') label += '%';else if (category === 'Iluminacion UV') label += ' lux';\n            }\n            return label;\n          }\n        }\n      }\n    },\n    scales: {\n      x: {\n        display: true,\n        grid: {\n          display: true,\n          color: '#CCCCCC',\n          drawBorder: true\n        },\n        ticks: {\n          font: {\n            size: 12\n          }\n        },\n        title: {\n          display: true,\n          text: 'Tiempo',\n          font: {\n            size: 14\n          }\n        }\n      },\n      y: {\n        display: true,\n        grid: {\n          display: true,\n          color: '#CCCCCC',\n          drawBorder: true\n        },\n        min: min,\n        max: max,\n        ticks: {\n          stepSize: stepSize,\n          font: {\n            size: 12\n          }\n        },\n        title: {\n          display: true,\n          text: category,\n          font: {\n            size: 14\n          }\n        }\n      }\n    },\n    elements: {\n      point: {\n        radius: 5,\n        hoverRadius: 7,\n        borderWidth: 2\n      },\n      line: {\n        tension: 0.3,\n        borderWidth: 3\n      }\n    },\n    layout: {\n      padding: {\n        top: 5,\n        right: 20,\n        bottom: 20,\n        left: 20\n      }\n    }\n  };\n};\n\n/**\r\n * Componente principal para la visualización del historial de datos\r\n */\nfunction Historial() {\n  _s();\n  // Estado para la búsqueda\n  const [search, setSearch] = useState('');\n\n  // Estado para la categoría seleccionada (por defecto 'Temperatura')\n  const [selectedCategory, setSelectedCategory] = useState(categories[0]);\n\n  // Estado para almacenar los datos de temperatura cargados desde la API\n  const [temperatureData, setTemperatureData] = useState([]);\n\n  // Estado para almacenar los datos de humedad cargados desde la API\n  const [humidityData, setHumidityData] = useState([]);\n\n  // Estado para almacenar los datos de iluminación UV cargados desde la API \n  const [illuminationData, setIlluminationData] = useState([]);\n\n  // Estado para los datos filtrados según búsqueda y categoría\n  const [filteredData, setFilteredData] = useState([]);\n\n  // Estado para los datos procesados para la gráfica\n  const [chartData, setChartData] = useState(null);\n\n  // Estado para el valor actual a mostrar prominentemente\n  const [currentValue, setCurrentValue] = useState('');\n\n  // Estado para las opciones de configuración de la gráfica\n  const [chartOptions, setChartOptions] = useState(getChartOptions(categories[0]));\n\n  // Estado para controlar errores de carga\n  const [error, setError] = useState(null);\n\n  // Estado para controlar indicador de carga\n  const [loading, setLoading] = useState(true);\n  const navigate = useNavigate();\n\n  // Verificar autenticación al cargar el componente\n  useEffect(() => {\n    const token = localStorage.getItem(\"token\");\n    if (!token) {\n      navigate(\"/login\");\n    }\n  }, [navigate]);\n\n  // ----- OPTIMIZACIÓN 1: EFECTO PARA CARGAR DATOS DE TEMPERATURA -----\n  useEffect(() => {\n    // Función asíncrona para obtener datos de la API\n    const fetchTemperatureData = async () => {\n      try {\n        // 1. Indicar que estamos cargando datos\n        setLoading(true);\n\n        // 2. Realizar la petición GET a la API\n        const response = await axios.get('http://localhost:5000/api/temperatura');\n\n        // 3. Verificar si hay datos en la respuesta\n        if (response.data && response.data.length > 0) {\n          // 4. Procesar los datos recibidos para adaptarlos al formato esperado\n          const formattedData = response.data.map(item => ({\n            fecha: formatDate(item.Marca_tiempo),\n            // Formateamos fecha para visualización\n            dato: `${item.Medicion}°C`,\n            // Agregamos unidad a la medición\n            zona: item.Zona,\n            // Guardamos la zona de la temperatura\n            raw: item // Guardamos el objeto original para acceso a datos crudos\n          }));\n\n          // 5. Actualizar el estado con los datos formateados\n          setTemperatureData(formattedData);\n        } else {\n          // 6. Si no hay datos, establecer un array vacío\n          setTemperatureData([]);\n        }\n\n        // 7. Finalizar el estado de carga\n        setLoading(false);\n      } catch (err) {\n        // 8. Manejar errores de la petición\n        console.error(\"Error al cargar datos de temperatura:\", err);\n        setError(\"Error al cargar datos de temperatura. Por favor, intente de nuevo más tarde.\");\n        setLoading(false);\n      }\n    };\n\n    // Ejecutar la función de carga\n    fetchTemperatureData();\n  }, []); // Se ejecuta solo al montar el componente\n\n  // ----- EFECTO PARA CARGAR DATOS DE HUMEDAD -----\n  useEffect(() => {\n    // Función asíncrona para obtener datos de humedad\n    const fetchHumidityData = async () => {\n      try {\n        // Realizar la petición GET a la API\n        const response = await axios.get('http://localhost:5000/api/humedad');\n\n        // Verificar si hay datos en la respuesta\n        if (response.data && response.data.length > 0) {\n          // Procesar los datos recibidos para adaptarlos al formato esperado\n          const formattedData = response.data.map(item => ({\n            fecha: formatDate(item.Marca_tiempo),\n            // Formateamos fecha para visualización\n            dato: `${item.Medicion}%`,\n            // Agregamos unidad a la medición\n            raw: item // Guardamos el objeto original para acceso a datos crudos\n          }));\n\n          // Actualizar el estado con los datos formateados\n          setHumidityData(formattedData);\n        } else {\n          // Si no hay datos, establecer un array vacío\n          setHumidityData([]);\n        }\n\n        // Finalizar el estado de carga\n        setLoading(false);\n      } catch (err) {\n        // Manejar errores de la petición\n        console.error(\"Error al cargar datos de humedad:\", err);\n        setError(\"Error al cargar datos de humedad. Por favor, intente de nuevo más tarde.\");\n        setLoading(false);\n      }\n    };\n\n    // Ejecutar la función de carga\n    fetchHumidityData();\n  }, []); // Se ejecuta solo al montar el componente\n\n  // ----- EFECTO PARA CARGAR DATOS DE ILUMINACIÓN UV -----\n  useEffect(() => {\n    // Función asíncrona para obtener datos de iluminación\n    const fetchIlluminationData = async () => {\n      try {\n        // Realizar la petición GET a la API\n        const response = await axios.get('http://localhost:5000/api/iluminacion');\n\n        // Verificar si hay datos en la respuesta\n        if (response.data && response.data.length > 0) {\n          // Procesar los datos recibidos para adaptarlos al formato esperado\n          const formattedData = response.data.map(item => ({\n            fecha: formatDate(item.Marca_tiempo),\n            // Formateamos fecha para visualización\n            dato: `${item.Medicion} lux`,\n            // Agregamos unidad a la medición\n            raw: item // Guardamos el objeto original para acceso a datos crudos\n          }));\n\n          // Actualizar el estado con los datos formateados\n          setIlluminationData(formattedData);\n        } else {\n          // Si no hay datos, establecer un array vacío\n          setIlluminationData([]);\n        }\n\n        // Finalizar el estado de carga después de cargar todos los datos\n        setLoading(false);\n      } catch (err) {\n        // Manejar errores de la petición\n        console.error(\"Error al cargar datos de iluminación:\", err);\n        setError(\"Error al cargar datos de iluminación. Por favor, intente de nuevo más tarde.\");\n        setLoading(false);\n      }\n    };\n\n    // Ejecutar la función de carga\n    fetchIlluminationData();\n  }, []); // Se ejecuta solo al montar el componente\n\n  // ----- EFECTO PARA ACTUALIZAR DATOS SEGÚN CATEGORÍA -----\n  useEffect(() => {\n    // Seleccionar datos según la categoría\n    switch (selectedCategory) {\n      case 'Temperatura':\n        // Actualizar los datos de la tabla\n        setFilteredData(temperatureData);\n\n        // Preparar datos para la gráfica\n        if (temperatureData.length > 0) {\n          // Extraer los datos originales desde los objetos 'raw'\n          const rawData = temperatureData.map(item => item.raw);\n\n          // Generar datos para la gráfica\n          setChartData(prepareChartData(rawData, selectedCategory));\n\n          // Actualizar el valor actual (primer registro, el más reciente)\n          setCurrentValue(temperatureData[0].dato);\n        } else {\n          // Si no hay datos, mostrar \"--\" como valor actual\n          setCurrentValue(\"--\");\n          setChartData(prepareChartData([], selectedCategory));\n        }\n        break;\n      case 'Humedad':\n        // Actualizar los datos de la tabla\n        setFilteredData(humidityData);\n\n        // Preparar datos para la gráfica\n        if (humidityData.length > 0) {\n          // Extraer los datos originales\n          const rawData = humidityData.map(item => item.raw);\n\n          // Generar datos para la gráfica\n          setChartData(prepareChartData(rawData, selectedCategory));\n\n          // Actualizar valor actual\n          setCurrentValue(humidityData[0].dato);\n        } else {\n          setCurrentValue(\"--\");\n          setChartData(prepareChartData([], selectedCategory));\n        }\n        break;\n      case 'Iluminacion UV':\n        // Actualizar los datos de la tabla\n        setFilteredData(illuminationData);\n\n        // Preparar datos para la gráfica\n        if (illuminationData.length > 0) {\n          // Extraer los datos originales\n          const rawData = illuminationData.map(item => item.raw);\n\n          // Generar datos para la gráfica\n          setChartData(prepareChartData(rawData, selectedCategory));\n\n          // Actualizar valor actual\n          setCurrentValue(illuminationData[0].dato);\n        } else {\n          setCurrentValue(\"--\");\n          setChartData(prepareChartData([], selectedCategory));\n        }\n        break;\n      default:\n        break;\n    }\n\n    // Actualizar opciones de la gráfica según la categoría\n    setChartOptions(getChartOptions(selectedCategory));\n  }, [selectedCategory, temperatureData, humidityData, illuminationData]); // Se ejecuta cuando cambia la categoría o los datos\n\n  // Manejador para el cambio de categoría en el selector\n  const handleCategoryChange = event => {\n    setSelectedCategory(event.target.value);\n  };\n\n  // Función para manejar el filtro de búsqueda\n  const handleSearchChange = event => {\n    const query = event.target.value.toLowerCase();\n    setSearch(query);\n\n    // Obtener el conjunto de datos correspondiente a la categoría seleccionada\n    let dataToFilter;\n    switch (selectedCategory) {\n      case 'Temperatura':\n        dataToFilter = temperatureData;\n        break;\n      case 'Humedad':\n        dataToFilter = humidityData;\n        break;\n      case 'Iluminacion UV':\n        dataToFilter = illuminationData;\n        break;\n      default:\n        dataToFilter = [];\n    }\n\n    // Filtrar los datos según la consulta\n    const filtered = dataToFilter.filter(item => item.fecha.toLowerCase().includes(query) || item.dato.toLowerCase().includes(query) || item.zona && item.zona.toLowerCase().includes(query));\n    setFilteredData(filtered);\n  };\n\n  // Función para descargar la tabla como PDF\n  const downloadPDF = () => {\n    const doc = new jsPDF();\n    let y = 20;\n    doc.text(`Tabla de Datos - ${selectedCategory}`, 20, y);\n    y += 10;\n\n    // Escribir los encabezados\n    doc.text(\"Fecha\", 20, y);\n    doc.text(\"Dato\", 80, y);\n    // Agregar columna de zona solo para temperatura\n    if (selectedCategory === 'Temperatura') {\n      doc.text(\"Zona\", 140, y);\n    }\n    y += 10;\n\n    // Escribir los datos de la tabla\n    filteredData.forEach(item => {\n      doc.text(item.fecha, 20, y);\n      doc.text(item.dato, 80, y);\n      if (selectedCategory === 'Temperatura' && item.zona) {\n        doc.text(item.zona, 140, y);\n      }\n      y += 10;\n\n      // Si llegamos al final de la página, crear una nueva\n      if (y > 280) {\n        doc.addPage();\n        y = 20;\n      }\n    });\n\n    // Guardar como PDF\n    doc.save(`tabla_${selectedCategory.toLowerCase()}.pdf`);\n  };\n\n  // Renderizar mensaje de carga o error si es necesario\n  if (loading) {\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(Header, {\n        showUserIcon: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 729,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Container, {\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            textAlign: 'center',\n            padding: '50px'\n          },\n          children: \"Cargando datos...\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 731,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 730,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Footer, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 735,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true);\n  }\n  if (error) {\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(Header, {\n        showUserIcon: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 743,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Container, {\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            textAlign: 'center',\n            padding: '50px',\n            color: 'red'\n          },\n          children: error\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 745,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 744,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Footer, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 749,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true);\n  }\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Header, {\n      showUserIcon: true\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 757,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Container, {\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        style: {\n          textAlign: 'center',\n          margin: '10px 0 30px'\n        },\n        children: \" \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 762,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(ControlsRow, {\n        children: [/*#__PURE__*/_jsxDEV(CategorySelect, {\n          onChange: handleCategoryChange,\n          value: selectedCategory,\n          children: categories.map(category => /*#__PURE__*/_jsxDEV(\"option\", {\n            value: category,\n            children: category\n          }, category, false, {\n            fileName: _jsxFileName,\n            lineNumber: 768,\n            columnNumber: 15\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 766,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(RightButtonsContainer, {\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            placeholder: \"Buscar...\",\n            value: search,\n            onChange: handleSearchChange,\n            style: {\n              padding: '8px 10px',\n              borderRadius: '5px',\n              border: '1px solid #ddd'\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 776,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(DownloadButton, {\n            onClick: downloadPDF,\n            children: /*#__PURE__*/_jsxDEV(ArrowDown, {\n              size: 24\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 789,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 788,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 774,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 765,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          display: 'flex',\n          flexDirection: 'row',\n          justifyContent: 'space-between',\n          gap: '30px',\n          width: '100%'\n        },\n        children: [/*#__PURE__*/_jsxDEV(DataPanel, {\n          children: /*#__PURE__*/_jsxDEV(Table, {\n            children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n              children: /*#__PURE__*/_jsxDEV(\"tr\", {\n                children: [/*#__PURE__*/_jsxDEV(Th, {\n                  children: \"Fecha\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 801,\n                  columnNumber: 19\n                }, this), /*#__PURE__*/_jsxDEV(Th, {\n                  children: \"Dato\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 802,\n                  columnNumber: 19\n                }, this), selectedCategory === 'Temperatura' && /*#__PURE__*/_jsxDEV(Th, {\n                  children: \"Zona\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 804,\n                  columnNumber: 58\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 800,\n                columnNumber: 17\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 799,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n              children: filteredData.length > 0 ? filteredData.map((item, index) => /*#__PURE__*/_jsxDEV(\"tr\", {\n                children: [/*#__PURE__*/_jsxDEV(Td, {\n                  children: item.fecha\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 811,\n                  columnNumber: 23\n                }, this), /*#__PURE__*/_jsxDEV(Td, {\n                  children: item.dato\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 812,\n                  columnNumber: 23\n                }, this), selectedCategory === 'Temperatura' && /*#__PURE__*/_jsxDEV(Td, {\n                  children: item.zona || '-'\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 813,\n                  columnNumber: 62\n                }, this)]\n              }, index, true, {\n                fileName: _jsxFileName,\n                lineNumber: 810,\n                columnNumber: 21\n              }, this)) : /*#__PURE__*/_jsxDEV(\"tr\", {\n                children: /*#__PURE__*/_jsxDEV(Td, {\n                  colSpan: selectedCategory === 'Temperatura' ? 3 : 2,\n                  style: {\n                    textAlign: 'center'\n                  },\n                  children: \"No hay datos disponibles\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 818,\n                  columnNumber: 21\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 817,\n                columnNumber: 19\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 807,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 798,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 797,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(DataPanel, {\n          children: /*#__PURE__*/_jsxDEV(ChartContainer, {\n            children: [/*#__PURE__*/_jsxDEV(ChartTitleContainer, {\n              children: /*#__PURE__*/_jsxDEV(ChartTitle, {\n                children: selectedCategory\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 832,\n                columnNumber: 17\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 831,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(CurrentValue, {\n              children: currentValue\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 836,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              style: {\n                height: '250px',\n                width: '100%',\n                flexGrow: 1\n              },\n              children: chartData && /*#__PURE__*/_jsxDEV(Line, {\n                data: chartData,\n                options: chartOptions\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 840,\n                columnNumber: 31\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 839,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 829,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 828,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 795,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 760,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Footer, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 848,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n}\n_s(Historial, \"071qcnPnxb/EUCh521/pHosmddk=\", false, function () {\n  return [useNavigate];\n});\n_c14 = Historial;\nexport default Historial;\nvar _c, _c2, _c3, _c4, _c5, _c6, _c7, _c8, _c9, _c10, _c11, _c12, _c13, _c14;\n$RefreshReg$(_c, \"Container\");\n$RefreshReg$(_c2, \"ControlsRow\");\n$RefreshReg$(_c3, \"CategorySelect\");\n$RefreshReg$(_c4, \"RightButtonsContainer\");\n$RefreshReg$(_c5, \"DownloadButton\");\n$RefreshReg$(_c6, \"DataPanel\");\n$RefreshReg$(_c7, \"Table\");\n$RefreshReg$(_c8, \"Th\");\n$RefreshReg$(_c9, \"Td\");\n$RefreshReg$(_c10, \"ChartContainer\");\n$RefreshReg$(_c11, \"CurrentValue\");\n$RefreshReg$(_c12, \"ChartTitle\");\n$RefreshReg$(_c13, \"ChartTitleContainer\");\n$RefreshReg$(_c14, \"Historial\");","map":{"version":3,"names":["React","useState","useEffect","Header","Footer","Line","styled","useNavigate","ArrowDown","jsPDF","axios","jsxDEV","_jsxDEV","Fragment","_Fragment","Container","div","_c","Column","Row","ControlsRow","_c2","ContentRow","CategorySelect","select","_c3","RightButtonsContainer","_c4","SearchButton","button","DownloadButton","_c5","DataPanel","_c6","Table","table","_c7","Th","th","_c8","Td","td","_c9","ChartContainer","_c10","CurrentValue","_c11","ChartTitle","h3","_c12","ChartTitleContainer","_c13","Title","h1","categories","formatDate","dateTimeString","date","Date","getDate","toString","padStart","getMonth","getFullYear","formatTimeForChart","getHours","getMinutes","prepareChartData","data","category","Array","isArray","length","lastSixData","slice","Math","min","reverse","labels","map","item","Marca_tiempo","datasets","label","parseFloat","Medicion","fill","backgroundColor","borderColor","borderWidth","tension","pointBackgroundColor","pointBorderColor","pointBorderWidth","pointRadius","pointHoverRadius","getChartOptions","max","stepSize","responsive","maintainAspectRatio","plugins","legend","display","tooltip","mode","intersect","callbacks","context","dataset","parsed","y","scales","x","grid","color","drawBorder","ticks","font","size","title","text","elements","point","radius","hoverRadius","line","layout","padding","top","right","bottom","left","Historial","_s","search","setSearch","selectedCategory","setSelectedCategory","temperatureData","setTemperatureData","humidityData","setHumidityData","illuminationData","setIlluminationData","filteredData","setFilteredData","chartData","setChartData","currentValue","setCurrentValue","chartOptions","setChartOptions","error","setError","loading","setLoading","navigate","token","localStorage","getItem","fetchTemperatureData","response","get","formattedData","fecha","dato","zona","Zona","raw","err","console","fetchHumidityData","fetchIlluminationData","rawData","handleCategoryChange","event","target","value","handleSearchChange","query","toLowerCase","dataToFilter","filtered","filter","includes","downloadPDF","doc","forEach","addPage","save","children","showUserIcon","fileName","_jsxFileName","lineNumber","columnNumber","style","textAlign","margin","onChange","type","placeholder","borderRadius","border","onClick","flexDirection","justifyContent","gap","width","index","colSpan","height","flexGrow","options","_c14","$RefreshReg$"],"sources":["C:/Users/Roger/Documents/TT2_AVANCES/prototipo-gecko/frontend/src/pages/historial.jsx"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport Header from \"../components/Header\";\r\nimport Footer from \"../components/Footer\";\r\nimport { Line } from \"react-chartjs-2\";\r\nimport styled from 'styled-components';\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport { ArrowDown } from \"lucide-react\";\r\nimport { jsPDF } from \"jspdf\";\r\n// Importamos axios para hacer peticiones HTTP a nuestra API\r\nimport axios from \"axios\";\r\n\r\n// Estilos (se mantienen igual que el código original)\r\nconst Container = styled.div`\r\n  padding: 50px 30px;\r\n  margin: auto;\r\n  max-width: 1400px;\r\n  background: #f8f4e1;\r\n  border-radius: 20px;\r\n  box-shadow: 0px 4px 10px rgba(0, 0, 0, 0.2);\r\n  display: flex;\r\n  flex-direction: column;\r\n  gap: 20px;\r\n  min-height: 85vh;\r\n`;\r\n\r\n// El resto de los componentes styled se mantienen igual\r\nconst Column = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  gap: 15px;\r\n`;\r\n\r\nconst Row = styled.div`\r\n  display: flex;\r\n  flex-direction: row;\r\n  justify-content: space-between;\r\n  gap: 20px;\r\n  padding: 20px;\r\n  margin: auto;\r\n  width: 100%;\r\n  border-radius: 25px;\r\n`;\r\n\r\nconst ControlsRow = styled(Row)`\r\n  background: transparent;\r\n  justify-content: flex-start;\r\n  gap: 15px;\r\n  padding: 10px 20px;\r\n`;\r\n\r\nconst ContentRow = styled(Row)`\r\n  display: flex;\r\n  flex-direction: row;\r\n  flex-wrap: nowrap;\r\n  justify-content: space-between;\r\n  gap: 30px;\r\n  \r\n  @media (max-width: 1200px) {\r\n    flex-direction: column;\r\n    align-items: center;\r\n  }\r\n`;\r\n\r\nconst CategorySelect = styled.select`\r\n  padding: 12px 15px;\r\n  border-radius: 25px;\r\n  border: 1px solid #ddd;\r\n  background-color: white;\r\n  width: 300px;\r\n  font-size: 16px;\r\n  appearance: none;\r\n  background-image: url(\"data:image/svg+xml;charset=UTF-8,%3csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 24 24' fill='none' stroke='currentColor' stroke-width='2' stroke-linecap='round' stroke-linejoin='round'%3e%3cpolyline points='6 9 12 15 18 9'%3e%3c/polyline%3e%3c/svg%3e\");\r\n  background-repeat: no-repeat;\r\n  background-position: right 1rem center;\r\n  background-size: 1em;\r\n  \r\n  &:focus {\r\n    outline: none;\r\n    border-color: #B4864D;\r\n  }\r\n`;\r\n\r\nconst RightButtonsContainer = styled.div`\r\n  display: flex;\r\n  gap: 15px;\r\n`;\r\n\r\nconst SearchButton = styled.button`\r\n  background-color: #E74C3C;\r\n  color: white;\r\n  border: none;\r\n  border-radius: 5px;\r\n  padding: 8px 20px;\r\n  font-weight: bold;\r\n  cursor: pointer;\r\n  text-transform: uppercase;\r\n  font-size: 14px;\r\n  \r\n  &:hover {\r\n    background-color: #C0392B;\r\n  }\r\n`;\r\n\r\nconst DownloadButton = styled.button`\r\n  background-color: white;\r\n  border: 1px solid #ddd;\r\n  border-radius: 5px;\r\n  padding: 8px;\r\n  cursor: pointer;\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  \r\n  &:hover {\r\n    background-color: #f5f5f5;\r\n  }\r\n`;\r\n\r\nconst DataPanel = styled.div`\r\n  background: rgba(123, 95, 61, 0.8);\r\n  box-shadow: inset -5px -5px 10px rgba(238, 209, 146, 0.5), \r\n              10px 10px 20px rgba(245, 239, 230, 0.2);\r\n  backdrop-filter: blur(10000px);\r\n  filter: drop-shadow(5px 5px 10px rgba(248, 202, 132, 3));\r\n  border: 1px solid rgba(248, 216, 186, 0.25);\r\n  border-radius: 10px;\r\n  padding: 15px;\r\n  width: 47%;\r\n  min-width: 300px;\r\n  min-height: 450px;\r\n  max-height: 500px;\r\n  overflow: auto;\r\n  \r\n  @media (max-width: 1200px) {\r\n    width: 100%;\r\n    max-width: 500px;\r\n  }\r\n`;\r\n\r\nconst Table = styled.table`\r\n  width: 100%;\r\n  border-collapse: collapse;\r\n  background-color: white;\r\n  border-radius: 5px;\r\n  overflow: hidden;\r\n`;\r\n\r\nconst Th = styled.th`\r\n  background-color: #f0f0f0;\r\n  color: #333;\r\n  padding: 8px;\r\n  text-align: center;\r\n  border: 1px solid #ddd;\r\n  font-size: 14px;\r\n`;\r\n\r\nconst Td = styled.td`\r\n  padding: 6px 8px;\r\n  text-align: center;\r\n  border: 1px solid #ddd;\r\n  font-size: 14px;\r\n`;\r\n\r\nconst ChartContainer = styled.div`\r\n  background-color: white;\r\n  border-radius: 8px;\r\n  padding: 20px;\r\n  width: 100%;\r\n  height: 100%;\r\n  min-height: 300px;\r\n  overflow: hidden;\r\n  display: flex;\r\n  flex-direction: column;\r\n`;\r\n\r\nconst CurrentValue = styled.div`\r\n  text-align: center;\r\n  font-size: 3rem;\r\n  font-weight: bold;\r\n  margin-bottom: 10px;\r\n`;\r\n\r\nconst ChartTitle = styled.h3`\r\n  text-align: center;\r\n  background-color: #FF8C00;\r\n  color: white;\r\n  padding: 5px 15px;\r\n  border-radius: 4px;\r\n  margin: 0 auto 10px;\r\n  font-size: 16px;\r\n  display: inline-block;\r\n`;\r\n\r\nconst ChartTitleContainer = styled.div`\r\n  text-align: center;\r\n  margin-bottom: 5px;\r\n`;\r\n\r\nconst Title = styled.h1`\r\n  text-align: center;\r\n  font-size: 2rem;\r\n  margin-bottom: 20px;\r\n  color: #333;\r\n`;\r\n\r\n// Categorías disponibles para seleccionar (Iluminacion ahora se llama Iluminacion UV para mayor claridad)\r\nconst categories = ['Temperatura', 'Iluminacion UV', 'Humedad'];\r\n\r\n/**\r\n * Formatea una fecha ISO de la base de datos a formato de visualización DD/MM/YYYY\r\n * @param {String} dateTimeString - Fecha en formato ISO (ej: 2025-03-20T14:30:00)\r\n * @returns {String} - Fecha formateada (ej: 20/03/2025)\r\n */\r\nconst formatDate = (dateTimeString) => {\r\n  // Crear un objeto Date a partir del string de fecha\r\n  const date = new Date(dateTimeString);\r\n  // Formatear la fecha como DD/MM/YYYY con padding de ceros (01/01/2025 en lugar de 1/1/2025)\r\n  return `${date.getDate().toString().padStart(2, '0')}/${(date.getMonth() + 1).toString().padStart(2, '0')}/${date.getFullYear()}`;\r\n};\r\n\r\n/**\r\n * Formatea la hora de un timestamp para mostrarla en la gráfica\r\n * @param {String} dateTimeString - Fecha y hora en formato ISO\r\n * @returns {String} - Hora formateada (ej: 14:30)\r\n */\r\nconst formatTimeForChart = (dateTimeString) => {\r\n  // Crear un objeto Date a partir del string de fecha y hora\r\n  const date = new Date(dateTimeString);\r\n  // Devolver solo la hora y minutos formateados como HH:MM\r\n  return `${date.getHours()}:${date.getMinutes().toString().padStart(2, '0')}`;\r\n};\r\n\r\n/**\r\n * Prepara los datos para la gráfica Chart.js\r\n * @param {Array} data - Array de objetos con datos\r\n * @param {String} category - Categoría seleccionada\r\n * @returns {Object} Objeto formateado para Chart.js\r\n */\r\nconst prepareChartData = (data, category) => {\r\n  // Si tenemos datos reales de la API para cualquiera de las categorías\r\n  if (Array.isArray(data) && data.length > 0) {\r\n    // Tomar solo los últimos 6 registros (o menos si hay menos disponibles) y revertir para orden cronológico\r\n    const lastSixData = data.slice(0, Math.min(6, data.length)).reverse();\r\n    \r\n    // Construir los datos para la gráfica\r\n    return {\r\n      // Etiquetas del eje X: horas de las mediciones\r\n      labels: lastSixData.map(item => formatTimeForChart(item.Marca_tiempo)),\r\n      \r\n      // Conjunto de datos para dibujar\r\n      datasets: [\r\n        {\r\n          label: category,\r\n          // Convertimos las mediciones a números para la gráfica\r\n          data: lastSixData.map(item => parseFloat(item.Medicion)),\r\n          // Configuración visual de la línea\r\n          fill: false,\r\n          backgroundColor: 'rgba(255, 165, 0, 0.2)',\r\n          borderColor: '#FFA500',\r\n          borderWidth: 3,\r\n          tension: 0.3,\r\n          pointBackgroundColor: '#FFA500',\r\n          pointBorderColor: '#FFF',\r\n          pointBorderWidth: 2,\r\n          pointRadius: 5,\r\n          pointHoverRadius: 7,\r\n        }\r\n      ]\r\n    };\r\n  } else {\r\n    // Si no hay datos, devolver un objeto con datos vacíos pero estructura válida\r\n    return {\r\n      labels: [],\r\n      datasets: [\r\n        {\r\n          label: category,\r\n          data: [],\r\n          fill: false,\r\n          backgroundColor: 'rgba(255, 165, 0, 0.2)',\r\n          borderColor: '#FFA500',\r\n          borderWidth: 3,\r\n          tension: 0.3,\r\n        }\r\n      ]\r\n    };\r\n  }\r\n};\r\n\r\n// Configuración de opciones para la gráfica\r\nconst getChartOptions = (category) => {\r\n  // Determinar el rango según la categoría\r\n  let min, max, stepSize;\r\n  \r\n  switch(category) {\r\n    case 'Temperatura':\r\n      // Valores ampliados para acomodar un rango más amplio de temperaturas\r\n      min = 20.0;\r\n      max = 35.0;\r\n      stepSize = 2.5;\r\n      break;\r\n    case 'Humedad':\r\n      min = 55;\r\n      max = 75;\r\n      stepSize = 5;\r\n      break;\r\n    case 'Iluminacion UV':\r\n      min = 0;\r\n      max = 500;\r\n      stepSize = 50;\r\n      break;\r\n    default:\r\n      min = null;\r\n      max = null;\r\n      stepSize = null;\r\n  }\r\n\r\n  return {\r\n    responsive: true,\r\n    maintainAspectRatio: false,\r\n    plugins: {\r\n      legend: {\r\n        display: false\r\n      },\r\n      tooltip: {\r\n        mode: 'index',\r\n        intersect: false,\r\n        callbacks: {\r\n          label: function(context) {\r\n            let label = context.dataset.label || '';\r\n            if (label) {\r\n              label += ': ';\r\n            }\r\n            if (context.parsed.y !== null) {\r\n              label += context.parsed.y;\r\n              // Añadir unidad según la categoría\r\n              if (category === 'Temperatura') label += '°C';\r\n              else if (category === 'Humedad') label += '%';\r\n              else if (category === 'Iluminacion UV') label += ' lux';\r\n            }\r\n            return label;\r\n          }\r\n        }\r\n      }\r\n    },\r\n    scales: {\r\n      x: {\r\n        display: true,\r\n        grid: {\r\n          display: true,\r\n          color: '#CCCCCC',\r\n          drawBorder: true,\r\n        },\r\n        ticks: {\r\n          font: {\r\n            size: 12\r\n          }\r\n        },\r\n        title: {\r\n          display: true,\r\n          text: 'Tiempo',\r\n          font: {\r\n            size: 14\r\n          }\r\n        }\r\n      },\r\n      y: {\r\n        display: true,\r\n        grid: {\r\n          display: true,\r\n          color: '#CCCCCC',\r\n          drawBorder: true,\r\n        },\r\n        min: min,\r\n        max: max,\r\n        ticks: {\r\n          stepSize: stepSize,\r\n          font: {\r\n            size: 12\r\n          }\r\n        },\r\n        title: {\r\n          display: true,\r\n          text: category,\r\n          font: {\r\n            size: 14\r\n          }\r\n        }\r\n      }\r\n    },\r\n    elements: {\r\n      point: {\r\n        radius: 5,\r\n        hoverRadius: 7,\r\n        borderWidth: 2\r\n      },\r\n      line: {\r\n        tension: 0.3,\r\n        borderWidth: 3,\r\n      }\r\n    },\r\n    layout: {\r\n      padding: {\r\n        top: 5,\r\n        right: 20,\r\n        bottom: 20,\r\n        left: 20\r\n      }\r\n    }\r\n  };\r\n};\r\n\r\n\r\n/**\r\n * Componente principal para la visualización del historial de datos\r\n */\r\nfunction Historial() {\r\n  // Estado para la búsqueda\r\n  const [search, setSearch] = useState('');\r\n\r\n  // Estado para la categoría seleccionada (por defecto 'Temperatura')\r\n  const [selectedCategory, setSelectedCategory] = useState(categories[0]);\r\n  \r\n  // Estado para almacenar los datos de temperatura cargados desde la API\r\n  const [temperatureData, setTemperatureData] = useState([]);\r\n\r\n  // Estado para almacenar los datos de humedad cargados desde la API\r\n  const [humidityData, setHumidityData] = useState([]);\r\n\r\n   // Estado para almacenar los datos de iluminación UV cargados desde la API \r\n   const [illuminationData, setIlluminationData] = useState([]);\r\n  \r\n  // Estado para los datos filtrados según búsqueda y categoría\r\n  const [filteredData, setFilteredData] = useState([]);\r\n  \r\n  // Estado para los datos procesados para la gráfica\r\n  const [chartData, setChartData] = useState(null);\r\n  \r\n  // Estado para el valor actual a mostrar prominentemente\r\n  const [currentValue, setCurrentValue] = useState('');\r\n  \r\n  // Estado para las opciones de configuración de la gráfica\r\n  const [chartOptions, setChartOptions] = useState(getChartOptions(categories[0]));\r\n  \r\n  // Estado para controlar errores de carga\r\n  const [error, setError] = useState(null);\r\n  \r\n  // Estado para controlar indicador de carga\r\n  const [loading, setLoading] = useState(true);\r\n  \r\n  const navigate = useNavigate();\r\n\r\n  // Verificar autenticación al cargar el componente\r\n  useEffect(() => {\r\n    const token = localStorage.getItem(\"token\");\r\n    if (!token) {\r\n      navigate(\"/login\");\r\n    }\r\n  }, [navigate]);\r\n\r\n  // ----- OPTIMIZACIÓN 1: EFECTO PARA CARGAR DATOS DE TEMPERATURA -----\r\n  useEffect(() => {\r\n    // Función asíncrona para obtener datos de la API\r\n    const fetchTemperatureData = async () => {\r\n      try {\r\n        // 1. Indicar que estamos cargando datos\r\n        setLoading(true);\r\n        \r\n        // 2. Realizar la petición GET a la API\r\n        const response = await axios.get('http://localhost:5000/api/temperatura');\r\n        \r\n        // 3. Verificar si hay datos en la respuesta\r\n        if (response.data && response.data.length > 0) {\r\n          // 4. Procesar los datos recibidos para adaptarlos al formato esperado\r\n          const formattedData = response.data.map(item => ({\r\n            fecha: formatDate(item.Marca_tiempo),  // Formateamos fecha para visualización\r\n            dato: `${item.Medicion}°C`,            // Agregamos unidad a la medición\r\n            zona: item.Zona,                       // Guardamos la zona de la temperatura\r\n            raw: item                              // Guardamos el objeto original para acceso a datos crudos\r\n          }));\r\n          \r\n          // 5. Actualizar el estado con los datos formateados\r\n          setTemperatureData(formattedData);\r\n        } else {\r\n          // 6. Si no hay datos, establecer un array vacío\r\n          setTemperatureData([]);\r\n        }\r\n        \r\n        // 7. Finalizar el estado de carga\r\n        setLoading(false);\r\n      } catch (err) {\r\n        // 8. Manejar errores de la petición\r\n        console.error(\"Error al cargar datos de temperatura:\", err);\r\n        setError(\"Error al cargar datos de temperatura. Por favor, intente de nuevo más tarde.\");\r\n        setLoading(false);\r\n      }\r\n    };\r\n    \r\n    // Ejecutar la función de carga\r\n    fetchTemperatureData();\r\n  }, []); // Se ejecuta solo al montar el componente\r\n\r\n  // ----- EFECTO PARA CARGAR DATOS DE HUMEDAD -----\r\n  useEffect(() => {\r\n    // Función asíncrona para obtener datos de humedad\r\n    const fetchHumidityData = async () => {\r\n      try {\r\n        // Realizar la petición GET a la API\r\n        const response = await axios.get('http://localhost:5000/api/humedad');\r\n        \r\n        // Verificar si hay datos en la respuesta\r\n        if (response.data && response.data.length > 0) {\r\n          // Procesar los datos recibidos para adaptarlos al formato esperado\r\n          const formattedData = response.data.map(item => ({\r\n            fecha: formatDate(item.Marca_tiempo),  // Formateamos fecha para visualización\r\n            dato: `${item.Medicion}%`,             // Agregamos unidad a la medición\r\n            raw: item                              // Guardamos el objeto original para acceso a datos crudos\r\n          }));\r\n          \r\n          // Actualizar el estado con los datos formateados\r\n          setHumidityData(formattedData);\r\n        } else {\r\n          // Si no hay datos, establecer un array vacío\r\n          setHumidityData([]);\r\n        }\r\n        \r\n        // Finalizar el estado de carga\r\n        setLoading(false);\r\n      } catch (err) {\r\n        // Manejar errores de la petición\r\n        console.error(\"Error al cargar datos de humedad:\", err);\r\n        setError(\"Error al cargar datos de humedad. Por favor, intente de nuevo más tarde.\");\r\n        setLoading(false);\r\n      }\r\n    };\r\n    \r\n    // Ejecutar la función de carga\r\n    fetchHumidityData();\r\n  }, []); // Se ejecuta solo al montar el componente\r\n\r\n  // ----- EFECTO PARA CARGAR DATOS DE ILUMINACIÓN UV -----\r\n  useEffect(() => {\r\n    // Función asíncrona para obtener datos de iluminación\r\n    const fetchIlluminationData = async () => {\r\n      try {\r\n        // Realizar la petición GET a la API\r\n        const response = await axios.get('http://localhost:5000/api/iluminacion');\r\n        \r\n        // Verificar si hay datos en la respuesta\r\n        if (response.data && response.data.length > 0) {\r\n          // Procesar los datos recibidos para adaptarlos al formato esperado\r\n          const formattedData = response.data.map(item => ({\r\n            fecha: formatDate(item.Marca_tiempo),  // Formateamos fecha para visualización\r\n            dato: `${item.Medicion} lux`,          // Agregamos unidad a la medición\r\n            raw: item                              // Guardamos el objeto original para acceso a datos crudos\r\n          }));\r\n          \r\n          // Actualizar el estado con los datos formateados\r\n          setIlluminationData(formattedData);\r\n        } else {\r\n          // Si no hay datos, establecer un array vacío\r\n          setIlluminationData([]);\r\n        }\r\n\r\n        // Finalizar el estado de carga después de cargar todos los datos\r\n        setLoading(false);\r\n      } catch (err) {\r\n        // Manejar errores de la petición\r\n        console.error(\"Error al cargar datos de iluminación:\", err);\r\n        setError(\"Error al cargar datos de iluminación. Por favor, intente de nuevo más tarde.\");\r\n        setLoading(false);\r\n      }\r\n    };\r\n    \r\n    // Ejecutar la función de carga\r\n    fetchIlluminationData();\r\n  }, []); // Se ejecuta solo al montar el componente\r\n\r\n  \r\n  // ----- EFECTO PARA ACTUALIZAR DATOS SEGÚN CATEGORÍA -----\r\n  useEffect(() => {\r\n    // Seleccionar datos según la categoría\r\n    switch(selectedCategory) {\r\n      case 'Temperatura':\r\n        // Actualizar los datos de la tabla\r\n        setFilteredData(temperatureData);\r\n        \r\n        // Preparar datos para la gráfica\r\n        if (temperatureData.length > 0) {\r\n          // Extraer los datos originales desde los objetos 'raw'\r\n          const rawData = temperatureData.map(item => item.raw);\r\n          \r\n          // Generar datos para la gráfica\r\n          setChartData(prepareChartData(rawData, selectedCategory));\r\n          \r\n          // Actualizar el valor actual (primer registro, el más reciente)\r\n          setCurrentValue(temperatureData[0].dato);\r\n        } else {\r\n          // Si no hay datos, mostrar \"--\" como valor actual\r\n          setCurrentValue(\"--\");\r\n          setChartData(prepareChartData([], selectedCategory));\r\n        }\r\n        break;\r\n        \r\n      case 'Humedad':\r\n        // Actualizar los datos de la tabla\r\n        setFilteredData(humidityData);\r\n        \r\n        // Preparar datos para la gráfica\r\n        if (humidityData.length > 0) {\r\n          // Extraer los datos originales\r\n          const rawData = humidityData.map(item => item.raw);\r\n          \r\n          // Generar datos para la gráfica\r\n          setChartData(prepareChartData(rawData, selectedCategory));\r\n          \r\n          // Actualizar valor actual\r\n          setCurrentValue(humidityData[0].dato);\r\n        } else {\r\n          setCurrentValue(\"--\");\r\n          setChartData(prepareChartData([], selectedCategory));\r\n        }\r\n        break;\r\n        \r\n      case 'Iluminacion UV':\r\n        // Actualizar los datos de la tabla\r\n        setFilteredData(illuminationData);\r\n        \r\n        // Preparar datos para la gráfica\r\n        if (illuminationData.length > 0) {\r\n          // Extraer los datos originales\r\n          const rawData = illuminationData.map(item => item.raw);\r\n          \r\n          // Generar datos para la gráfica\r\n          setChartData(prepareChartData(rawData, selectedCategory));\r\n          \r\n          // Actualizar valor actual\r\n          setCurrentValue(illuminationData[0].dato);\r\n        } else {\r\n          setCurrentValue(\"--\");\r\n          setChartData(prepareChartData([], selectedCategory));\r\n        }\r\n        break;\r\n        \r\n      default:\r\n        break;\r\n    }\r\n    \r\n    // Actualizar opciones de la gráfica según la categoría\r\n    setChartOptions(getChartOptions(selectedCategory));\r\n  }, [selectedCategory, temperatureData, humidityData, illuminationData]); // Se ejecuta cuando cambia la categoría o los datos\r\n\r\n  // Manejador para el cambio de categoría en el selector\r\n  const handleCategoryChange = (event) => {\r\n    setSelectedCategory(event.target.value);\r\n  };\r\n\r\n  // Función para manejar el filtro de búsqueda\r\n  const handleSearchChange = (event) => {\r\n    const query = event.target.value.toLowerCase();\r\n    setSearch(query);\r\n    \r\n    // Obtener el conjunto de datos correspondiente a la categoría seleccionada\r\n    let dataToFilter;\r\n    switch(selectedCategory) {\r\n      case 'Temperatura':\r\n        dataToFilter = temperatureData;\r\n        break;\r\n      case 'Humedad':\r\n        dataToFilter = humidityData;\r\n        break;\r\n      case 'Iluminacion UV':\r\n        dataToFilter = illuminationData;\r\n        break;\r\n      default:\r\n        dataToFilter = [];\r\n    }\r\n    \r\n    // Filtrar los datos según la consulta\r\n    const filtered = dataToFilter.filter(\r\n      (item) => \r\n        item.fecha.toLowerCase().includes(query) || \r\n        item.dato.toLowerCase().includes(query) ||\r\n        (item.zona && item.zona.toLowerCase().includes(query))\r\n    );\r\n    \r\n    setFilteredData(filtered);\r\n  };\r\n\r\n  // Función para descargar la tabla como PDF\r\n  const downloadPDF = () => {\r\n    const doc = new jsPDF();\r\n    let y = 20;\r\n    doc.text(`Tabla de Datos - ${selectedCategory}`, 20, y);\r\n    y += 10;\r\n\r\n    // Escribir los encabezados\r\n    doc.text(\"Fecha\", 20, y);\r\n    doc.text(\"Dato\", 80, y);\r\n    // Agregar columna de zona solo para temperatura\r\n    if (selectedCategory === 'Temperatura') {\r\n      doc.text(\"Zona\", 140, y);\r\n    }\r\n    y += 10;\r\n\r\n    // Escribir los datos de la tabla\r\n    filteredData.forEach(item => {\r\n      doc.text(item.fecha, 20, y);\r\n      doc.text(item.dato, 80, y);\r\n      if (selectedCategory === 'Temperatura' && item.zona) {\r\n        doc.text(item.zona, 140, y);\r\n      }\r\n      y += 10;\r\n      \r\n      // Si llegamos al final de la página, crear una nueva\r\n      if (y > 280) {\r\n        doc.addPage();\r\n        y = 20;\r\n      }\r\n    });\r\n\r\n    // Guardar como PDF\r\n    doc.save(`tabla_${selectedCategory.toLowerCase()}.pdf`);\r\n  };\r\n\r\n  // Renderizar mensaje de carga o error si es necesario\r\n  if (loading) {\r\n    return (\r\n      <>\r\n        <Header showUserIcon={true} />\r\n        <Container>\r\n          <div style={{ textAlign: 'center', padding: '50px' }}>\r\n            Cargando datos...\r\n          </div>\r\n        </Container>\r\n        <Footer />\r\n      </>\r\n    );\r\n  }\r\n\r\n  if (error) {\r\n    return (\r\n      <>\r\n        <Header showUserIcon={true} />\r\n        <Container>\r\n          <div style={{ textAlign: 'center', padding: '50px', color: 'red' }}>\r\n            {error}\r\n          </div>\r\n        </Container>\r\n        <Footer />\r\n      </>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <>\r\n      {/* Cabecera de la aplicación */}\r\n      <Header showUserIcon={true} />\r\n      \r\n      {/* Contenedor principal */}\r\n      <Container>\r\n        {/* Título */}\r\n        <h1 style={{ textAlign: 'center', margin: '10px 0 30px' }}> </h1>\r\n        \r\n        {/* Fila de controles: selector de categoría y botones */}\r\n        <ControlsRow>\r\n          <CategorySelect onChange={handleCategoryChange} value={selectedCategory}>\r\n            {categories.map((category) => (\r\n              <option key={category} value={category}>\r\n                {category}\r\n              </option>\r\n            ))}\r\n          </CategorySelect>\r\n  \r\n          <RightButtonsContainer>\r\n            {/* Botón búsqueda */}\r\n            <input\r\n              type=\"text\"\r\n              placeholder=\"Buscar...\"\r\n              value={search}\r\n              onChange={handleSearchChange}\r\n              style={{\r\n                padding: '8px 10px',\r\n                borderRadius: '5px',\r\n                border: '1px solid #ddd'\r\n              }}\r\n            />\r\n\r\n            <DownloadButton onClick={downloadPDF}>\r\n              <ArrowDown size={24} />\r\n            </DownloadButton>\r\n          </RightButtonsContainer>\r\n        </ControlsRow>\r\n        \r\n        {/* Fila de contenido: tabla y gráfica */}\r\n        <div style={{ display: 'flex', flexDirection: 'row', justifyContent: 'space-between', gap: '30px', width: '100%' }}>\r\n          {/* Panel izquierdo: Tabla de datos históricos */}\r\n          <DataPanel>\r\n            <Table>\r\n              <thead>\r\n                <tr>\r\n                  <Th>Fecha</Th>\r\n                  <Th>Dato</Th>\r\n                  {/* Mostrar columna Zona solo para Temperatura */}\r\n                  {selectedCategory === 'Temperatura' && <Th>Zona</Th>}\r\n                </tr>\r\n              </thead>\r\n              <tbody>\r\n                {filteredData.length > 0 ? (\r\n                  filteredData.map((item, index) => (\r\n                    <tr key={index}>\r\n                      <Td>{item.fecha}</Td>\r\n                      <Td>{item.dato}</Td>\r\n                      {selectedCategory === 'Temperatura' && <Td>{item.zona || '-'}</Td>}\r\n                    </tr>\r\n                  ))\r\n                ) : (\r\n                  <tr>\r\n                    <Td colSpan={selectedCategory === 'Temperatura' ? 3 : 2} style={{textAlign: 'center'}}>\r\n                      No hay datos disponibles\r\n                    </Td>\r\n                  </tr>\r\n                )}\r\n              </tbody>\r\n            </Table>\r\n          </DataPanel>\r\n          \r\n          {/* Panel derecho: Gráfica y valor actual */}\r\n          <DataPanel>\r\n            <ChartContainer>\r\n              {/* Título de la gráfica (categoría seleccionada) */}\r\n              <ChartTitleContainer>\r\n                <ChartTitle>{selectedCategory}</ChartTitle>\r\n              </ChartTitleContainer>\r\n              \r\n              {/* Valor actual */}\r\n              <CurrentValue>{currentValue}</CurrentValue>\r\n              \r\n              {/* Contenedor para la gráfica con espacio suficiente para ejes y etiquetas */}\r\n              <div style={{ height: '250px', width: '100%', flexGrow: 1 }}>\r\n                {chartData && <Line data={chartData} options={chartOptions} />}\r\n              </div>\r\n            </ChartContainer>\r\n          </DataPanel>\r\n        </div>\r\n      </Container>\r\n      \r\n      {/* Pie de página */}\r\n      <Footer />\r\n    </>\r\n  );\r\n}\r\n\r\nexport default Historial;"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,OAAOC,MAAM,MAAM,sBAAsB;AACzC,OAAOC,MAAM,MAAM,sBAAsB;AACzC,SAASC,IAAI,QAAQ,iBAAiB;AACtC,OAAOC,MAAM,MAAM,mBAAmB;AACtC,SAASC,WAAW,QAAQ,kBAAkB;AAC9C,SAASC,SAAS,QAAQ,cAAc;AACxC,SAASC,KAAK,QAAQ,OAAO;AAC7B;AACA,OAAOC,KAAK,MAAM,OAAO;;AAEzB;AAAA,SAAAC,MAAA,IAAAC,OAAA,EAAAC,QAAA,IAAAC,SAAA;AACA,MAAMC,SAAS,GAAGT,MAAM,CAACU,GAAG;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;;AAED;AAAAC,EAAA,GAbMF,SAAS;AAcf,MAAMG,MAAM,GAAGZ,MAAM,CAACU,GAAG;AACzB;AACA;AACA;AACA,CAAC;AAED,MAAMG,GAAG,GAAGb,MAAM,CAACU,GAAG;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AAED,MAAMI,WAAW,GAAGd,MAAM,CAACa,GAAG,CAAC;AAC/B;AACA;AACA;AACA;AACA,CAAC;AAACE,GAAA,GALID,WAAW;AAOjB,MAAME,UAAU,GAAGhB,MAAM,CAACa,GAAG,CAAC;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AAED,MAAMI,cAAc,GAAGjB,MAAM,CAACkB,MAAM;AACpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AAACC,GAAA,GAjBIF,cAAc;AAmBpB,MAAMG,qBAAqB,GAAGpB,MAAM,CAACU,GAAG;AACxC;AACA;AACA,CAAC;AAACW,GAAA,GAHID,qBAAqB;AAK3B,MAAME,YAAY,GAAGtB,MAAM,CAACuB,MAAM;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AAED,MAAMC,cAAc,GAAGxB,MAAM,CAACuB,MAAM;AACpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AAACE,GAAA,GAbID,cAAc;AAepB,MAAME,SAAS,GAAG1B,MAAM,CAACU,GAAG;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AAACiB,GAAA,GAnBID,SAAS;AAqBf,MAAME,KAAK,GAAG5B,MAAM,CAAC6B,KAAK;AAC1B;AACA;AACA;AACA;AACA;AACA,CAAC;AAACC,GAAA,GANIF,KAAK;AAQX,MAAMG,EAAE,GAAG/B,MAAM,CAACgC,EAAE;AACpB;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AAACC,GAAA,GAPIF,EAAE;AASR,MAAMG,EAAE,GAAGlC,MAAM,CAACmC,EAAE;AACpB;AACA;AACA;AACA;AACA,CAAC;AAACC,GAAA,GALIF,EAAE;AAOR,MAAMG,cAAc,GAAGrC,MAAM,CAACU,GAAG;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AAAC4B,IAAA,GAVID,cAAc;AAYpB,MAAME,YAAY,GAAGvC,MAAM,CAACU,GAAG;AAC/B;AACA;AACA;AACA;AACA,CAAC;AAAC8B,IAAA,GALID,YAAY;AAOlB,MAAME,UAAU,GAAGzC,MAAM,CAAC0C,EAAE;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AAACC,IAAA,GATIF,UAAU;AAWhB,MAAMG,mBAAmB,GAAG5C,MAAM,CAACU,GAAG;AACtC;AACA;AACA,CAAC;AAACmC,IAAA,GAHID,mBAAmB;AAKzB,MAAME,KAAK,GAAG9C,MAAM,CAAC+C,EAAE;AACvB;AACA;AACA;AACA;AACA,CAAC;;AAED;AACA,MAAMC,UAAU,GAAG,CAAC,aAAa,EAAE,gBAAgB,EAAE,SAAS,CAAC;;AAE/D;AACA;AACA;AACA;AACA;AACA,MAAMC,UAAU,GAAIC,cAAc,IAAK;EACrC;EACA,MAAMC,IAA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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}