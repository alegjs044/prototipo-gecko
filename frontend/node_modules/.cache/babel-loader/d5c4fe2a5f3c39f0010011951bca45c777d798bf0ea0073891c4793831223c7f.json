{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Roger\\\\Documents\\\\TT2_AVANCES\\\\prototipo-gecko\\\\frontend\\\\src\\\\pages\\\\pruebasNotificaciones.jsx\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport { useState, useEffect } from 'react';\n// Importamos axios para hacer peticiones HTTP a nuestra API\nimport axios from \"axios\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst TemperaturaAlert = ({\n  temperatura,\n  setTemperatura\n}) => {\n  _s();\n  // Estado para el valor del input separado del valor actual de temperatura\n  const [inputValue, setInputValue] = useState(temperatura.toString());\n  const [lastAlertValue, setLastAlertValue] = useState(null);\n  const [alertStatus, setAlertStatus] = useState('');\n  const [cooldown, setCooldown] = useState(false);\n  const enviar_temperatura_alert = async temp => {\n    setAlertStatus('Enviando alerta...');\n    try {\n      // Asegurar que la temperatura se envía como string con 2 decimales\n      const temperaturaFormateada = temp.toFixed(2);\n      console.log(\"Enviando temperatura formateada:\", temperaturaFormateada);\n      const response = await fetch(\"http://localhost:5000/send-email\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n          temperatura: parseFloat(temperaturaFormateada) // Convertir a número de nuevo\n        })\n      });\n      const data = await response.json();\n      if (response.ok) {\n        console.log(\"Alerta enviada con éxito:\", data.message);\n        setAlertStatus('Alerta enviada con éxito');\n\n        // Guardamos el valor actual como el último valor de alerta\n        setLastAlertValue(temp);\n\n        // Establecemos un tiempo de espera para evitar el spam de alertas\n        setCooldown(true);\n        setTimeout(() => {\n          setCooldown(false);\n        }, 10000); // 10 segundos de cooldown\n      } else {\n        console.error(\"Error en la respuesta del servidor:\", data.message);\n        setAlertStatus(`Error: ${data.message}`);\n      }\n    } catch (error) {\n      console.error(\"Error al enviar la alerta:\", error);\n      setAlertStatus(`Error de conexión: ${error.message}`);\n    }\n  };\n\n  // Este manejador solo actualiza el input, no el valor de temperatura real\n  const handleInputChange = e => {\n    setInputValue(e.target.value);\n  };\n\n  // Función para actualizar la temperatura cuando se presiona el botón\n  const handleUpdateTemperature = () => {\n    const newTemperatura = parseFloat(inputValue);\n\n    // Verificar que es un número válido\n    if (!isNaN(newTemperatura)) {\n      setTemperatura(newTemperatura);\n    } else {\n      setAlertStatus('Por favor ingrese un número válido');\n      setTimeout(() => setAlertStatus(''), 3000);\n    }\n  };\n\n  //INSERT PARA LA BD (post)\n\n  const enviarTemperatura = async (ID_usuario, temperatura, Zona, Marca_tiempo) => {\n    try {\n      const response = await axios.post('http://localhost:5000/api/addtemperatura', {\n        ID_usuario: ID_usuario,\n        // Reemplázalo con el ID real\n        Medicion: temperatura,\n        // Valor de la medición\n        Zona: Zona,\n        // Zona donde se tomó la medición\n        Marca_tiempo: Marca_tiempo // Marca de tiempo en formato ISO\n      }, {\n        headers: {\n          \"Content-Type\": \"application/json\"\n        } // Configuración de los headers\n      });\n      console.log('Respuesta del servidor:', response.data);\n    } catch (error) {\n      console.error('Error al enviar la temperatura:', error.message);\n    }\n  };\n  useEffect(() => {\n    enviarTemperatura(3, temperatura, 'FRIA', new Date().toISOString());\n\n    // Solo enviar alerta si la temperatura es válida (no NaN)\n    if (isNaN(temperatura)) return;\n\n    // Verificamos si está fuera del rango permitido\n    const fueraDeRango = temperatura < 22 || temperatura > 32;\n    if (fueraDeRango) {\n      // Verificamos si debemos enviar una nueva alerta\n      const debeEnviarAlerta =\n      // No hay una alerta previa\n      lastAlertValue === null ||\n      // La temperatura ha cambiado significativamente (más de 1 grado)\n      Math.abs(temperatura - lastAlertValue) >= 1 ||\n      // La temperatura cruzó el umbral (de caliente a frío o viceversa)\n      lastAlertValue > 32 && temperatura < 22 || lastAlertValue < 22 && temperatura > 32;\n\n      // Solo enviamos si debemos y no estamos en cooldown\n      if (debeEnviarAlerta && !cooldown) {\n        console.log(\"Enviando alerta por temperatura:\", temperatura);\n        enviar_temperatura_alert(temperatura);\n      }\n    } else {\n      // Si volvió al rango normal, reiniciamos para que la próxima vez envíe alerta\n      if (lastAlertValue !== null) {\n        setLastAlertValue(null);\n        setAlertStatus('Temperatura normalizada');\n\n        // Después de 3 segundos, limpiamos el mensaje\n        setTimeout(() => {\n          if (temperatura >= 22 && temperatura <= 32) {\n            setAlertStatus('');\n          }\n        }, 3000);\n      }\n    }\n  }, [temperatura, lastAlertValue, cooldown]);\n\n  // Actualizar el input cuando cambia la temperatura externa\n  useEffect(() => {\n    setInputValue(temperatura.toString());\n  }, [temperatura]);\n\n  // Determinar el estilo basado en el rango de temperatura\n  const getTemperatureStyle = () => {\n    if (temperatura > 32) return {\n      color: 'red',\n      fontWeight: 'bold'\n    };\n    if (temperatura < 22) return {\n      color: 'blue',\n      fontWeight: 'bold'\n    };\n    return {\n      color: 'green'\n    };\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"PruebasNotificaciones\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Monitoreo De Temperatura\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 151,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        display: 'flex',\n        alignItems: 'center',\n        gap: '10px',\n        marginBottom: '15px'\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"temperatura\",\n        children: \"Temperatura (\\xB0C): \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 153,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        id: \"temperatura\",\n        type: \"number\",\n        value: inputValue,\n        onChange: handleInputChange,\n        step: \"0.1\",\n        style: {\n          width: '80px'\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 154,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleUpdateTemperature,\n        style: {\n          padding: '5px 15px',\n          backgroundColor: '#4CAF50',\n          color: 'white',\n          border: 'none',\n          borderRadius: '4px',\n          cursor: 'pointer'\n        },\n        children: \"Actualizar\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 162,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 152,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Temperatura actual: \", /*#__PURE__*/_jsxDEV(\"span\", {\n        style: getTemperatureStyle(),\n        children: [temperatura.toFixed(2), \"\\xB0C\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 177,\n        columnNumber: 30\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 177,\n      columnNumber: 7\n    }, this), temperatura < 22 && /*#__PURE__*/_jsxDEV(\"p\", {\n      style: {\n        color: 'blue'\n      },\n      children: \"\\u26A0\\uFE0F Temperatura por debajo del rango normal (22\\xB0C - 32\\xB0C)\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 180,\n      columnNumber: 9\n    }, this), temperatura > 32 && /*#__PURE__*/_jsxDEV(\"p\", {\n      style: {\n        color: 'red'\n      },\n      children: \"\\u26A0\\uFE0F Temperatura por encima del rango normal (22\\xB0C - 32\\xB0C)\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 185,\n      columnNumber: 9\n    }, this), cooldown && /*#__PURE__*/_jsxDEV(\"p\", {\n      style: {\n        color: 'gray'\n      },\n      children: \"\\u23F1\\uFE0F Esperando para enviar la siguiente alerta...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 191,\n      columnNumber: 9\n    }, this), alertStatus && /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"alert-status\",\n      children: alertStatus\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 196,\n      columnNumber: 23\n    }, this), lastAlertValue !== null && /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        marginTop: '10px',\n        fontSize: '0.9em',\n        color: '#555'\n      },\n      children: [\"\\xDAltima alerta enviada: \", lastAlertValue.toFixed(2), \"\\xB0C\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 199,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 150,\n    columnNumber: 5\n  }, this);\n};\n_s(TemperaturaAlert, \"I/uslIiysgS1kJ7pMV9ImoXmBao=\");\n_c = TemperaturaAlert;\nfunction PruebasNotificaciones() {\n  _s2();\n  const [temperatura, setTemperatura] = useState(25); // Valor inicial dentro del rango normal\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(TemperaturaAlert, {\n      temperatura: temperatura,\n      setTemperatura: setTemperatura\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 212,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 211,\n    columnNumber: 5\n  }, this);\n}\n_s2(PruebasNotificaciones, \"BSLE6W81eo5m/C7rYFlDzZ5wRTU=\");\n_c2 = PruebasNotificaciones;\nexport default PruebasNotificaciones;\nvar _c, _c2;\n$RefreshReg$(_c, \"TemperaturaAlert\");\n$RefreshReg$(_c2, \"PruebasNotificaciones\");","map":{"version":3,"names":["useState","useEffect","axios","jsxDEV","_jsxDEV","TemperaturaAlert","temperatura","setTemperatura","_s","inputValue","setInputValue","toString","lastAlertValue","setLastAlertValue","alertStatus","setAlertStatus","cooldown","setCooldown","enviar_temperatura_alert","temp","temperaturaFormateada","toFixed","console","log","response","fetch","method","headers","body","JSON","stringify","parseFloat","data","json","ok","message","setTimeout","error","handleInputChange","e","target","value","handleUpdateTemperature","newTemperatura","isNaN","enviarTemperatura","ID_usuario","Zona","Marca_tiempo","post","Medicion","Date","toISOString","fueraDeRango","debeEnviarAlerta","Math","abs","getTemperatureStyle","color","fontWeight","className","children","fileName","_jsxFileName","lineNumber","columnNumber","style","display","alignItems","gap","marginBottom","htmlFor","id","type","onChange","step","width","onClick","padding","backgroundColor","border","borderRadius","cursor","marginTop","fontSize","_c","PruebasNotificaciones","_s2","_c2","$RefreshReg$"],"sources":["C:/Users/Roger/Documents/TT2_AVANCES/prototipo-gecko/frontend/src/pages/pruebasNotificaciones.jsx"],"sourcesContent":["import { useState, useEffect } from 'react';\r\n// Importamos axios para hacer peticiones HTTP a nuestra API\r\nimport axios from \"axios\";\r\n\r\nconst TemperaturaAlert = ({ temperatura, setTemperatura }) => {\r\n  // Estado para el valor del input separado del valor actual de temperatura\r\n  const [inputValue, setInputValue] = useState(temperatura.toString());\r\n  const [lastAlertValue, setLastAlertValue] = useState(null);\r\n  const [alertStatus, setAlertStatus] = useState('');\r\n  const [cooldown, setCooldown] = useState(false);\r\n  \r\n  const enviar_temperatura_alert = async (temp) => {\r\n    setAlertStatus('Enviando alerta...');\r\n    try {\r\n      // Asegurar que la temperatura se envía como string con 2 decimales\r\n      const temperaturaFormateada = temp.toFixed(2);\r\n      \r\n      console.log(\"Enviando temperatura formateada:\", temperaturaFormateada);\r\n      \r\n      const response = await fetch(\"http://localhost:5000/send-email\", {\r\n        method: \"POST\",\r\n        headers: { \"Content-Type\": \"application/json\" },\r\n        body: JSON.stringify({ \r\n          temperatura: parseFloat(temperaturaFormateada) // Convertir a número de nuevo\r\n        }),\r\n      });\r\n      \r\n      const data = await response.json();\r\n      \r\n      if (response.ok) {\r\n        console.log(\"Alerta enviada con éxito:\", data.message);\r\n        setAlertStatus('Alerta enviada con éxito');\r\n        \r\n        // Guardamos el valor actual como el último valor de alerta\r\n        setLastAlertValue(temp);\r\n        \r\n        // Establecemos un tiempo de espera para evitar el spam de alertas\r\n        setCooldown(true);\r\n        setTimeout(() => {\r\n          setCooldown(false);\r\n        }, 10000); // 10 segundos de cooldown\r\n        \r\n      } else {\r\n        console.error(\"Error en la respuesta del servidor:\", data.message);\r\n        setAlertStatus(`Error: ${data.message}`);\r\n      }\r\n    } catch (error) {\r\n      console.error(\"Error al enviar la alerta:\", error);\r\n      setAlertStatus(`Error de conexión: ${error.message}`);\r\n    }\r\n  };\r\n  \r\n  // Este manejador solo actualiza el input, no el valor de temperatura real\r\n  const handleInputChange = (e) => {\r\n    setInputValue(e.target.value);\r\n  };\r\n  \r\n  // Función para actualizar la temperatura cuando se presiona el botón\r\n  const handleUpdateTemperature = () => {\r\n    const newTemperatura = parseFloat(inputValue);\r\n    \r\n    // Verificar que es un número válido\r\n    if (!isNaN(newTemperatura)) {\r\n      setTemperatura(newTemperatura);\r\n    } else {\r\n      setAlertStatus('Por favor ingrese un número válido');\r\n      setTimeout(() => setAlertStatus(''), 3000);\r\n    }\r\n  };\r\n\r\n  //INSERT PARA LA BD (post)\r\n\r\n  const enviarTemperatura = async (ID_usuario, temperatura, Zona, Marca_tiempo) => {\r\n    try {\r\n      const response = await axios.post(\r\n        'http://localhost:5000/api/addtemperatura', \r\n        {\r\n          ID_usuario: ID_usuario,       // Reemplázalo con el ID real\r\n          Medicion: temperatura,        // Valor de la medición\r\n          Zona: Zona,                   // Zona donde se tomó la medición\r\n          Marca_tiempo: Marca_tiempo    // Marca de tiempo en formato ISO\r\n        },\r\n        {\r\n          headers: { \"Content-Type\": \"application/json\" }  // Configuración de los headers\r\n        }\r\n      );\r\n  \r\n      console.log('Respuesta del servidor:', response.data);\r\n    } catch (error) {\r\n      console.error('Error al enviar la temperatura:', error.message);\r\n    }\r\n  };\r\n  \r\n  useEffect(() => {\r\n\r\n\r\n    enviarTemperatura(3,temperatura,'FRIA',new Date().toISOString());\r\n\r\n    // Solo enviar alerta si la temperatura es válida (no NaN)\r\n    if (isNaN(temperatura)) return;\r\n    \r\n    // Verificamos si está fuera del rango permitido\r\n    const fueraDeRango = temperatura < 22 || temperatura > 32;\r\n    \r\n    if (fueraDeRango) {\r\n      // Verificamos si debemos enviar una nueva alerta\r\n      const debeEnviarAlerta = \r\n        // No hay una alerta previa\r\n        lastAlertValue === null || \r\n        // La temperatura ha cambiado significativamente (más de 1 grado)\r\n        Math.abs(temperatura - lastAlertValue) >= 1 || \r\n        // La temperatura cruzó el umbral (de caliente a frío o viceversa)\r\n        (lastAlertValue > 32 && temperatura < 22) || \r\n        (lastAlertValue < 22 && temperatura > 32);\r\n      \r\n      // Solo enviamos si debemos y no estamos en cooldown\r\n      if (debeEnviarAlerta && !cooldown) {\r\n        console.log(\"Enviando alerta por temperatura:\", temperatura);\r\n        enviar_temperatura_alert(temperatura);\r\n      }\r\n    } else {\r\n      // Si volvió al rango normal, reiniciamos para que la próxima vez envíe alerta\r\n      if (lastAlertValue !== null) {\r\n        setLastAlertValue(null);\r\n        setAlertStatus('Temperatura normalizada');\r\n        \r\n        // Después de 3 segundos, limpiamos el mensaje\r\n        setTimeout(() => {\r\n          if (temperatura >= 22 && temperatura <= 32) {\r\n            setAlertStatus('');\r\n          }\r\n        }, 3000);\r\n      }\r\n    }\r\n  }, [temperatura, lastAlertValue, cooldown]);\r\n  \r\n  // Actualizar el input cuando cambia la temperatura externa\r\n  useEffect(() => {\r\n    setInputValue(temperatura.toString());\r\n  }, [temperatura]);\r\n  \r\n  // Determinar el estilo basado en el rango de temperatura\r\n  const getTemperatureStyle = () => {\r\n    if (temperatura > 32) return { color: 'red', fontWeight: 'bold' };\r\n    if (temperatura < 22) return { color: 'blue', fontWeight: 'bold' };\r\n    return { color: 'green' };\r\n  };\r\n  \r\n  return (\r\n    <div className=\"PruebasNotificaciones\">\r\n      <h2>Monitoreo De Temperatura</h2>\r\n      <div style={{ display: 'flex', alignItems: 'center', gap: '10px', marginBottom: '15px' }}>\r\n        <label htmlFor=\"temperatura\">Temperatura (°C): </label>\r\n        <input \r\n          id=\"temperatura\"\r\n          type=\"number\" \r\n          value={inputValue} \r\n          onChange={handleInputChange} \r\n          step=\"0.1\"\r\n          style={{ width: '80px' }}\r\n        />\r\n        <button \r\n          onClick={handleUpdateTemperature}\r\n          style={{\r\n            padding: '5px 15px',\r\n            backgroundColor: '#4CAF50',\r\n            color: 'white',\r\n            border: 'none',\r\n            borderRadius: '4px',\r\n            cursor: 'pointer'\r\n          }}\r\n        >\r\n          Actualizar\r\n        </button>\r\n      </div>\r\n      \r\n      <p>Temperatura actual: <span style={getTemperatureStyle()}>{temperatura.toFixed(2)}°C</span></p>\r\n      \r\n      {temperatura < 22 && \r\n        <p style={{color: 'blue'}}>\r\n          ⚠️ Temperatura por debajo del rango normal (22°C - 32°C)\r\n        </p>\r\n      }\r\n      {temperatura > 32 && \r\n        <p style={{color: 'red'}}>\r\n          ⚠️ Temperatura por encima del rango normal (22°C - 32°C)\r\n        </p>\r\n      }\r\n      \r\n      {cooldown && \r\n        <p style={{color: 'gray'}}>\r\n          ⏱️ Esperando para enviar la siguiente alerta...\r\n        </p>\r\n      }\r\n      \r\n      {alertStatus && <p className=\"alert-status\">{alertStatus}</p>}\r\n      \r\n      {lastAlertValue !== null && (\r\n        <div style={{marginTop: '10px', fontSize: '0.9em', color: '#555'}}>\r\n          Última alerta enviada: {lastAlertValue.toFixed(2)}°C\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nfunction PruebasNotificaciones() {\r\n  const [temperatura, setTemperatura] = useState(25); // Valor inicial dentro del rango normal\r\n  \r\n  return (\r\n    <div>\r\n      <TemperaturaAlert temperatura={temperatura} setTemperatura={setTemperatura} />\r\n    </div>\r\n  );\r\n}\r\n\r\n\r\nexport default PruebasNotificaciones;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}