{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Roger\\\\Documents\\\\TT2_AVANCES\\\\prototipo-gecko\\\\frontend\\\\src\\\\pages\\\\TemperatureContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useState, useContext } from 'react';\n\n// Crear el contexto\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst TemperatureContext = /*#__PURE__*/createContext();\n\n// Proveedor del contexto que contiene el estado compartido\nexport const TemperatureProvider = ({\n  children\n}) => {\n  _s();\n  const [temperatura, setTemperatura] = useState(25);\n\n  // Función para obtener la temperatura (similar al getTemperature del componente de clase)\n  const getTemperature = () => temperatura;\n  const value = {\n    temperatura,\n    setTemperatura,\n    getTemperature\n  };\n  return /*#__PURE__*/_jsxDEV(TemperatureContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 20,\n    columnNumber: 5\n  }, this);\n};\n\n// Hook personalizado para acceder al contexto\n_s(TemperatureProvider, \"BSLE6W81eo5m/C7rYFlDzZ5wRTU=\");\n_c = TemperatureProvider;\nexport const useTemperature = () => {\n  _s2();\n  const context = useContext(TemperatureContext);\n  if (context === undefined) {\n    throw new Error('useTemperature debe usarse dentro de un TemperatureProvider');\n  }\n  return context;\n};\n_s2(useTemperature, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nvar _c;\n$RefreshReg$(_c, \"TemperatureProvider\");","map":{"version":3,"names":["React","createContext","useState","useContext","jsxDEV","_jsxDEV","TemperatureContext","TemperatureProvider","children","_s","temperatura","setTemperatura","getTemperature","value","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","useTemperature","_s2","context","undefined","Error","$RefreshReg$"],"sources":["C:/Users/Roger/Documents/TT2_AVANCES/prototipo-gecko/frontend/src/pages/TemperatureContext.js"],"sourcesContent":["import React, { createContext, useState, useContext } from 'react';\r\n\r\n// Crear el contexto\r\nconst TemperatureContext = createContext();\r\n\r\n// Proveedor del contexto que contiene el estado compartido\r\nexport const TemperatureProvider = ({ children }) => {\r\n  const [temperatura, setTemperatura] = useState(25);\r\n\r\n  // Función para obtener la temperatura (similar al getTemperature del componente de clase)\r\n  const getTemperature = () => temperatura;\r\n\r\n  const value = {\r\n    temperatura,\r\n    setTemperatura,\r\n    getTemperature\r\n  };\r\n\r\n  return (\r\n    <TemperatureContext.Provider value={value}>\r\n      {children}\r\n    </TemperatureContext.Provider>\r\n  );\r\n};\r\n\r\n// Hook personalizado para acceder al contexto\r\nexport const useTemperature = () => {\r\n  const context = useContext(TemperatureContext);\r\n  if (context === undefined) {\r\n    throw new Error('useTemperature debe usarse dentro de un TemperatureProvider');\r\n  }\r\n  return context;\r\n};"],"mappings":";;;AAAA,OAAOA,KAAK,IAAIC,aAAa,EAAEC,QAAQ,EAAEC,UAAU,QAAQ,OAAO;;AAElE;AAAA,SAAAC,MAAA,IAAAC,OAAA;AACA,MAAMC,kBAAkB,gBAAGL,aAAa,CAAC,CAAC;;AAE1C;AACA,OAAO,MAAMM,mBAAmB,GAAGA,CAAC;EAAEC;AAAS,CAAC,KAAK;EAAAC,EAAA;EACnD,MAAM,CAACC,WAAW,EAAEC,cAAc,CAAC,GAAGT,QAAQ,CAAC,EAAE,CAAC;;EAElD;EACA,MAAMU,cAAc,GAAGA,CAAA,KAAMF,WAAW;EAExC,MAAMG,KAAK,GAAG;IACZH,WAAW;IACXC,cAAc;IACdC;EACF,CAAC;EAED,oBACEP,OAAA,CAACC,kBAAkB,CAACQ,QAAQ;IAACD,KAAK,EAAEA,KAAM;IAAAL,QAAA,EACvCA;EAAQ;IAAAO,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACkB,CAAC;AAElC,CAAC;;AAED;AAAAT,EAAA,CAnBaF,mBAAmB;AAAAY,EAAA,GAAnBZ,mBAAmB;AAoBhC,OAAO,MAAMa,cAAc,GAAGA,CAAA,KAAM;EAAAC,GAAA;EAClC,MAAMC,OAAO,GAAGnB,UAAU,CAACG,kBAAkB,CAAC;EAC9C,IAAIgB,OAAO,KAAKC,SAAS,EAAE;IACzB,MAAM,IAAIC,KAAK,CAAC,6DAA6D,CAAC;EAChF;EACA,OAAOF,OAAO;AAChB,CAAC;AAACD,GAAA,CANWD,cAAc;AAAA,IAAAD,EAAA;AAAAM,YAAA,CAAAN,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}