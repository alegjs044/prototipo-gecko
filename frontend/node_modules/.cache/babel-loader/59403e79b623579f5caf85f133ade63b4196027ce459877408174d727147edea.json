{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState, useEffect } from 'react';\nimport jwt_decode from 'jwt-decode';\nimport jwt from 'jsonwebtoken';\n\n// Puedes modificar esto con la clave secreta que uses para la autenticación\nconst SECRET_KEY = 'your-secret-key';\nconst useAuth = () => {\n  _s();\n  const [userToken, setUserToken] = useState(null);\n  const [decodedToken, setDecodedToken] = useState(null);\n\n  // Al montar el hook, intenta obtener el token del localStorage o el contexto de sesión\n  useEffect(() => {\n    const token = localStorage.getItem('authToken');\n    if (token) {\n      setUserToken(token);\n      setDecodedToken(jwt_decode(token)); // Decodificar el token al cargarlo\n    }\n  }, []);\n\n  // Genera un nuevo token y lo guarda en el localStorage\n  const generateToken = userData => {\n    const token = jwt.sign(userData, SECRET_KEY, {\n      expiresIn: '1h'\n    }); // Expiración de 1 hora\n    localStorage.setItem('authToken', token);\n    setUserToken(token);\n    setDecodedToken(jwt_decode(token));\n  };\n\n  // Eliminar el token del localStorage y el estado\n  const logout = () => {\n    localStorage.removeItem('authToken');\n    setUserToken(null);\n    setDecodedToken(null);\n  };\n\n  // Decodificar un token si se pasa como argumento\n  const decodeToken = token => {\n    try {\n      return jwt_decode(token);\n    } catch (error) {\n      console.error('Error al decodificar el token:', error);\n      return null;\n    }\n  };\n\n  // Verificar si el token es válido y no ha expirado\n  const isValidToken = token => {\n    try {\n      const decoded = jwt_decode(token);\n      // Comprobamos si el token no ha expirado\n      return decoded.exp * 1000 > Date.now();\n    } catch (error) {\n      return false;\n    }\n  };\n  return {\n    userToken,\n    decodedToken,\n    generateToken,\n    logout,\n    decodeToken,\n    isValidToken\n  };\n};\n_s(useAuth, \"CO+2/aK0WMCfFtwK4kHh0AmPibM=\");\nexport default useAuth;","map":{"version":3,"names":["useState","useEffect","jwt_decode","jwt","SECRET_KEY","useAuth","_s","userToken","setUserToken","decodedToken","setDecodedToken","token","localStorage","getItem","generateToken","userData","sign","expiresIn","setItem","logout","removeItem","decodeToken","error","console","isValidToken","decoded","exp","Date","now"],"sources":["C:/Users/Roger/Documents/TT2_AVANCES/prototipo-gecko/frontend/src/hooks/UseAuth.js"],"sourcesContent":["import { useState, useEffect } from 'react';\r\nimport jwt_decode from 'jwt-decode';\r\nimport jwt from 'jsonwebtoken';\r\n\r\n// Puedes modificar esto con la clave secreta que uses para la autenticación\r\nconst SECRET_KEY = 'your-secret-key';\r\n\r\nconst useAuth = () => {\r\n  const [userToken, setUserToken] = useState(null);\r\n  const [decodedToken, setDecodedToken] = useState(null);\r\n\r\n  // Al montar el hook, intenta obtener el token del localStorage o el contexto de sesión\r\n  useEffect(() => {\r\n    const token = localStorage.getItem('authToken');\r\n    if (token) {\r\n      setUserToken(token);\r\n      setDecodedToken(jwt_decode(token)); // Decodificar el token al cargarlo\r\n    }\r\n  }, []);\r\n\r\n  // Genera un nuevo token y lo guarda en el localStorage\r\n  const generateToken = (userData) => {\r\n    const token = jwt.sign(userData, SECRET_KEY, { expiresIn: '1h' }); // Expiración de 1 hora\r\n    localStorage.setItem('authToken', token);\r\n    setUserToken(token);\r\n    setDecodedToken(jwt_decode(token));\r\n  };\r\n\r\n  // Eliminar el token del localStorage y el estado\r\n  const logout = () => {\r\n    localStorage.removeItem('authToken');\r\n    setUserToken(null);\r\n    setDecodedToken(null);\r\n  };\r\n\r\n  // Decodificar un token si se pasa como argumento\r\n  const decodeToken = (token) => {\r\n    try {\r\n      return jwt_decode(token);\r\n    } catch (error) {\r\n      console.error('Error al decodificar el token:', error);\r\n      return null;\r\n    }\r\n  };\r\n\r\n  // Verificar si el token es válido y no ha expirado\r\n  const isValidToken = (token) => {\r\n    try {\r\n      const decoded = jwt_decode(token);\r\n      // Comprobamos si el token no ha expirado\r\n      return decoded.exp * 1000 > Date.now();\r\n    } catch (error) {\r\n      return false;\r\n    }\r\n  };\r\n\r\n  return {\r\n    userToken,\r\n    decodedToken,\r\n    generateToken,\r\n    logout,\r\n    decodeToken,\r\n    isValidToken,\r\n  };\r\n};\r\n\r\nexport default useAuth;"],"mappings":";AAAA,SAASA,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAC3C,OAAOC,UAAU,MAAM,YAAY;AACnC,OAAOC,GAAG,MAAM,cAAc;;AAE9B;AACA,MAAMC,UAAU,GAAG,iBAAiB;AAEpC,MAAMC,OAAO,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACpB,MAAM,CAACC,SAAS,EAAEC,YAAY,CAAC,GAAGR,QAAQ,CAAC,IAAI,CAAC;EAChD,MAAM,CAACS,YAAY,EAAEC,eAAe,CAAC,GAAGV,QAAQ,CAAC,IAAI,CAAC;;EAEtD;EACAC,SAAS,CAAC,MAAM;IACd,MAAMU,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,WAAW,CAAC;IAC/C,IAAIF,KAAK,EAAE;MACTH,YAAY,CAACG,KAAK,CAAC;MACnBD,eAAe,CAACR,UAAU,CAACS,KAAK,CAAC,CAAC,CAAC,CAAC;IACtC;EACF,CAAC,EAAE,EAAE,CAAC;;EAEN;EACA,MAAMG,aAAa,GAAIC,QAAQ,IAAK;IAClC,MAAMJ,KAAK,GAAGR,GAAG,CAACa,IAAI,CAACD,QAAQ,EAAEX,UAAU,EAAE;MAAEa,SAAS,EAAE;IAAK,CAAC,CAAC,CAAC,CAAC;IACnEL,YAAY,CAACM,OAAO,CAAC,WAAW,EAAEP,KAAK,CAAC;IACxCH,YAAY,CAACG,KAAK,CAAC;IACnBD,eAAe,CAACR,UAAU,CAACS,KAAK,CAAC,CAAC;EACpC,CAAC;;EAED;EACA,MAAMQ,MAAM,GAAGA,CAAA,KAAM;IACnBP,YAAY,CAACQ,UAAU,CAAC,WAAW,CAAC;IACpCZ,YAAY,CAAC,IAAI,CAAC;IAClBE,eAAe,CAAC,IAAI,CAAC;EACvB,CAAC;;EAED;EACA,MAAMW,WAAW,GAAIV,KAAK,IAAK;IAC7B,IAAI;MACF,OAAOT,UAAU,CAACS,KAAK,CAAC;IAC1B,CAAC,CAAC,OAAOW,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,gCAAgC,EAAEA,KAAK,CAAC;MACtD,OAAO,IAAI;IACb;EACF,CAAC;;EAED;EACA,MAAME,YAAY,GAAIb,KAAK,IAAK;IAC9B,IAAI;MACF,MAAMc,OAAO,GAAGvB,UAAU,CAACS,KAAK,CAAC;MACjC;MACA,OAAOc,OAAO,CAACC,GAAG,GAAG,IAAI,GAAGC,IAAI,CAACC,GAAG,CAAC,CAAC;IACxC,CAAC,CAAC,OAAON,KAAK,EAAE;MACd,OAAO,KAAK;IACd;EACF,CAAC;EAED,OAAO;IACLf,SAAS;IACTE,YAAY;IACZK,aAAa;IACbK,MAAM;IACNE,WAAW;IACXG;EACF,CAAC;AACH,CAAC;AAAClB,EAAA,CAzDID,OAAO;AA2Db,eAAeA,OAAO","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}