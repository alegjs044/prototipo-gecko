{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Roger\\\\Documents\\\\TT2_AVANCES\\\\prototipo-gecko\\\\frontend\\\\src\\\\pages\\\\pruebasNotificaciones.jsx\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport { useState, useEffect } from 'react';\n// Importamos axios para hacer peticiones HTTP a nuestra API\nimport axios from \"axios\";\nimport { jwtDecode } from \"jwt-decode\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst TemperaturaAlert = ({\n  temperatura,\n  setTemperatura\n}) => {\n  _s();\n  // Estado para el valor del input separado del valor actual de temperatura\n  const [inputValue, setInputValue] = useState(temperatura.toString());\n  const [lastAlertValue, setLastAlertValue] = useState(null);\n  const [alertStatus, setAlertStatus] = useState('');\n  const [cooldown, setCooldown] = useState(false);\n  const token = localStorage.getItem(\"token\");\n  let ID_usuario = '';\n  if (token) {\n    const decoded = jwtDecode(token); // Necesitas la librería jwt-decode\n    ID_usuario = decoded.id;\n  }\n  const enviar_temperatura_alert = async (temp, ID_usuario) => {\n    setAlertStatus('Enviando alerta...');\n    try {\n      const temperaturaFormateada = temp.toFixed(2);\n      console.log(\"Enviando temperatura formateada:\", temperaturaFormateada);\n\n      // Enviar correo electrónico\n      const response = await fetch(\"http://localhost:5000/send-email\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n          temperatura: parseFloat(temperaturaFormateada)\n        })\n      });\n      const data = await response.json();\n      if (response.ok) {\n        console.log(\"Alerta enviada con éxito:\", data.message);\n        setAlertStatus('Alerta enviada con éxito');\n\n        // Crear string formateado para la fecha en MySQL\n        const currentTime = new Date().toISOString().slice(0, 19).replace('T', ' ');\n\n        // Insertar notificación en la base de datos\n        const notificacionResponse = await axios.post(\"http://localhost:5000/api/addNotification\", {\n          tipo: 'temperatura',\n          descripcion: `Temperatura fuera de rango: ${temperaturaFormateada}°C`,\n          time_alert: currentTime // Asegurarse de que esto sea un string formateado correctamente\n        }, {\n          headers: {\n            \"Content-Type\": \"application/json\"\n          }\n        });\n        const idNotificacion = notificacionResponse.data.id_notificacion;\n        if (idNotificacion) {\n          // Insertar la relación usuario-notificación\n          await axios.post(\"http://localhost:5000/api/addNotificationUser\", {\n            id_notificacion: idNotificacion,\n            id_user: ID_usuario\n          }, {\n            headers: {\n              \"Content-Type\": \"application/json\"\n            }\n          });\n          console.log(\"Relación notificación-usuario guardada con éxito\");\n        }\n\n        // Evita spam de alertas\n        setLastAlertValue(temp);\n        setCooldown(true);\n        setTimeout(() => {\n          setCooldown(false);\n        }, 10000);\n      } else {\n        console.error(\"Error en la respuesta del servidor:\", data.message);\n        setAlertStatus(`Error: ${data.message}`);\n      }\n    } catch (error) {\n      console.error(\"Error al enviar la alerta:\", error);\n      setAlertStatus(`Error de conexión: ${error.message}`);\n    }\n  };\n\n  // Este manejador solo actualiza el input, no el valor de temperatura real\n  const handleInputChange = e => {\n    setInputValue(e.target.value);\n  };\n\n  // Función para actualizar la temperatura cuando se presiona el botón\n  const handleUpdateTemperature = () => {\n    const newTemperatura = parseFloat(inputValue);\n\n    // Verificar que es un número válido\n    if (!isNaN(newTemperatura)) {\n      setTemperatura(newTemperatura);\n      enviarTemperatura(ID_usuario, newTemperatura, 'FRIA', new Date().toISOString().slice(0, 19).replace('T', ' '));\n    } else {\n      setAlertStatus('Por favor ingrese un número válido');\n      setTimeout(() => setAlertStatus(''), 3000);\n    }\n  };\n  const enviarTemperatura = async (ID_usuario, temperatura, Zona, Marca_tiempo) => {\n    try {\n      // Verificar que todos los datos requeridos estén presentes\n      if (!ID_usuario || !temperatura || !Zona || !Marca_tiempo) {\n        console.error('Datos incompletos:', {\n          ID_usuario,\n          temperatura,\n          Zona,\n          Marca_tiempo\n        });\n        throw new Error('Todos los campos son obligatorios');\n      }\n      console.log('Intentando enviar datos al servidor:', {\n        ID_usuario,\n        Medicion: temperatura,\n        Zona,\n        Marca_tiempo\n      });\n\n      // Establecer un timeout para la solicitud\n      const response = await axios.post('http://localhost:5000/api/addtemperatura', {\n        ID_usuario: ID_usuario,\n        Medicion: temperatura,\n        Zona: Zona,\n        Marca_tiempo: Marca_tiempo\n      }, {\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        timeout: 10000 // 10 segundos de timeout\n      });\n      console.log('Respuesta exitosa del servidor:', response.data);\n      return response.data;\n    } catch (error) {\n      // Manejo detallado de errores\n      if (error.response) {\n        // El servidor respondió con un error\n        console.error(`Error del servidor (${error.response.status}):`, error.response.data);\n        alert(`Error del servidor: ${error.response.status} - ${error.response.data.error || 'Error desconocido'}`);\n      } else if (error.request) {\n        // No se recibió respuesta\n        console.error('No se recibió respuesta del servidor. Verifique que el servidor esté en ejecución.');\n        alert('No fue posible conectar con el servidor. Verifique su conexión e intente nuevamente.');\n      } else {\n        // Error en la configuración de la solicitud\n        console.error('Error al configurar la solicitud:', error.message);\n        alert(`Error: ${error.message}`);\n      }\n\n      // Intento de reconexión automática (opcional)\n      return false; // Indica que hubo un error\n    }\n  };\n  useEffect(() => {\n    // Solo enviar alerta si la temperatura es válida (no NaN)\n    if (isNaN(temperatura)) return;\n\n    // Verificamos si está fuera del rango permitido\n    const fueraDeRango = temperatura < 22 || temperatura > 32;\n    if (fueraDeRango) {\n      // Verificamos si debemos enviar una nueva alerta\n      const debeEnviarAlerta =\n      // No hay una alerta previa\n      lastAlertValue === null ||\n      // La temperatura ha cambiado significativamente (más de 1 grado)\n      Math.abs(temperatura - lastAlertValue) >= 1 ||\n      // La temperatura cruzó el umbral (de caliente a frío o viceversa)\n      lastAlertValue > 32 && temperatura < 22 || lastAlertValue < 22 && temperatura > 32;\n\n      // Solo enviamos si debemos y no estamos en cooldown\n      if (debeEnviarAlerta && !cooldown) {\n        console.log(\"Enviando alerta por temperatura:\", temperatura);\n        enviar_temperatura_alert(temperatura, ID_usuario);\n      }\n    } else {\n      // Si volvió al rango normal, reiniciamos para que la próxima vez envíe alerta\n      if (lastAlertValue !== null) {\n        setLastAlertValue(null);\n        setAlertStatus('Temperatura normalizada');\n\n        // Después de 3 segundos, limpiamos el mensaje\n        setTimeout(() => {\n          if (temperatura >= 22 && temperatura <= 32) {\n            setAlertStatus('');\n          }\n        }, 3000);\n      }\n    }\n  }, [temperatura, lastAlertValue, cooldown, ID_usuario]);\n\n  // Actualizar el input cuando cambia la temperatura externa\n  useEffect(() => {\n    setInputValue(temperatura.toString());\n  }, [temperatura]);\n\n  // Determinar el estilo basado en el rango de temperatura\n  const getTemperatureStyle = () => {\n    if (temperatura > 32) return {\n      color: 'red',\n      fontWeight: 'bold'\n    };\n    if (temperatura < 22) return {\n      color: 'blue',\n      fontWeight: 'bold'\n    };\n    return {\n      color: 'green'\n    };\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"PruebasNotificaciones\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Monitoreo De Temperatura\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 205,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        display: 'flex',\n        alignItems: 'center',\n        gap: '10px',\n        marginBottom: '15px'\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"temperatura\",\n        children: \"Temperatura (\\xB0C): \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 207,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        id: \"temperatura\",\n        type: \"number\",\n        value: inputValue,\n        onChange: handleInputChange,\n        step: \"0.1\",\n        style: {\n          width: '80px'\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 208,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleUpdateTemperature,\n        style: {\n          padding: '5px 15px',\n          backgroundColor: '#4CAF50',\n          color: 'white',\n          border: 'none',\n          borderRadius: '4px',\n          cursor: 'pointer'\n        },\n        children: \"Actualizar\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 216,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 206,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Temperatura actual: \", /*#__PURE__*/_jsxDEV(\"span\", {\n        style: getTemperatureStyle(),\n        children: [temperatura.toFixed(2), \"\\xB0C\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 231,\n        columnNumber: 30\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 231,\n      columnNumber: 7\n    }, this), temperatura < 22 && /*#__PURE__*/_jsxDEV(\"p\", {\n      style: {\n        color: 'blue'\n      },\n      children: \"\\u26A0\\uFE0F Temperatura por debajo del rango normal (22\\xB0C - 32\\xB0C)\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 234,\n      columnNumber: 9\n    }, this), temperatura > 32 && /*#__PURE__*/_jsxDEV(\"p\", {\n      style: {\n        color: 'red'\n      },\n      children: \"\\u26A0\\uFE0F Temperatura por encima del rango normal (22\\xB0C - 32\\xB0C)\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 239,\n      columnNumber: 9\n    }, this), cooldown && /*#__PURE__*/_jsxDEV(\"p\", {\n      style: {\n        color: 'gray'\n      },\n      children: \"\\u23F1\\uFE0F Esperando para enviar la siguiente alerta...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 245,\n      columnNumber: 9\n    }, this), alertStatus && /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"alert-status\",\n      children: alertStatus\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 250,\n      columnNumber: 23\n    }, this), lastAlertValue !== null && /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        marginTop: '10px',\n        fontSize: '0.9em',\n        color: '#555'\n      },\n      children: [\"\\xDAltima alerta enviada: \", lastAlertValue.toFixed(2), \"\\xB0C\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 253,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 204,\n    columnNumber: 5\n  }, this);\n};\n_s(TemperaturaAlert, \"I/uslIiysgS1kJ7pMV9ImoXmBao=\");\n_c = TemperaturaAlert;\nfunction PruebasNotificaciones() {\n  _s2();\n  const [temperatura, setTemperatura] = useState(25); // Valor inicial dentro del rango normal\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(TemperaturaAlert, {\n      temperatura: temperatura,\n      setTemperatura: setTemperatura\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 266,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 265,\n    columnNumber: 5\n  }, this);\n}\n_s2(PruebasNotificaciones, \"BSLE6W81eo5m/C7rYFlDzZ5wRTU=\");\n_c2 = PruebasNotificaciones;\nexport default PruebasNotificaciones;\nvar _c, _c2;\n$RefreshReg$(_c, \"TemperaturaAlert\");\n$RefreshReg$(_c2, \"PruebasNotificaciones\");","map":{"version":3,"names":["useState","useEffect","axios","jwtDecode","jsxDEV","_jsxDEV","TemperaturaAlert","temperatura","setTemperatura","_s","inputValue","setInputValue","toString","lastAlertValue","setLastAlertValue","alertStatus","setAlertStatus","cooldown","setCooldown","token","localStorage","getItem","ID_usuario","decoded","id","enviar_temperatura_alert","temp","temperaturaFormateada","toFixed","console","log","response","fetch","method","headers","body","JSON","stringify","parseFloat","data","json","ok","message","currentTime","Date","toISOString","slice","replace","notificacionResponse","post","tipo","descripcion","time_alert","idNotificacion","id_notificacion","id_user","setTimeout","error","handleInputChange","e","target","value","handleUpdateTemperature","newTemperatura","isNaN","enviarTemperatura","Zona","Marca_tiempo","Error","Medicion","timeout","status","alert","request","fueraDeRango","debeEnviarAlerta","Math","abs","getTemperatureStyle","color","fontWeight","className","children","fileName","_jsxFileName","lineNumber","columnNumber","style","display","alignItems","gap","marginBottom","htmlFor","type","onChange","step","width","onClick","padding","backgroundColor","border","borderRadius","cursor","marginTop","fontSize","_c","PruebasNotificaciones","_s2","_c2","$RefreshReg$"],"sources":["C:/Users/Roger/Documents/TT2_AVANCES/prototipo-gecko/frontend/src/pages/pruebasNotificaciones.jsx"],"sourcesContent":["import { useState, useEffect } from 'react';\r\n// Importamos axios para hacer peticiones HTTP a nuestra API\r\nimport axios from \"axios\";\r\nimport {jwtDecode} from \"jwt-decode\";\r\n\r\nconst TemperaturaAlert = ({ temperatura, setTemperatura }) => {\r\n  // Estado para el valor del input separado del valor actual de temperatura\r\n  const [inputValue, setInputValue] = useState(temperatura.toString());\r\n  const [lastAlertValue, setLastAlertValue] = useState(null);\r\n  const [alertStatus, setAlertStatus] = useState('');\r\n  const [cooldown, setCooldown] = useState(false);\r\n  \r\n  const token = localStorage.getItem(\"token\");\r\n\r\n  let ID_usuario = '';\r\n   \r\n  if (token) {\r\n    const decoded = jwtDecode(token); // Necesitas la librería jwt-decode\r\n    ID_usuario = decoded.id;\r\n  }\r\n  \r\n  const enviar_temperatura_alert = async (temp, ID_usuario) => {\r\n    setAlertStatus('Enviando alerta...');\r\n    try {\r\n        const temperaturaFormateada = temp.toFixed(2);\r\n        console.log(\"Enviando temperatura formateada:\", temperaturaFormateada);\r\n\r\n        // Enviar correo electrónico\r\n        const response = await fetch(\"http://localhost:5000/send-email\", {\r\n            method: \"POST\",\r\n            headers: { \"Content-Type\": \"application/json\" },\r\n            body: JSON.stringify({ temperatura: parseFloat(temperaturaFormateada) })\r\n        });\r\n        const data = await response.json();\r\n\r\n        if (response.ok) {\r\n            console.log(\"Alerta enviada con éxito:\", data.message);\r\n            setAlertStatus('Alerta enviada con éxito');\r\n\r\n            // Crear string formateado para la fecha en MySQL\r\n            const currentTime = new Date().toISOString().slice(0, 19).replace('T', ' ');\r\n            \r\n            // Insertar notificación en la base de datos\r\n            const notificacionResponse = await axios.post(\"http://localhost:5000/api/addNotification\", {\r\n                tipo: 'temperatura',\r\n                descripcion: `Temperatura fuera de rango: ${temperaturaFormateada}°C`,\r\n                time_alert: currentTime // Asegurarse de que esto sea un string formateado correctamente\r\n            }, {\r\n                headers: { \"Content-Type\": \"application/json\" }\r\n            });\r\n\r\n            const idNotificacion = notificacionResponse.data.id_notificacion;\r\n\r\n            if (idNotificacion) {\r\n                // Insertar la relación usuario-notificación\r\n                await axios.post(\"http://localhost:5000/api/addNotificationUser\", {\r\n                    id_notificacion: idNotificacion,\r\n                    id_user: ID_usuario\r\n                }, {\r\n                    headers: { \"Content-Type\": \"application/json\" }\r\n                });\r\n\r\n                console.log(\"Relación notificación-usuario guardada con éxito\");\r\n            }\r\n\r\n            // Evita spam de alertas\r\n            setLastAlertValue(temp);\r\n            setCooldown(true);\r\n            setTimeout(() => { setCooldown(false); }, 10000);\r\n        } else {\r\n            console.error(\"Error en la respuesta del servidor:\", data.message);\r\n            setAlertStatus(`Error: ${data.message}`);\r\n        }\r\n    } catch (error) {\r\n        console.error(\"Error al enviar la alerta:\", error);\r\n        setAlertStatus(`Error de conexión: ${error.message}`);\r\n    }\r\n};\r\n  \r\n  // Este manejador solo actualiza el input, no el valor de temperatura real\r\n  const handleInputChange = (e) => {\r\n    setInputValue(e.target.value);\r\n  };\r\n  \r\n  // Función para actualizar la temperatura cuando se presiona el botón\r\n  const handleUpdateTemperature = () => {\r\n    const newTemperatura = parseFloat(inputValue);\r\n    \r\n    // Verificar que es un número válido\r\n    if (!isNaN(newTemperatura)) {\r\n      setTemperatura(newTemperatura);\r\n      enviarTemperatura(ID_usuario, newTemperatura, 'FRIA', new Date().toISOString().slice(0, 19).replace('T', ' '));\r\n    } else {\r\n      setAlertStatus('Por favor ingrese un número válido');\r\n      setTimeout(() => setAlertStatus(''), 3000);\r\n    }\r\n  };\r\n  \r\n  const enviarTemperatura = async (ID_usuario, temperatura, Zona, Marca_tiempo) => {\r\n    try {\r\n      // Verificar que todos los datos requeridos estén presentes\r\n      if (!ID_usuario || !temperatura || !Zona || !Marca_tiempo) {\r\n        console.error('Datos incompletos:', { ID_usuario, temperatura, Zona, Marca_tiempo });\r\n        throw new Error('Todos los campos son obligatorios');\r\n      }\r\n      \r\n      console.log('Intentando enviar datos al servidor:', {\r\n        ID_usuario,\r\n        Medicion: temperatura,\r\n        Zona,\r\n        Marca_tiempo\r\n      });\r\n      \r\n      // Establecer un timeout para la solicitud\r\n      const response = await axios.post(\r\n        'http://localhost:5000/api/addtemperatura',\r\n        {\r\n          ID_usuario: ID_usuario,\r\n          Medicion: temperatura,\r\n          Zona: Zona,\r\n          Marca_tiempo: Marca_tiempo\r\n        },\r\n        {\r\n          headers: { \"Content-Type\": \"application/json\" },\r\n          timeout: 10000 // 10 segundos de timeout\r\n        }\r\n      );\r\n  \r\n      console.log('Respuesta exitosa del servidor:', response.data);\r\n      return response.data;\r\n    } catch (error) {\r\n      // Manejo detallado de errores\r\n      if (error.response) {\r\n        // El servidor respondió con un error\r\n        console.error(`Error del servidor (${error.response.status}):`, error.response.data);\r\n        alert(`Error del servidor: ${error.response.status} - ${error.response.data.error || 'Error desconocido'}`);\r\n      } else if (error.request) {\r\n        // No se recibió respuesta\r\n        console.error('No se recibió respuesta del servidor. Verifique que el servidor esté en ejecución.');\r\n        alert('No fue posible conectar con el servidor. Verifique su conexión e intente nuevamente.');\r\n      } else {\r\n        // Error en la configuración de la solicitud\r\n        console.error('Error al configurar la solicitud:', error.message);\r\n        alert(`Error: ${error.message}`);\r\n      }\r\n      \r\n      // Intento de reconexión automática (opcional)\r\n      return false; // Indica que hubo un error\r\n    }\r\n  };\r\n  \r\n  useEffect(() => {\r\n    // Solo enviar alerta si la temperatura es válida (no NaN)\r\n    if (isNaN(temperatura)) return;\r\n    \r\n    // Verificamos si está fuera del rango permitido\r\n    const fueraDeRango = temperatura < 22 || temperatura > 32;\r\n    \r\n    if (fueraDeRango) {\r\n      // Verificamos si debemos enviar una nueva alerta\r\n      const debeEnviarAlerta = \r\n        // No hay una alerta previa\r\n        lastAlertValue === null || \r\n        // La temperatura ha cambiado significativamente (más de 1 grado)\r\n        Math.abs(temperatura - lastAlertValue) >= 1 || \r\n        // La temperatura cruzó el umbral (de caliente a frío o viceversa)\r\n        (lastAlertValue > 32 && temperatura < 22) || \r\n        (lastAlertValue < 22 && temperatura > 32);\r\n      \r\n      // Solo enviamos si debemos y no estamos en cooldown\r\n      if (debeEnviarAlerta && !cooldown) {\r\n        console.log(\"Enviando alerta por temperatura:\", temperatura);\r\n        enviar_temperatura_alert(temperatura, ID_usuario);\r\n      }\r\n    } else {\r\n      // Si volvió al rango normal, reiniciamos para que la próxima vez envíe alerta\r\n      if (lastAlertValue !== null) {\r\n        setLastAlertValue(null);\r\n        setAlertStatus('Temperatura normalizada');\r\n        \r\n        // Después de 3 segundos, limpiamos el mensaje\r\n        setTimeout(() => {\r\n          if (temperatura >= 22 && temperatura <= 32) {\r\n            setAlertStatus('');\r\n          }\r\n        }, 3000);\r\n      }\r\n    }\r\n  }, [temperatura, lastAlertValue, cooldown, ID_usuario]);\r\n  \r\n  // Actualizar el input cuando cambia la temperatura externa\r\n  useEffect(() => {\r\n    setInputValue(temperatura.toString());\r\n  }, [temperatura]);\r\n  \r\n  // Determinar el estilo basado en el rango de temperatura\r\n  const getTemperatureStyle = () => {\r\n    if (temperatura > 32) return { color: 'red', fontWeight: 'bold' };\r\n    if (temperatura < 22) return { color: 'blue', fontWeight: 'bold' };\r\n    return { color: 'green' };\r\n  };\r\n  \r\n  return (\r\n    <div className=\"PruebasNotificaciones\">\r\n      <h2>Monitoreo De Temperatura</h2>\r\n      <div style={{ display: 'flex', alignItems: 'center', gap: '10px', marginBottom: '15px' }}>\r\n        <label htmlFor=\"temperatura\">Temperatura (°C): </label>\r\n        <input \r\n          id=\"temperatura\"\r\n          type=\"number\" \r\n          value={inputValue} \r\n          onChange={handleInputChange} \r\n          step=\"0.1\"\r\n          style={{ width: '80px' }}\r\n        />\r\n        <button \r\n          onClick={handleUpdateTemperature}\r\n          style={{\r\n            padding: '5px 15px',\r\n            backgroundColor: '#4CAF50',\r\n            color: 'white',\r\n            border: 'none',\r\n            borderRadius: '4px',\r\n            cursor: 'pointer'\r\n          }}\r\n        >\r\n          Actualizar\r\n        </button>\r\n      </div>\r\n      \r\n      <p>Temperatura actual: <span style={getTemperatureStyle()}>{temperatura.toFixed(2)}°C</span></p>\r\n      \r\n      {temperatura < 22 && \r\n        <p style={{color: 'blue'}}>\r\n          ⚠️ Temperatura por debajo del rango normal (22°C - 32°C)\r\n        </p>\r\n      }\r\n      {temperatura > 32 && \r\n        <p style={{color: 'red'}}>\r\n          ⚠️ Temperatura por encima del rango normal (22°C - 32°C)\r\n        </p>\r\n      }\r\n      \r\n      {cooldown && \r\n        <p style={{color: 'gray'}}>\r\n          ⏱️ Esperando para enviar la siguiente alerta...\r\n        </p>\r\n      }\r\n      \r\n      {alertStatus && <p className=\"alert-status\">{alertStatus}</p>}\r\n      \r\n      {lastAlertValue !== null && (\r\n        <div style={{marginTop: '10px', fontSize: '0.9em', color: '#555'}}>\r\n          Última alerta enviada: {lastAlertValue.toFixed(2)}°C\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nfunction PruebasNotificaciones() {\r\n  const [temperatura, setTemperatura] = useState(25); // Valor inicial dentro del rango normal\r\n  \r\n  return (\r\n    <div>\r\n      <TemperaturaAlert temperatura={temperatura} setTemperatura={setTemperatura} />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default PruebasNotificaciones;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}