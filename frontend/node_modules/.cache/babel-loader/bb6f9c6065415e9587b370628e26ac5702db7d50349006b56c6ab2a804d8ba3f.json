{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Roger\\\\Documents\\\\TT2_AVANCES\\\\prototipo-gecko\\\\frontend\\\\src\\\\pages\\\\pruebasNotificaciones.jsx\";\nimport React, { Component } from 'react';\nimport TemperatureAlert from './TemperatureAlert';\nimport TemperatureUtility from './TemperatureUtility';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nclass PruebasNotificaciones extends Component {\n  constructor(props) {\n    super(props);\n\n    // Ya no necesitamos mantener el estado aquí, lo obtenemos directamente del utilitario\n    this.state = {\n      // Solo mantenemos una referencia para forzar re-renderizados si es necesario\n      lastUpdate: Date.now()\n    };\n  }\n  componentDidMount() {\n    // Nos suscribimos para actualizar el componente si cambia la temperatura\n    this.unsubscribeTemp = TemperatureUtility.subscribeToTemperature(() => {\n      this.setState({\n        lastUpdate: Date.now()\n      });\n    });\n  }\n  componentWillUnmount() {\n    // Limpiamos suscripciones\n    if (this.unsubscribeTemp) this.unsubscribeTemp();\n  }\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(TemperatureAlert, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 31,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 7\n    }, this);\n  }\n}\nexport default PruebasNotificaciones;","map":{"version":3,"names":["React","Component","TemperatureAlert","TemperatureUtility","jsxDEV","_jsxDEV","PruebasNotificaciones","constructor","props","state","lastUpdate","Date","now","componentDidMount","unsubscribeTemp","subscribeToTemperature","setState","componentWillUnmount","render","children","fileName","_jsxFileName","lineNumber","columnNumber"],"sources":["C:/Users/Roger/Documents/TT2_AVANCES/prototipo-gecko/frontend/src/pages/pruebasNotificaciones.jsx"],"sourcesContent":["import React, { Component } from 'react';\r\nimport TemperatureAlert from './TemperatureAlert';\r\nimport TemperatureUtility from './TemperatureUtility';\r\n\r\nclass PruebasNotificaciones extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    \r\n    // Ya no necesitamos mantener el estado aquí, lo obtenemos directamente del utilitario\r\n    this.state = {\r\n      // Solo mantenemos una referencia para forzar re-renderizados si es necesario\r\n      lastUpdate: Date.now()\r\n    };\r\n  }\r\n  \r\n  componentDidMount() {\r\n    // Nos suscribimos para actualizar el componente si cambia la temperatura\r\n    this.unsubscribeTemp = TemperatureUtility.subscribeToTemperature(() => {\r\n      this.setState({ lastUpdate: Date.now() });\r\n    });\r\n  }\r\n  \r\n  componentWillUnmount() {\r\n    // Limpiamos suscripciones\r\n    if (this.unsubscribeTemp) this.unsubscribeTemp();\r\n  }\r\n  \r\n  render() {\r\n    return (\r\n      <div>\r\n        <TemperatureAlert />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default PruebasNotificaciones;"],"mappings":";AAAA,OAAOA,KAAK,IAAIC,SAAS,QAAQ,OAAO;AACxC,OAAOC,gBAAgB,MAAM,oBAAoB;AACjD,OAAOC,kBAAkB,MAAM,sBAAsB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEtD,MAAMC,qBAAqB,SAASL,SAAS,CAAC;EAC5CM,WAAWA,CAACC,KAAK,EAAE;IACjB,KAAK,CAACA,KAAK,CAAC;;IAEZ;IACA,IAAI,CAACC,KAAK,GAAG;MACX;MACAC,UAAU,EAAEC,IAAI,CAACC,GAAG,CAAC;IACvB,CAAC;EACH;EAEAC,iBAAiBA,CAAA,EAAG;IAClB;IACA,IAAI,CAACC,eAAe,GAAGX,kBAAkB,CAACY,sBAAsB,CAAC,MAAM;MACrE,IAAI,CAACC,QAAQ,CAAC;QAAEN,UAAU,EAAEC,IAAI,CAACC,GAAG,CAAC;MAAE,CAAC,CAAC;IAC3C,CAAC,CAAC;EACJ;EAEAK,oBAAoBA,CAAA,EAAG;IACrB;IACA,IAAI,IAAI,CAACH,eAAe,EAAE,IAAI,CAACA,eAAe,CAAC,CAAC;EAClD;EAEAI,MAAMA,CAAA,EAAG;IACP,oBACEb,OAAA;MAAAc,QAAA,eACEd,OAAA,CAACH,gBAAgB;QAAAkB,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACjB,CAAC;EAEV;AACF;AAEA,eAAejB,qBAAqB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}